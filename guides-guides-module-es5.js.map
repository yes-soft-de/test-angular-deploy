{"version":3,"sources":["webpack:///src/app/pages/guides/components/all-guides/all-guides.component.ts","webpack:///src/app/pages/guides/components/all-guides/all-guides.component.html","webpack:///src/app/pages/guides/components/guide-details/guide-details.component.ts","webpack:///src/app/pages/guides/components/guide-details/guide-details.component.html","webpack:///src/app/pages/guides/components/update-guide/update-guide.component.ts","webpack:///src/app/pages/guides/components/update-guide/update-guide.component.html","webpack:///src/app/pages/guides/guides-routing.module.ts","webpack:///src/app/pages/guides/guides.module.ts","webpack:///src/app/pages/guides/services/guides.service.ts","webpack:///src/app/pages/guides/store/guide.actions.ts","webpack:///src/app/pages/guides/store/guide.effects.ts","webpack:///src/app/pages/guides/store/guide.reducer.ts","webpack:///src/app/pages/guides/store/guide.selector.ts"],"names":["AllGuidesComponent","store","guidesList","dispatch","getAllGuides","guidesSubscription","select","subscribe","data","guides","config","itemsPerPage","currentPage","totalItems","length","event","name","filter","res","toLocaleLowerCase","match","status","unsubscribe","selector","templateUrl","styleUrls","GuideDetailsComponent","activatedRoute","guideOrdersList","paramMap","params","id","get","getGuideDetails","console","log","guide","myOrders","UpdateGuideComponent","toaster","guideId","updateGuideFrom","required","getGuideById","response","fillGuideForm","valid","error","formObject","getRawValue","routes","path","component","GuidesRoutingModule","forChild","imports","exports","GuidesModule","forFeature","declarations","GuidesService","httpClient","guidesAPI","guideByIdAPI","put","updateGuideAPI","providedIn","loadGuides","loadGuidesSuccess","loadGuidesFailure","loadGuide","loadGuideSuccess","loadGuideFailure","updateGuide","updateGuideSuccess","updateGuideFailure","addGuide","upsertGuide","addGuides","upsertGuides","updateGuides","deleteGuide","deleteGuides","clearGuides","GuideEffects","actions$","guidesService","router","loadGuides$","pipe","Data","loadGuide$","action","approveGuide$","updateGuideStatus","success","msg","redirectAfterUpdateGuide$","navigate","guidesFeatureKey","adapter","initialState","getInitialState","undefined","reducer","state","setAll","addOne","upsertOne","addMany","upsertMany","updateMany","removeOne","removeMany","ids","removeAll","getSelectors","selectIds","selectEntities","selectAll","selectTotal","guideFeatureState","getAllGuidesSelector","getGuideSelector"],"mappings":"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","file":"guides-guides-module-es5.js","sourcesContent":["import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {GuideState} from '../../store/guide.reducer';\nimport {getAllGuidesSelector} from '../../store/guide.selector';\nimport {loadGuides} from '../../store/guide.actions';\nimport {Observable, Subscription} from 'rxjs';\nimport {Guide} from '../../model/guide.model';\nimport * as regionsAction from '../../../regions/store/region.actions';\n\n@Component({\n  selector: 'app-all-guides',\n  templateUrl: './all-guides.component.html',\n  styleUrls: ['./all-guides.component.scss']\n})\nexport class AllGuidesComponent implements OnInit, OnDestroy {\n  guides: Guide[];\n  guidesList: Guide[] = [];\n  guidesSubscription: Subscription;\n  name: string;\n  config: any;\n\n  constructor(private store: Store<GuideState>) { }\n\n  ngOnInit(): void {\n\n    this.store.dispatch(loadGuides());\n    this.getAllGuides();\n\n  }\n\n  getAllGuides() {\n    this.guidesSubscription = this.store.select(getAllGuidesSelector).subscribe(\n      data => {\n        if (data) {\n          this.guides = data;\n          this.guidesList = data;\n          // Config the pagination\n          this.config = {\n            itemsPerPage: 5,\n            currentPage: 1,\n            totalItems: this.guidesList.length\n          };\n        }\n      }\n    );\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.guidesList = [...this.guides];\n    } else {\n      this.guidesList = [];\n      this.guidesList = this.guides.filter(res => {\n        if (res.name) {\n          const name = res.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (name) {\n            // display the Name Column\n            return name;\n          }\n        }\n        // if (res?.regions?.length > 0) {\n        //   res?.regions.forEach(e => {\n        //\n        //     if (e?.name) {\n        //       const regionsName = e?.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n        //       console.log(this.name, regionsName);\n        //       if (regionsName) {\n        //         // display the Name Column\n        //         debugger;\n        //         return regionsName;\n        //       }\n        //     }\n        //   });\n        // }\n        if (res.status) {\n          const status = res.status.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (status) {\n            // display the Name Column\n            return status;\n          }\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.guidesSubscription.unsubscribe();\n  }\n}\n","  <div *ngIf=\"guides.length != 0\">\n    <!-- <div *ngIf=\"regionsList.length !== 0\"> -->\n    <!-- <div class=\"container-fluid\"> -->\n    <h1 class=\"text-center details-title my-4\">{{'manage-guides-page' | translate}}</h1>\n    <div class=\"row\">\n      <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n        <div class=\"form-group mb-4\">\n          <input\n            id=\"exampleFormControlInput2\"\n            [(ngModel)]=\"name\"\n            (keyup)=\"applyFilter()\"\n            type=\"text\"\n            placeholder=\"{{'guides-search-input' | translate}}\"\n            title=\"{{'guides-search-input' | translate}}\"\n            class=\"form-control form-control-underlined border-primary search-input\">\n        </div>\n      </div>\n      <!-- <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n        <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/regions/add\">\n          <i class=\"fa fa-plus\"></i>\n          {{'new-region' | translate}}\n        </a>\n      </div> -->\n    </div>\n    <div class=\"table-responsive text-center\">\n      <table class=\"table table-bordered main-table\">\n        <tr class=\"bg-dark text-white\">\n          <td>{{'image' | translate}}</td>\n          <td>{{'name' | translate}}</td>\n          <td>{{'city' | translate}}</td>\n          <td>{{'region-name' | translate}}</td>\n          <td>{{'language' | translate}}</td>\n          <td>{{'rating' | translate}}</td>\n          <td>{{'status' | translate}}</td>\n          <td>{{'control' | translate}}</td>\n        </tr>\n        <tr *ngFor=\"let guide of guidesList | paginate: config\">\n          <td><img src=\"{{guide?.image}}\" alt=\"{{guide?.name}} Image\" class=\"img-thumbnail img-custom\"></td>\n          <td>{{guide.name ? guide?.name : '-'}}</td>\n          <td>\n            {{guide?.city.length == 0 ? '-' : null}}\n            <span class=\"m-1 px-1 rounded border border-primary\" *ngFor=\"let city of guide?.city\">{{city}}</span>\n          </td>\n          <td>\n            {{guide?.regions.length == 0 ? '-' : null}}\n            <span class=\"{{region?.name ? 'm-1 px-1 rounded border border-primary' : null}}\" *ngFor=\"let region of guide?.regions\">{{region?.name ? region?.name : null}}</span>\n          </td>\n          <td>\n            {{guide?.language.length == 0 ? '-' : null}}\n            <span class=\"m-1 px-1 rounded bg-grey-blue text-white\" *ngFor=\"let lang of guide?.language\">{{lang}}</span>\n          </td>\n          <td>{{guide?.rating ? guide?.rating : '-'}}</td>\n          <td>{{guide?.status ? (guide?.status | translate) : '-'}}</td>\n          <td>\n            <a routerLink=\"/guides/{{guide?.id}}\" class=\"btn bg-light-blue text-white btn-sm mr-1 mb-1\">\n              {{'view' | translate}}\n            </a>\n            <a routerLink=\"/guides/approve/{{guide?.id}}\" class=\"btn bg-light-blue text-white btn-sm mr-1 mb-1\">\n              {{'approve' | translate}}\n            </a>\n          </td>\n        </tr>\n      </table>\n      <pagination-controls class=\"my-pagination\"\n                           (pageChange)=\"pageChanged($event)\"\n                           autoHide=\"true\"\n                           maxSize=\"5\"\n                           responsive=\"true\"\n                           previousLabel=\"{{'prev' | translate}}\"\n                           nextLabel=\"{{'next' | translate}}\"\n                           screenReaderPaginationLabel=\"Pagination\"\n                           screenReaderPageLabel=\"page\"\n                           screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n      </pagination-controls>\n    </div>\n    <!-- </div> -->\n    <!-- </div> -->\n    <!-- <div *ngIf=\"regionsList.length === 0\">\n        <div class=\"container\">\n            <div class=\"alert alert-primary text-center mt-5\">{{'region-not-found' | translate}}</div>\n            <a routerLink=\"/cars/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n                <i class=\"fa fa-plus\"></i>\n                {{'add-new-car' | translate}}\n            </a>\n        </div>\n    </div> -->\n  </div>\n  <div *ngIf=\"guides.length == 0\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n  </div>\n","import { Component, OnInit } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {Guide} from '../../model/guide.model';\nimport {GuideState} from '../../store/guide.reducer';\nimport {Store} from '@ngrx/store';\nimport {ActivatedRoute, ParamMap} from '@angular/router';\nimport {loadGuide} from '../../store/guide.actions';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {getGuideSelector} from '../../store/guide.selector';\nimport {GuideDetails} from '../../model/guide-details';\n\n@Component({\n  selector: 'app-guide-details',\n  templateUrl: './guide-details.component.html',\n  styleUrls: ['./guide-details.component.scss']\n})\nexport class GuideDetailsComponent implements OnInit {\n  guide: GuideDetails;\n  guideOrdersList: any[] = [];\n  config: any;\n\n  constructor(private store: Store<GuideState>,\n              private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe(\n      (params: ParamMap) => {\n        this.store.dispatch(loadGuide({id: params.get('id')}));\n      });\n    this.getGuideDetails();\n  }\n\n  getGuideDetails() {\n    this.store.select(getGuideSelector).subscribe(\n      data => {\n        if (data) {\n          console.log('data: ', data);\n          this.guide = data;\n          this.guideOrdersList = data?.myOrders;\n          this.config = {\n            itemsPerPage: 5,\n            currentPage: 1,\n            totalItems: this.guideOrdersList.length\n          };\n        }\n      }\n    );\n  }\n\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n}\n","<div class=\"guide-details\" *ngIf=\"guide\">\r\n  <div class=\"container\">\r\n    <h1 class=\"my-3 details-title\">{{'guide-details-page' | translate}}</h1>\r\n    <div class=\"row\">\r\n      <div class=\"col-12 col-sm-5 col-md-4 position-relative mx-auto text-center mb-3\">\r\n        <div class=\"image-details mb-3\">\r\n          <img class=\"img-fluid img-thumbnail\" src=\"{{guide?.image}}\" alt=\"{{guide?.name}} Image\" />\r\n        </div>\r\n<!--        <div class=\"row w-100 mx-auto\" *ngIf=\"guide.images.length != 0\">-->\r\n<!--          <div class=\"col-4 mx-auto px-0 mb-1\" *ngFor=\"let img of guide.images; let i = index\">-->\r\n<!--            <div #secondImageDetails class=\"second-images-details\"  (click)=\"viewImage(secondImageDetails)\">-->\r\n<!--              <img (load)=\"checkSecondImagesloaded(i)\" class=\"img-responsive\" src=\"{{img?.image}}\" (error)=\"img.image = '../../../../../assets/default-Item.jpg'\" alt=\"Second Images\" />-->\r\n<!--            </div>-->\r\n<!--          </div>-->\r\n<!--        </div>-->\r\n<!--        <div class=\"overlay\" *ngIf=\"rendering\">-->\r\n<!--          <div class=\"overlay-lds-ring\"><div></div><div></div><div></div><div></div></div>-->\r\n<!--        </div>-->\r\n      </div>\r\n      <div class=\"col-12 col-sm-6 mx-auto\">\r\n        <div class=\"info-details\">\r\n          <ul class=\"list-unstyled\">\r\n            <li>\r\n              <div class=\"row\">\r\n                <div class=\"col\">\r\n                  <h4 class=\"text-info\">{{guide?.name}}</h4>\r\n                </div>\r\n                <div *ngIf=\"guide?.status\" class=\"col align-self-center text-right\">\r\n                  <span class=\"status border border-secondary rounded py-1 px-2\">{{guide?.status | translate}}</span>\r\n                </div>\r\n              </div>\r\n            </li>\r\n<!--            <li class=\"my-2\">-->\r\n<!--              <div class=\"row\">-->\r\n<!--                <div class=\"col-4 col-xl-3 text-center\">-->\r\n<!--                  <img class=\"img-fluid img-thumbnail\" src=\"{{guide?.userImage}}\" (error)=\"guide.userImage = '../../../../../assets/default-avatar.jpg'\" alt=\"{{guide?.username}} Image\" />-->\r\n<!--                </div>-->\r\n<!--                <div class=\"col-7 align-self-center\">-->\r\n<!--                  <h4 class=\"mb-2 text-secondary\">{{guide?.username}}</h4>-->\r\n<!--                </div>-->\r\n<!--              </div>-->\r\n<!--            </li>-->\r\n<!--              myOrders: [-->\r\n<!--                {-->\r\n\r\n<!--              }-->\r\n<!--              ];-->\r\n            <li class=\"mb-2\" *ngIf=\"guide?.language\">\r\n              <p>{{'language' | translate }} :\r\n                <span class=\"m-1 px-1 rounded bg-grey-blue text-white\" *ngFor=\"let lang of guide?.language\">{{lang}}</span>\r\n              </p>\r\n            </li>\r\n            <li class=\"mb-2\" *ngIf=\"guide?.city\">\r\n              <p>{{'city' | translate }} :\r\n                <span class=\"m-1 px-1 rounded border border-primary\" *ngFor=\"let city of guide?.city\">{{city}}</span>\r\n              </p>\r\n            </li>\r\n<!--            <li *ngIf=\"guide?.regions\">-->\r\n<!--              <p class=\"mb-2\">{{'regions' | translate }} :-->\r\n<!--                <span class=\"{{region?.name ? 'm-1 px-1 rounded border border-primary' : null}}\" *ngFor=\"let region of guide?.regions\">{{region?.name ? region?.name : null}}</span>-->\r\n<!--              </p>-->\r\n<!--            </li>-->\r\n            <li class=\"mb-2\" *ngIf=\"guide?.rating\"><p>{{'rating' | translate }} : <span class=\"text-secondary\">{{guide?.rating}}</span></p></li>\r\n          </ul>\r\n        </div><!--.info-details-->\r\n      </div><!--.col-12-->\r\n      <div class=\"col-12\">\r\n        <hr class=\"w-50 mx-auto\">\r\n      </div>\r\n      <div class=\"col-12\" *ngIf=\"guideOrdersList.length > 0\">\r\n        <h3 class=\"\">{{'my-orders' | translate}} :</h3>\r\n      </div>\r\n      <div class=\"col-12 mx-auto\" *ngIf=\"guideOrdersList.length > 0\">\r\n        <div class=\"table-responsive text-center\">\r\n          <table class=\"table table-bordered main-table\">\r\n            <tr class=\"bg-dark text-white\">\r\n              <td>{{'city' | translate}}</td>\r\n              <td>{{'cost' | translate}}</td>\r\n              <td>{{'language' | translate}}</td>\r\n              <td>{{'services' | translate}}</td>\r\n              <td>{{'status' | translate}}</td>\r\n              <td>{{'arrive-date' | translate}}</td>\r\n              <td>{{'acceptance-date' | translate}}</td>\r\n              <td>{{'leave-date' | translate}}</td>\r\n            </tr>\r\n            <tr *ngFor=\"let order of guideOrdersList | paginate: config\">\r\n              <td>{{order.city ? order?.city : '-'}}</td>\r\n              <td>{{order.cost ? order?.cost : '-'}}</td>\r\n              <td>{{order.language ? order?.language : '-'}}</td>\r\n              <td>\r\n                {{order?.services.length == 0 ? '-' : null}}\r\n                <span class=\"m-1 px-1 rounded border border-primary\" *ngFor=\"let service of order?.services\">{{service}}</span>\r\n              </td>\r\n              <td>{{order?.status ? (order?.status | translate) : '-'}}</td>\r\n              <td>{{order?.arriveDate ? (order?.arriveDate.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\r\n              <td>{{order?.date ? (order?.date.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\r\n              <td>{{order?.leaveDate ? (order?.leaveDate.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\r\n            </tr>\r\n          </table>\r\n          <pagination-controls class=\"my-pagination\"\r\n                               (pageChange)=\"pageChanged($event)\"\r\n                               autoHide=\"true\"\r\n                               maxSize=\"5\"\r\n                               responsive=\"true\"\r\n                               previousLabel=\"{{'prev' | translate}}\"\r\n                               nextLabel=\"{{'next' | translate}}\"\r\n                               screenReaderPaginationLabel=\"Pagination\"\r\n                               screenReaderPageLabel=\"page\"\r\n                               screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\r\n          </pagination-controls>\r\n        </div>\r\n      </div>\r\n      <!--.col-12-->\r\n\r\n    </div><!--.row-->\r\n  </div>\r\n</div>\r\n<div *ngIf=\"!guide\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Store} from '@ngrx/store';\nimport {GuideState} from '../../store/guide.reducer';\nimport {ToastrService} from 'ngx-toastr';\nimport {ActivatedRoute, ParamMap} from '@angular/router';\nimport {loadGuide, updateGuide} from '../../store/guide.actions';\nimport {getGuideSelector} from '../../store/guide.selector';\nimport {Guide} from '../../model/guide.model';\n\n@Component({\n  selector: 'app-update-guide',\n  templateUrl: './update-guide.component.html',\n  styleUrls: ['./update-guide.component.scss']\n})\nexport class UpdateGuideComponent implements OnInit {\n  updateGuideFrom: FormGroup;\n  guide: Guide;\n  guideId: string;\n  constructor(private store: Store<GuideState>,\n              private activatedRoute: ActivatedRoute,\n              private toaster: ToastrService) { }\n\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe(\n      (params: ParamMap) => {\n        this.guideId = params.get('id');\n        this.store.dispatch(loadGuide({id: this.guideId}));\n      });\n\n    this.updateGuideFrom = new FormGroup({\n      id: new FormControl(''),\n      status: new FormControl('', Validators.required)\n    });\n    this.getGuideById();\n  }\n\n  getGuideById() {\n    this.store.select(getGuideSelector).subscribe(\n      response => {\n        if (response) {\n          console.log('respones : ', response);\n          this.guide = response;\n          this.fillGuideForm(response);\n        }\n      }\n    );\n  }\n\n  fillGuideForm(data: Guide) {\n    this.updateGuideFrom = new FormGroup({\n      id: new FormControl(data.id),\n      status: new FormControl(data.status, Validators.required),\n    });\n  }\n\n  onSubmit() {\n    if (!this.updateGuideFrom.valid) {\n      this.toaster.error('Form Not Valid !');\n      return;\n    }\n    const formObject = this.updateGuideFrom.getRawValue();\n    formObject.id = this.guideId;\n    console.log(formObject);\n    this.store.dispatch(updateGuide({id: formObject.id, status: formObject.status}));\n  }\n}\n","<!-- general form elements -->\r\n<div class=\"container-fluid\" *ngIf=\"guide != null\">\r\n  <div class=\"content-header\">\r\n    <h1 class=\"text-center mt-5 mb-3\">{{'approve-guide-page' | translate}}</h1>\r\n  </div>\r\n  <div class=\"card card-info mb-5\">\r\n    <div class=\"card-header bg-light-blue text-white p-3\">\r\n      <!-- <h3 class=\"card-title mb-0\">{{'new-event' | translate}}</h3> -->\r\n    </div>\r\n    <!-- /.card-header -->\r\n    <!-- form start -->\r\n    <form [formGroup]=\"updateGuideFrom\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"card-body\">\r\n        <div class=\"form-group\">\r\n          <label class=\"col-form-label\" for=\"inputStatusSuccess\">{{'status' | translate}}</label>\r\n          <select class=\"form-control\"\r\n                  name=\"status\"\r\n                  formControlName=\"status\">\r\n            <option value=\"\">{{'select-status-placeholder' | translate}}</option>\r\n            <option value=\"approved\" [selected]=\"guide.status == 'approved'\">{{'approved' | translate}}</option>\r\n            <option value=\"not-approved\" [selected]=\"guide.status == 'not-approved'\">{{'not-approved' | translate}}</option>\r\n          </select>\r\n          <span class=\"invalid-feedback\" *ngIf=\"updateGuideFrom.get('status').errors?.required\">{{'status-field-required' | translate}}</span>\r\n        </div>\r\n        <!-- <div class=\"form-group\">\r\n          <label for=\"exampleInputcost\">{{'cost' | translate}}</label>\r\n          <input type=\"number\"\r\n                 [ngClass]=\"{'is-invalid': updateGuideFrom.get('cost').errors &&\r\n                           (updateGuideFrom.get('cost').touched || updateGuideFrom.get('cost').dirty)}\"\r\n                 name=\"cost\"\r\n                 formControlName=\"cost\"\r\n                 id=\"exampleInputcost\"\r\n                 class=\"form-control\"\r\n                 placeholder=\"{{'cost-type-placeholder' | translate}}\">\r\n          <span class=\"invalid-feedback\" *ngIf=\"updateGuideFrom.get('cost').errors?.required\">{{'cost-field-is-required' | translate}}</span>\r\n        </div> -->\r\n      </div>\r\n      <!-- /.card-body -->\r\n\r\n      <div class=\"card-footer\">\r\n        <button type=\"submit\" class=\"btn bg-light-blue text-white\" [disabled]=\"updateGuideFrom.invalid\">{{'update' | translate}}</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n  <!-- /.card -->\r\n</div>\r\n<div *ngIf=\"guide == null\">\r\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AllGuidesComponent} from './components/all-guides/all-guides.component';\nimport {UpdateGuideComponent} from './components/update-guide/update-guide.component';\nimport {GuideDetailsComponent} from './components/guide-details/guide-details.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AllGuidesComponent },\n  { path: ':id', component: GuideDetailsComponent },\n  { path: 'approve/:id', component: UpdateGuideComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class GuidesRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport {ThemeModule} from '../../@theme/theme.module';\n\nimport { GuidesRoutingModule } from './guides-routing.module';\nimport { AllGuidesComponent } from './components/all-guides/all-guides.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromGuide from './store/guide.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { GuideEffects } from './store/guide.effects';\nimport { UpdateGuideComponent } from './components/update-guide/update-guide.component';\nimport { GuideDetailsComponent } from './components/guide-details/guide-details.component';\n\n\n@NgModule({\n  declarations: [AllGuidesComponent, UpdateGuideComponent, GuideDetailsComponent],\n  imports: [\n    ThemeModule,\n    GuidesRoutingModule,\n    StoreModule.forFeature(fromGuide.guidesFeatureKey, fromGuide.reducer),\n    EffectsModule.forFeature([GuideEffects])\n  ]\n})\nexport class GuidesModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {GuidesResponse} from '../model/guides-response';\nimport {AdminConfig} from '../../AdminConfig';\nimport {GuideResponse} from '../model/guide-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuidesService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getAllGuides(): Observable<GuidesResponse> {\n    return this.httpClient.get<GuidesResponse>(AdminConfig.guidesAPI);\n  }\n\n  getGuideById(guideId: string): Observable<GuideResponse> {\n    return this.httpClient.get<GuideResponse>(`${AdminConfig.guideByIdAPI}/${guideId}`);\n  }\n\n  updateGuideStatus(id: string, status: string): Observable<any> {\n    const data = {\n      id,\n      status\n    };\n    return this.httpClient.put<any>(AdminConfig.updateGuideAPI, data);\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Guide } from '../model/guide.model';\nimport {GuideDetails} from '../model/guide-details';\n\nexport const loadGuides = createAction(\n  '[Guide/API] Load Guides'\n);\n\nexport const loadGuidesSuccess = createAction(\n  '[Guide/API] Load Guides Success',\n  props<{ Data: Guide[] }>()\n);\n\nexport const loadGuidesFailure = createAction(\n  '[Guide/API] Load Guides Failure',\n  props<{ error: string }>()\n);\n\nexport const loadGuide = createAction(\n  '[Guide/API] Load Guide',\n  props<{ id: string }>()\n);\n\nexport const loadGuideSuccess = createAction(\n  '[Guide/API] Load Guide Success',\n  props<{ guide: GuideDetails }>()\n);\n\nexport const loadGuideFailure = createAction(\n  '[Guide/API] Load Guide Failure',\n  props<{ error: string }>()\n);\n\nexport const updateGuide = createAction(\n  '[Guide/API] Update Guide',\n  props<{ id: string, status: string }>()\n);\n\n\nexport const updateGuideSuccess = createAction(\n  '[Guide/API] Update Guide Success'\n);\n\n\nexport const updateGuideFailure = createAction(\n  '[Guide/API] Update Guide Failure',\n  props<{ error: string }>()\n);\n\n\nexport const addGuide = createAction(\n  '[Guide/API] Add Guide',\n  props<{ guide: Guide }>()\n);\n\nexport const upsertGuide = createAction(\n  '[Guide/API] Upsert Guide',\n  props<{ guide: Guide }>()\n);\n\nexport const addGuides = createAction(\n  '[Guide/API] Add Guides',\n  props<{ guides: Guide[] }>()\n);\n\nexport const upsertGuides = createAction(\n  '[Guide/API] Upsert Guides',\n  props<{ guides: Guide[] }>()\n);\n\nexport const updateGuides = createAction(\n  '[Guide/API] Update Guides',\n  props<{ guides: Update<Guide>[] }>()\n);\n\nexport const deleteGuide = createAction(\n  '[Guide/API] Delete Guide',\n  props<{ id: string }>()\n);\n\nexport const deleteGuides = createAction(\n  '[Guide/API] Delete Guides',\n  props<{ ids: string[] }>()\n);\n\nexport const clearGuides = createAction(\n  '[Guide/API] Clear Guides'\n);\n","import { Injectable } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {GuidesService} from '../services/guides.service';\nimport * as guideActions from './guide.actions';\nimport {catchError, exhaustMap, map, mergeMap, tap} from 'rxjs/operators';\nimport {of} from 'rxjs';\nimport {ToastrService} from 'ngx-toastr';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n\n@Injectable()\nexport class GuideEffects {\n\n\n\n  constructor(private actions$: Actions,\n              private guidesService: GuidesService,\n              private toaster: ToastrService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) {}\n\n  loadGuides$ = createEffect(() => this.actions$.pipe(\n    ofType(guideActions.loadGuides),\n    mergeMap(() => this.guidesService.getAllGuides()\n      .pipe(\n        map(response => {\n          console.log(response);\n          return guideActions.loadGuidesSuccess({Data: response.Data});\n        }),\n        catchError(error => of(guideActions.loadGuidesFailure({error})))\n      ))\n  ));\n\n  loadGuide$ = createEffect(() => this.actions$.pipe(\n    ofType(guideActions.loadGuide),\n    mergeMap(action => this.guidesService.getGuideById(action.id)\n      .pipe(\n        map(response => guideActions.loadGuideSuccess({guide: response.Data})),\n        catchError(error => of(guideActions.loadGuidesFailure({error})))\n      ))\n  ));\n\n  approveGuide$ = createEffect(() => this.actions$.pipe(\n    ofType(guideActions.updateGuide),\n    exhaustMap(action => this.guidesService.updateGuideStatus(action.id, action.status)\n      .pipe(\n        map(response => {\n          console.log('effect response : ', response);\n          this.toaster.success(response.msg);\n          return guideActions.updateGuideSuccess();\n        }),\n        catchError(error => {\n          console.log('error effect : ', error);\n          return of(guideActions.updateGuideFailure({error}));\n        })\n      ))\n  ));\n\n  redirectAfterUpdateGuide$ = createEffect(() => this.actions$.pipe(\n    ofType(guideActions.updateGuideSuccess),\n    tap(() => this.router.navigate(['guides']))\n  ), { dispatch: false });\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Guide } from '../model/guide.model';\nimport * as GuideActions from './guide.actions';\nimport {GuideDetails} from '../model/guide-details';\n\nexport const guidesFeatureKey = 'guides';\n\nexport interface GuideState extends EntityState<Guide> {\n  // additional entities state properties\n  Data: Guide[];\n  guide: GuideDetails;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Guide> = createEntityAdapter<Guide>();\n\nexport const initialState: GuideState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  guide: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(GuideActions.loadGuidesSuccess,\n    (state, action) => adapter.setAll(action.Data, state)\n  ),\n  on(GuideActions.loadGuidesFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(GuideActions.loadGuideSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        guide: action.guide\n      };\n    }\n  ),\n  on(GuideActions.loadGuideFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(GuideActions.addGuide,\n    (state, action) => adapter.addOne(action.guide, state)\n  ),\n  on(GuideActions.upsertGuide,\n    (state, action) => adapter.upsertOne(action.guide, state)\n  ),\n  on(GuideActions.addGuides,\n    (state, action) => adapter.addMany(action.guides, state)\n  ),\n  on(GuideActions.upsertGuides,\n    (state, action) => adapter.upsertMany(action.guides, state)\n  ),\n  on(GuideActions.updateGuides,\n    (state, action) => adapter.updateMany(action.guides, state)\n  ),\n  on(GuideActions.deleteGuide,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n  on(GuideActions.deleteGuides,\n    (state, action) => adapter.removeMany(action.ids, state)\n  ),\n  on(GuideActions.clearGuides,\n    state => adapter.removeAll(state)\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {guidesFeatureKey, GuideState, selectAll} from './guide.reducer';\r\n\r\nconst guideFeatureState = createFeatureSelector(guidesFeatureKey);\r\n\r\nexport const getAllGuidesSelector = createSelector(guideFeatureState, selectAll);\r\n\r\nexport const getGuideSelector = createSelector(guideFeatureState, (state: GuideState) => state.guide);\r\n"]}