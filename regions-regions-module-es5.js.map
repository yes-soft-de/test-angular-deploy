{"version":3,"sources":["webpack:///src/app/pages/regions/components/add-region/add-region.component.ts","webpack:///src/app/pages/regions/components/add-region/add-region.component.html","webpack:///src/app/pages/regions/components/all-regions/all-regions.component.ts","webpack:///src/app/pages/regions/components/all-regions/all-regions.component.html","webpack:///src/app/pages/regions/components/edit-region/edit-region.component.ts","webpack:///src/app/pages/regions/components/edit-region/edit-region.component.html","webpack:///src/app/pages/regions/regions-routing.module.ts","webpack:///src/app/pages/regions/regions.module.ts","webpack:///src/app/pages/regions/services/regions.service.ts","webpack:///src/app/pages/regions/store/region.actions.ts","webpack:///src/app/pages/regions/store/region.effects.ts","webpack:///src/app/pages/regions/store/region.reducer.ts","webpack:///src/app/pages/regions/store/region.selector.ts"],"names":["AddRegionComponent","store","toaster","mapsAPILoader","ngZone","router","activatedRoute","title","isSubmited","uploadButtonValue","coverUploadButtonValue","imageName","fileSelected","fileUploaded","imagePathReady","submitButtonValue","addRegionForm","name","description","location","path","placeId","load","then","setCurrentLocation","geoCoder","google","maps","Geocoder","autocomplete","places","Autocomplete","searchElementRef","nativeElement","addListener","run","place","getPlace","geometry","undefined","latitude","lat","longitude","lng","zoom","imageInput","file","files","console","log","reader","FileReader","addEventListener","event","selectedFile","target","result","readAsDataURL","valid","error","formObject","getRawValue","dispatch","region","navigator","geolocation","getCurrentPosition","position","coords","getAddress","geocode","results","status","address","formatted_address","window","alert","onSubmit","$event","preventDefault","selector","templateUrl","styleUrls","AllRegionsComponent","http","regionsList","get","subscribe","data","getAllRegions","regionsSubscription","select","regions","config","itemsPerPage","currentPage","totalItems","length","regionId","confirm","isDeleted","id","setTimeout","filter","res","toLocaleLowerCase","match","unsubscribe","EditRegionComponent","formBuilder","regionService","editRegionForm","createRegion","routes","component","RegionsRoutingModule","forChild","imports","exports","RegionsModule","forFeature","declarations","RegionsService","httpClient","tokenService","regionsAPI","regionAPI","post","JSON","stringify","put","providedIn","loadRegions","loadRegionsSuccess","loadRegionsFailure","loadRegion","loadRegionSuccess","loadRegionFailure","deleteRegion","deleteRegionSuccess","deleteRegionFailure","addRegion","addRegionSuccess","addRegionFailure","upsertRegion","addRegions","upsertRegions","updateRegion","updateRegions","deleteRegions","clearRegions","RegionEffects","actions$","loadRegions$","pipe","response","msg","loadRegion$","action","addRegion$","success","redirectAddRegion$","navigate","relativeTo","deleteRegion$","regionsFeatureKey","adapter","initialState","getInitialState","Data","regionDetails","reducer","state","setAll","addMany","removeOne","addOne","upsertOne","upsertMany","updateOne","updateMany","removeMany","ids","removeAll","getSelectors","selectIds","selectEntities","selectAll","selectTotal","regionsFeatureState","getAllRegionsSelector"],"mappings":"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","file":"regions-regions-module-es5.js","sourcesContent":["import { MapsAPILoader } from '@agm/core';\nimport { Component, ElementRef, NgZone, OnInit, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { RegionsService } from '../../services/regions.service';\nimport { addRegion, deleteRegion } from '../../store/region.actions';\nimport { RegionState } from '../../store/region.reducer';\n\n@Component({\n  selector: 'app-add-region',\n  templateUrl: './add-region.component.html',\n  styleUrls: ['./add-region.component.scss']\n})\nexport class AddRegionComponent implements OnInit {\n  title: string = 'AGM project';\n  latitude: number;\n  longitude: number;\n  zoom: number;\n  address: string;\n  private geoCoder;\n  \n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  isSubmited = false;\n  addRegionForm: FormGroup;\n  uploadButtonValue = 'Upload';\n  coverUploadButtonValue = 'Upload';\n  imageName = 'Select Image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n\n  constructor(private store: Store<RegionState>,\n              private toaster: ToastrService,\n              private mapsAPILoader: MapsAPILoader,\n              private ngZone: NgZone,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    // Fetch Form Data\n    this.addRegionForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n      location: new FormControl(''),\n      path: new FormControl(''),\n      placeId: new FormControl(''),\n    });\n\n    this.mapsAPILoader.load().then(() => {\n      this.setCurrentLocation();\n      this.geoCoder = new google.maps.Geocoder;\n  \n      let autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement);\n      autocomplete.addListener(\"place_changed\", () => {\n        this.ngZone.run(() => {\n          let place: google.maps.places.PlaceResult = autocomplete.getPlace();\n  \n          if (place.geometry === undefined || place.geometry === null) {\n            return;\n          }\n  \n          this.latitude = place.geometry.location.lat();\n          this.longitude = place.geometry.location.lng();\n          this.zoom = 12;\n        });\n      });\n    });\n\n  }\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'Upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'Uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      // this.categoryService.uploadImage(this.selectedFile.file).subscribe(\n      //   (res) => {\n      //     console.log(res);\n      //     this.imageUrl = res;\n      //     this.uploadButtonValue = 'Uploaded';\n      //     this.imagePathReady = true;\n      //     this.submitButtonValue = 'New Category';\n      //   },\n      //   (err) => {\n      //     console.log(err);\n      //   });\n    });\n    reader.readAsDataURL(file);\n  }\n\n\n\n  onSubmit() {\n    this.isSubmited = true;\n    if (!this.addRegionForm.valid) {\n      this.toaster.error('Error : Form Not Valid');\n      this.isSubmited = false;\n      return false;\n    }\n    // Fetch All Form Data On Json Type\n    const formObject = this.addRegionForm.getRawValue();\n    this.store.dispatch(addRegion({region: formObject}));    \n  }\n\n\n  private setCurrentLocation() {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        this.latitude = position.coords.latitude;\n        this.longitude = position.coords.longitude;\n        this.zoom = 8;\n        this.getAddress(this.latitude, this.longitude);\n      });\n    }\n  }\n  \n  getAddress(latitude, longitude) {\n    this.geoCoder.geocode({ 'location': { lat: latitude, lng: longitude } }, (results, status) => {\n      if (status === 'OK') {\n        if (results[0]) {\n          this.zoom = 12;\n          this.address = results[0].formatted_address;\n        } else {\n          window.alert('No results found');\n        }\n      } else {\n        window.alert('Geocoder failed due to: ' + status);\n      }\n  \n    });\n  }\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\">\n    <div class=\"content-header\">\n        <h1 class=\"text-center my-5\">{{'create-region-page' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header bg-sidebar-item-button text-white\">\n            <h3 class=\"card-title mb-0\">{{'new-region' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"addRegionForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('name').errors &&\n                           (addRegionForm.get('name').touched || addRegionForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('name').errors?.required\">{{'name-field-required' | translate}}</span>                      \n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">{{'location' | translate}}</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('location').errors &&\n                           (addRegionForm.get('location').touched || addRegionForm.get('location').dirty)}\"\n                           name=\"location\"\n                           formControlName=\"location\"\n                           id=\"exampleInputlocation1\"\n                           class=\"form-control\"\n                           placeholder=\"{{'location-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('location').errors?.required\">location Field Is Required</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('location').errors?.location\">Please enter a vaild location address</span>\n                </div>\n                \n                <div class=\"form-group\">\n                    <label for=\"exampleInputplaceId1\">PlaceId</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('placeId').errors &&\n                           (addRegionForm.get('placeId').touched || addRegionForm.get('placeId').dirty)}\"\n                           name=\"placeId\"\n                           formControlName=\"placeId\"\n                           id=\"exampleInputplaceId1\"\n                           class=\"form-control\"\n                           placeholder=\"Type The Location Id\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('placeId').errors?.required\">Location Id Field Is Required</span>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\" \n                           [ngClass]=\"{'is-invalid': addRegionForm.get('description').errors &&\n                           (addRegionForm.get('description').touched || addRegionForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\" \n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('description').errors?.required\">{{'descriptioon-field-required' | translate}}</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('description').errors?.minlength\">description Must Be Greater Than 3</span>       \n                </div>\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"addRegionForm.invalid || isSubmited\">{{'create' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>\n<div class=\"container\">\n   \n    <h1>Angular Google Map with Search Box Example - ItSolutionStuff.com</h1>\n    \n    <div class=\"form-group\">\n      <label>Enter address</label>\n      <input type=\"text\" class=\"form-control\" (keydown.enter)=\"$event.preventDefault()\" placeholder=\"Search Nearest Location\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"off\" type=\"text\" #search>\n    </div>\n    \n    <agm-map [latitude]=\"latitude\" [longitude]=\"longitude\" [zoom]=\"zoom\">\n      <agm-marker [latitude]=\"latitude\" [longitude]=\"longitude\" [markerDraggable]=\"true\"\n        ></agm-marker>\n    </agm-map>\n    \n    <h5>Address: {{address}}</h5>\n    <div>Latitude: {{latitude}}</div>\n    <div>Longitude: {{longitude}}</div>\n    \n  </div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, Subscription } from 'rxjs';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { Region } from '../../model/region.model';\nimport * as regionsAction from '../../store/region.actions';\nimport { RegionState } from '../../store/region.reducer';\nimport { getAllRegionsSelector } from '../../store/region.selector';\nimport { HttpClient } from '@angular/common/http';\n\n@Component({\n  selector: 'app-all-regions',\n  templateUrl: './all-regions.component.html',\n  styleUrls: ['./all-regions.component.scss']\n})\nexport class AllRegionsComponent implements OnInit, OnDestroy {\n  regions: Region[];\n  regionsList: Region[] = [];\n  name: any;\n  config: any;\n  isDeleted: boolean;\n  regionsSubscription: Subscription;\n\n  constructor(private store: Store<RegionState>, private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.http.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=24.666626,46.7370781&rankby=distance&key=AIzaSyDwb8pKJI4CyMCgFuNtUo3zxVS7y5PN97I').subscribe(\n      data => console.log(data)\n    );\n    this.store.dispatch(regionsAction.loadRegions());\n    this.getAllRegions();\n  }\n\n  getAllRegions() {\n    this.regionsSubscription = this.store.select(getAllRegionsSelector).subscribe(\n      data => {\n        console.log(data);\n        this.regions = data;\n        this.regionsList = data;\n      }\n    );\n    this.config = {\n      itemsPerPage: 5,\n      currentPage: 1,\n      totalItems: this.regionsList.length\n    };\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  delete(regionId: number) {\n    if (confirm('Are You Sure You Want To Delete This Region')) {\n      this.isDeleted = true;\n      this.store.dispatch(regionsAction.deleteRegion({id: regionId}));\n      // this.toaster.success('Region Successfully Deleted');\n      setTimeout(() => { this.isDeleted = false; }, 1000);\n    } else {\n      return false;\n    }\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.regionsList = [...this.regions];\n    } else {\n      this.regionsList = [];\n      this.regionsList = this.regions.filter(res => {\n        if (res.name) {\n          const name = res.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (name) {\n            // display the Name Column\n            return name;\n          }\n        }\n      });\n    }\n  }\n\n\n  ngOnDestroy() {\n    this.regionsSubscription.unsubscribe();\n  }\n\n\n}\n","<div *ngIf=\"regions.length != 0\">\n    <!-- <div *ngIf=\"regionsList.length !== 0\"> -->\n      <!-- <div class=\"container-fluid\"> -->\n        <h1 class=\"text-center details-title my-4\">{{'manage-regions-page' | translate}}</h1>\n          <div class=\"row\">\n              <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n                  <div class=\"form-group mb-4\">\n                      <input\n                        id=\"exampleFormControlInput2\"\n                        [(ngModel)]=\"name\"\n                        (keyup)=\"applyFilter()\"\n                        type=\"text\"\n                        placeholder=\"{{'region-search-input' | translate}}\"\n                        title=\"{{'region-search-input' | translate}}\"\n                        class=\"form-control form-control-underlined border-primary search-input\">\n                  </div>\n              </div>\n              <!-- <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n                <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/regions/add\">\n                  <i class=\"fa fa-plus\"></i>\n                  {{'new-region' | translate}}\n                </a>\n              </div> -->\n          </div>\n        <div class=\"table-responsive text-center\">\n            <table class=\"table table-bordered main-table\">\n                <tr class=\"bg-dark text-white\">\n                    <td>{{'image' | translate}}</td>\n                    <td>{{'name' | translate}}</td>\n                    <td>{{'description' | translate}}</td>\n                    <td>{{'location' | translate}}</td>\n                    <td>{{'comment-number' | translate}}</td>\n                    <td>{{'rating-average' | translate}}</td>\n                    <td>{{'control' | translate}}</td>\n                </tr>\n                <tr *ngFor=\"let region of regionsList | paginate: config\">\n                  <td><img src=\"{{region?.path[0].path}}\" alt=\"{{region.name}} Image\" class=\"img-thumbnail img-custom\"></td>\n                  <td>{{region.name ? region.name : '-'}}</td>\n                  <td class=\"td-custom\">{{region.description ? region.description : '-'}}</td>\n                  <td>{{region.location ? region.location : '-'}}</td>\n                  <td>{{region.commentNumber ? region.commentNumber : '-'}}</td>\n                  <td>{{region.ratingAverage ? region.ratingAverage : '-'}}</td>\n                  <!-- <td>\n                    <a (click)=\"suggest(car.id, (car.suggest ? false : true))\"\n                       class=\"text-primary mr-1 mb-1\"\n                       title=\"Change To {{car.suggest ? 'Not Recommended' : 'Recommended' }}\"\n\n                       style=\"cursor: pointer; {{ suggestProgress ? 'pointer-events: none;' : '' }}\">\n                      {{ car.suggest ? 'Recommended' : 'Not Recommended' }}\n                    </a>\n                  </td> -->\n                  <td>\n                      <a routerLink=\"/regions/{{region?.id}}\" class=\"btn btn-success btn-sm mr-1 mb-1\">\n                        {{'update' | translate}}\n                    </a>\n                    <a (click)=\"delete(region?.id)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1 {{isDeleted ? 'disabled' : ''}}\">\n                        {{'delete' | translate}}\n                      </a>\n                  </td>\n                </tr>\n            </table>\n            <pagination-controls class=\"my-pagination\"\n                                 (pageChange)=\"pageChanged($event)\"\n                                 autoHide=\"true\"\n                                 maxSize=\"5\"\n                                 responsive=\"true\"\n                                 previousLabel=\"{{'prev' | translate}}\"\n                                 nextLabel=\"{{'next' | translate}}\"\n                                 screenReaderPaginationLabel=\"Pagination\"\n                                 screenReaderPageLabel=\"page\"\n                                 screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n            </pagination-controls>\n        </div>\n      <!-- </div> -->\n    <!-- </div> -->\n    <!-- <div *ngIf=\"regionsList.length === 0\">\n        <div class=\"container\">\n            <div class=\"alert alert-primary text-center mt-5\">{{'region-not-found' | translate}}</div>\n            <a routerLink=\"/cars/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n                <i class=\"fa fa-plus\"></i>\n                {{'add-new-car' | translate}}\n            </a>\n        </div>\n    </div> -->\n</div>\n<div *ngIf=\"regions.length == 0\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { RegionsService } from '../../services/regions.service';\n\n@Component({\n  selector: 'app-edit-region',\n  templateUrl: './edit-region.component.html',\n  styleUrls: ['./edit-region.component.scss']\n})\nexport class EditRegionComponent implements OnInit {\n\n  isSubmited = false;\n  editRegionForm: FormGroup;\n  uploadButtonValue = 'Upload';\n  coverUploadButtonValue = 'Upload';\n  imageName = 'Select Image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n\n  constructor(private formBuilder: FormBuilder,\n              private regionService: RegionsService,\n              private toaster: ToastrService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    // Fetch Form Data\n    this.editRegionForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n      location: new FormControl(''),\n      path: new FormControl(''),\n      placeId: new FormControl(''),\n    });\n    // this.initMap();\n  }\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'Upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'Uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      // this.categoryService.uploadImage(this.selectedFile.file).subscribe(\n      //   (res) => {\n      //     console.log(res);\n      //     this.imageUrl = res;\n      //     this.uploadButtonValue = 'Uploaded';\n      //     this.imagePathReady = true;\n      //     this.submitButtonValue = 'New Category';\n      //   },\n      //   (err) => {\n      //     console.log(err);\n      //   });\n    });\n    reader.readAsDataURL(file);\n  }\n\n\n\n  onSubmit() {\n    console.log(this.editRegionForm.getRawValue());\n    this.regionService.createRegion(this.editRegionForm.getRawValue()).subscribe(\n      data => console.log('data : ', data),\n      error => console.log('error : ', error));\n    // this.isSubmitted = true;\n\n    // if (!this.editRegionForm.valid) {\n    //   this.toaster.error('Error : Form Not Valid');\n    //   this.isSubmitted = false;\n    //   return false;\n    // } else {\n    //   // Fetch All Form Data On Json Type\n    //   const formObject = this.editRegionForm.getRawValue();\n    //   formObject.titleShow = formObject.titleShow == 0 ? false : true;\n    //   formObject.createdBy = this.tokenService.userName;\n    //   formObject.image = this.imageUrl;\n    //   formObject.coverImage = this.coverImageUrl;\n    //   this.categoryService.createCategory(formObject).subscribe(\n    //     (createResponse: any) => console.log(createResponse),\n    //     error => {\n    //       this.isSubmitted = false;\n    //       console.log('Error : ', error);\n    //     },\n    //     () => {\n    //       this.isSubmitted = false;\n    //       this.router.navigate(['../'], {relativeTo: this.activatedRoute});\n    //     }\n    //   );\n    // }\n  }\n\n  // This sample uses the Place Autocomplete widget to allow the user to search\n// for and select a place. The sample then displays an info window containing\n// the place ID and other information about the place that the user has\n// selected.\n\n// This example requires the Places library. Include the libraries=places\n// parameter when you first load the API. For example:\n// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n\n  // initMap(): void {\n  //   const map = new google.maps.Map(\n  //     document.getElementById(\"map\") as HTMLElement,\n  //     {\n  //       center: { lat: -33.8688, lng: 151.2195 },\n  //       zoom: 13,\n  //     }\n  //   );\n\n  //   const input = document.getElementById(\"pac-input\") as HTMLInputElement;\n\n  //   const autocomplete = new google.maps.places.Autocomplete(input);\n  //   autocomplete.bindTo(\"bounds\", map);\n\n  //   // Specify just the place data fields that you need.\n  //   autocomplete.setFields([\"place_id\", \"geometry\", \"name\"]);\n\n  //   map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n\n  //   const infowindow = new google.maps.InfoWindow();\n  //   const infowindowContent = document.getElementById(\n  //     \"infowindow-content\"\n  //   ) as HTMLElement;\n  //   infowindow.setContent(infowindowContent);\n\n  //   const marker = new google.maps.Marker({ map: map });\n\n  //   marker.addListener(\"click\", () => {\n  //     infowindow.open(map, marker);\n  //   });\n\n  //   autocomplete.addListener(\"place_changed\", () => {\n  //     infowindow.close();\n\n  //     const place = autocomplete.getPlace();\n\n  //     if (!place.geometry || !place.geometry.location) {\n  //       return;\n  //     }\n\n  //     if (place.geometry.viewport) {\n  //       map.fitBounds(place.geometry.viewport);\n  //     } else {\n  //       map.setCenter(place.geometry.location);\n  //       map.setZoom(17);\n  //     }\n\n  //     // Set the position of the marker using the place ID and location.\n  //     // @ts-ignore This should be in @typings/googlemaps.\n  //     marker.setPlace({\n  //       placeId: place.place_id,\n  //       location: place.geometry.location,\n  //     });\n\n  //     marker.setVisible(true);\n\n  //     (infowindowContent.children.namedItem(\n  //       \"place-name\"\n  //     ) as HTMLElement).textContent = place.name as string;\n  //     (infowindowContent.children.namedItem(\n  //       \"place-id\"\n  //     ) as HTMLElement).textContent = place.place_id as string;\n  //     (infowindowContent.children.namedItem(\n  //       \"place-address\"\n  //     ) as HTMLElement).textContent = place.formatted_address as string;\n  //     infowindow.open(map, marker);\n  //   });\n  // }\n\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\">\n    <div class=\"content-header\">\n        <h1 class=\"text-center my-5\">{{'update-region-page' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header bg-sidebar-item-button text-white\">\n            <h3 class=\"card-title mb-0\">{{'new-region' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"editRegionForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('name').errors &&\n                           (editRegionForm.get('name').touched || editRegionForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('name').errors?.required\">{{'name-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">Location</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('location').errors &&\n                           (editRegionForm.get('location').touched || editRegionForm.get('location').dirty)}\"\n                           name=\"location\"\n                           formControlName=\"location\"\n                           id=\"exampleInputlocation1\"\n                           class=\"form-control\"\n                           placeholder=\"Type The location\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('location').errors?.required\">location Field Is Required</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('location').errors?.location\">Please enter a vaild location address</span>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('description').errors &&\n                           (editRegionForm.get('description').touched || editRegionForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('description').errors?.required\">{{'descriptioon-field-required' | translate}}</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('description').errors?.minlength\">description Must Be Greater Than 3</span>\n                </div>\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"editRegionForm.invalid || isSubmited\">Submit</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>\n\n<div style=\"display: none\">\n  <input\n    id=\"pac-input\"\n    class=\"controls\"\n    type=\"text\"\n    placeholder=\"Enter a location\"\n  />\n</div>\n<div id=\"map\"></div>\n<div id=\"infowindow-content\">\n  <span id=\"place-name\" class=\"title\"></span><br />\n  <strong>Place ID:</strong> <span id=\"place-id\"></span><br />\n  <span id=\"place-address\"></span>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddRegionComponent } from './components/add-region/add-region.component';\nimport { AllRegionsComponent } from './components/all-regions/all-regions.component';\nimport { EditRegionComponent } from './components/edit-region/edit-region.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AllRegionsComponent },\n  { path: 'add', component: AddRegionComponent },\n  { path: ':id', component: EditRegionComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegionsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegionsRoutingModule } from './regions-routing.module';\nimport { AllRegionsComponent } from './components/all-regions/all-regions.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromRegion from './store/region.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { RegionEffects } from './store/region.effects';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\nimport { AddRegionComponent } from './components/add-region/add-region.component';\nimport { EditRegionComponent } from './components/edit-region/edit-region.component';\nimport { AgmCoreModule } from '@agm/core';\nimport { environment } from 'src/environments/environment';\n\n\n@NgModule({\n  declarations: [\n    AllRegionsComponent,\n    AddRegionComponent,\n    EditRegionComponent\n  ],\n  imports: [\n    ThemeModule,\n    RegionsRoutingModule,\n    StoreModule.forFeature(fromRegion.regionsFeatureKey, fromRegion.reducer),\n    EffectsModule.forFeature([RegionEffects]),\n    AgmCoreModule\n    // AgmCoreModule.forRoot({\n    //   apiKey: 'AIzaSyDwb8pKJI4CyMCgFuNtUo3zxVS7y5PN97I',\n    //   libraries: ['places']\n    // })\n  ]\n})\nexport class RegionsModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\nimport { AdminConfig } from '../../AdminConfig';\nimport { RegionDetailsResponse } from '../model/region-details.response';\nimport { RegionsResponse } from '../model/region-response.model';\nimport { Region } from '../model/region.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegionsService {\n\n  constructor(private httpClient: HttpClient,\n              private tokenService: TokenService) { }\n\n  // All Regions\n  getAllRegions(): Observable<RegionsResponse> {\n    return this.httpClient.get<RegionsResponse>(AdminConfig.regionsAPI);\n  }\n\n  // Get Region Details\n  getRegion(regionId: number): Observable<RegionDetailsResponse> {\n    return this.httpClient.delete<RegionDetailsResponse>(`${AdminConfig.regionAPI}/${regionId}`);\n  }\n\n  // Create New Regions\n  createRegion(data): Observable<Region> {\n    return this.httpClient.post<Region>(\n      AdminConfig.regionAPI,\n      JSON.stringify(data)\n    );\n  }\n\n  // Update Exists Region\n  updateRegion(regionId: number, data): Observable<Region> {\n    return this.httpClient.put<Region>(\n      `${AdminConfig.regionAPI}/${regionId}`,\n      JSON.stringify(data)\n    );\n  }\n\n  // Delete Region\n  deleteRegion(regionId: number): Observable<any> {\n    return this.httpClient.delete<any>(\n      `${AdminConfig.regionAPI}/${regionId}`\n    );\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Region } from '../model/region.model';\n\nexport const loadRegions = createAction('[Region/API] Load Regions');\n\nexport const loadRegionsSuccess = createAction(\n  '[Region/API] Load Regions Success', \n  props<{ Data: Region[] }>()\n);\n\nexport const loadRegionsFailure = createAction(\n  '[Region/API] Load Regions Failure', \n  props<{ error: string }>()\n);\n\nexport const loadRegion = createAction(\n  '[Region/API] Load Region',\n  props<{ id: number }>()\n);\n\nexport const loadRegionSuccess = createAction(\n  '[Region/API] Load Region Success', \n  props<{ region: Region }>()\n);\n\nexport const loadRegionFailure = createAction(\n  '[Region/API] Load Region Failure', \n  props<{ error: string }>()\n);\n\nexport const deleteRegion = createAction(\n  '[Region/API] Delete Region',\n  props<{ id: number }>()\n);\n\nexport const deleteRegionSuccess = createAction(\n  '[Region/API] Delete Region Success'\n);\n\n\nexport const deleteRegionFailure = createAction(\n  '[Region/API] Delete Region Failure',\n  props<{ error: string }>()\n);\n\nexport const addRegion = createAction(\n  '[Region/API] Add Region',\n  props<{ region: Region }>()\n);\n\nexport const addRegionSuccess = createAction(\n  '[Region/API] Add Region Success'\n);\n\nexport const addRegionFailure = createAction(\n  '[Region/API] Add Region Failure',\n  props<{ error: string }>()\n);\n\nexport const upsertRegion = createAction(\n  '[Region/API] Upsert Region',\n  props<{ region: Region }>()\n);\n\nexport const addRegions = createAction(\n  '[Region/API] Add Regions',\n  props<{ regions: Region[] }>()\n);\n\nexport const upsertRegions = createAction(\n  '[Region/API] Upsert Regions',\n  props<{ regions: Region[] }>()\n);\n\nexport const updateRegion = createAction(\n  '[Region/API] Update Region',\n  props<{ region: Update<Region> }>()\n);\n\nexport const updateRegions = createAction(\n  '[Region/API] Update Regions',\n  props<{ regions: Update<Region>[] }>()\n);\n\nexport const deleteRegions = createAction(\n  '[Region/API] Delete Regions',\n  props<{ ids: string[] }>()\n);\n\nexport const clearRegions = createAction(\n  '[Region/API] Clear Regions'\n);\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap } from 'rxjs/operators';\nimport { AppState } from 'src/app/@theme/store/app-state';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { RegionsService } from '../services/regions.service';\nimport * as regionsAction from '../store/region.actions';\n\n\n\n@Injectable()\nexport class RegionEffects {\n\n  constructor(private actions$: Actions,\n              private store: Store<AppState>,\n              private toaster: ToastrService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private regionService: RegionsService) {}\n\n  loadRegions$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.loadRegions),\n    mergeMap(() => this.regionService.getAllRegions()\n      .pipe(\n        map(response => {\n          // this.store.dispatch(setLoadSpinner({status: false}));\n          return regionsAction.loadRegionsSuccess(response)\n        }\n        ),\n        catchError(error => {\n          console.log('error effect: ', error);\n          if (error.error.error) {\n            this.toaster.error(error.error.error);\n          } else if (error.error.msg) {\n            this.toaster.error(error.error.msg);\n          }\n          return of(regionsAction.loadRegionsFailure(error));\n        })\n      ))\n  ));\n\n  loadRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.loadRegion),\n    mergeMap(action => this.regionService.createRegion(action.id)\n      .pipe(\n        map(response => regionsAction.loadRegionSuccess({region: response})),\n        catchError(error => {\n          console.log('error effect', error);\n          return of(regionsAction.loadRegionFailure({error}))\n        })\n      ))\n  ));\n\n  addRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.addRegion),\n    exhaustMap(action => this.regionService.createRegion(action.region)\n      .pipe(\n        map((response: any) => {\n          console.log('create effect reseponse :', response);\n          this.toaster.success(response?.msg);\n          return regionsAction.addRegionSuccess();\n        }),\n        catchError(error => {\n          console.log('error create effect', error);\n          return of(regionsAction.addRegionFailure({error}))\n        })\n      ))\n  ));\n\n  redirectAddRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.addRegionSuccess),\n    map(response => {\n      this.router.navigate(['../'], {relativeTo: this.activatedRoute});\n    })\n  ), { dispatch: false });\n\n  deleteRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.deleteRegion),\n    exhaustMap(action => this.regionService.deleteRegion(action.id)\n      .pipe(\n        map(response => {\n          console.log(response);          \n          this.toaster.success('Region Successfully Deleted');\n          return regionsAction.deleteRegionSuccess()}),\n        catchError(error => {\n          console.log('effect delete error', error);\n          return of(regionsAction.deleteRegionFailure({error}));\n        }))\n      ))\n  );\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Region } from '../model/region.model';\nimport * as RegionActions from './region.actions';\n\nexport const regionsFeatureKey = 'regions';\n\nexport interface RegionState extends EntityState<Region> {\n  // additional entities state properties\n  Data: Region[];\n  regionDetails: Region;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Region> = createEntityAdapter<Region>();\n\nexport const initialState: RegionState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  regionDetails: undefined,\n  error: undefined,\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(RegionActions.loadRegionsSuccess,\n    (state, action) => adapter.setAll(action.Data, state)\n  ),\n  on(RegionActions.loadRegionSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        regionDetails: action.region\n      }\n    }),\n  on(RegionActions.addRegions,\n    (state, action) => adapter.addMany(action.regions, state)\n  ),\n  on(RegionActions.deleteRegion,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n  on(RegionActions.addRegion,\n    (state, action) => adapter.addOne(action.region, state)\n  ),\n  on(RegionActions.upsertRegion,\n    (state, action) => adapter.upsertOne(action.region, state)\n  ),\n  on(RegionActions.addRegions,\n    (state, action) => adapter.addMany(action.regions, state)\n  ),\n  on(RegionActions.upsertRegions,\n    (state, action) => adapter.upsertMany(action.regions, state)\n  ),\n  on(RegionActions.updateRegion,\n    (state, action) => adapter.updateOne(action.region, state)\n  ),\n  on(RegionActions.updateRegions,\n    (state, action) => adapter.updateMany(action.regions, state)\n  ),\n  on(RegionActions.deleteRegions,\n    (state, action) => adapter.removeMany(action.ids, state)\n  ),\n  on(RegionActions.clearRegions,\n    state => adapter.removeAll(state)\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { regionsFeatureKey, RegionState, selectAll } from \"./region.reducer\";\r\n\r\nconst regionsFeatureState = createFeatureSelector<RegionState>(regionsFeatureKey);\r\n\r\nexport const getAllRegionsSelector = createSelector(regionsFeatureState, selectAll);"]}