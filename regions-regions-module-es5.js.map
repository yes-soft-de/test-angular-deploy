{"version":3,"sources":["webpack:///src/app/pages/regions/components/add-region/add-region.component.ts","webpack:///src/app/pages/regions/components/add-region/add-region.component.html","webpack:///src/app/pages/regions/components/all-regions/all-regions.component.ts","webpack:///src/app/pages/regions/components/all-regions/all-regions.component.html","webpack:///src/app/pages/regions/components/edit-region/edit-region.component.ts","webpack:///src/app/pages/regions/components/edit-region/edit-region.component.html","webpack:///src/app/pages/regions/regions-routing.module.ts","webpack:///src/app/pages/regions/regions.module.ts","webpack:///src/app/pages/regions/services/regions.service.ts","webpack:///src/app/pages/regions/store/region.actions.ts","webpack:///src/app/pages/regions/store/region.effects.ts","webpack:///src/app/pages/regions/store/region.reducer.ts","webpack:///src/app/pages/regions/store/region.selector.ts"],"names":["AddRegionComponent","store","toaster","regionService","translate","router","render","document","title","isSubmited","uploadButtonValue","coverUploadButtonValue","imageName","fileSelected","fileUploaded","imagePathReady","imageUploaded","submitButtonValue","showSearchResult","events","subscribe","route","urlAfterRedirects","checkCurrentLang","addRegionForm","name","description","location","placeId","required","path","checkLangChange","getGoogleMapToken","token","googleMapToken","Data","event","value","target","trim","searchLocationAutoComplete","data","googleLocationsNameList","predictions","error","get","structured_formatting","main_text_matched_substrings","length","place_id","imageInput","file","files","console","log","reader","FileReader","addEventListener","selectedFile","result","uploadImage","res","imageUrl","err","readAsDataURL","timer","runTwoTime","setInterval","currentLang","removeClass","querySelector","addClass","clearInterval","onLangChange","lang","valid","formObject","getRawValue","dispatch","region","onSubmit","searchLocation","updateName","processFile","selector","templateUrl","styleUrls","Document","AllRegionsComponent","regionsList","getAllRegions","regionsSubscription","select","regions","config","itemsPerPage","currentPage","totalItems","regionId","confirm","isDeleted","id","setTimeout","filter","toLocaleLowerCase","match","unsubscribe","EditRegionComponent","activatedRoute","paramMap","params","editRegionForm","getRegion","regionData","fillForms","regionImage","pathURL","routes","component","RegionsRoutingModule","forChild","imports","exports","RegionsModule","forFeature","declarations","RegionsService","httpClient","tokenService","regionsAPI","regionAPI","post","JSON","stringify","put","updateRegionAPI","googleMapTokenAPI","placeID","placeDetailsURL","googleMapPlaceDetailsAPI","searchQuery","googleMapSearchAPI","text$","pipe","searchTerm","search","image","formData","FormData","append","generalUploadAPI","providedIn","loadRegions","loadRegionsSuccess","loadRegionsFailure","loadRegion","loadRegionSuccess","loadRegionFailure","deleteRegion","deleteRegionSuccess","deleteRegionFailure","addRegion","addRegionSuccess","addRegionFailure","upsertRegion","addRegions","updateRegion","updateRegionSuccess","updateRegionFailure","updateRegions","deleteRegions","upsertRegions","clearRegions","RegionEffects","actions$","loadRegions$","response","msg","loadRegion$","action","addRegion$","createRegion","success","updateRegion$","regionUpdate","changes","redirectAddUpdateRegion$","navigate","deleteRegion$","regionsFeatureKey","adapter","initialState","getInitialState","undefined","regionDetails","reducer","state","setAll","addMany","removeOne","addOne","upsertOne","upsertMany","updateOne","updateMany","removeMany","ids","removeAll","getSelectors","selectIds","selectEntities","selectAll","selectTotal","regionsFeatureState","getAllRegionsSelector","getRegionSelector"],"mappings":"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","file":"regions-regions-module-es5.js","sourcesContent":["import { MapsAPILoader } from '@agm/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Component, ElementRef, Inject, NgZone, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, ActivationEnd, NavigationEnd, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { GoogleMap } from '../../model/google-map';\nimport { RegionsService } from '../../services/regions.service';\nimport { addRegion, deleteRegion } from '../../store/region.actions';\nimport { RegionState } from '../../store/region.reducer';\n\n@Component({\n  selector: 'app-add-region',\n  templateUrl: './add-region.component.html',\n  styleUrls: ['./add-region.component.scss']\n})\nexport class AddRegionComponent implements OnInit {\n  title: string = 'AGM project';\n  latitude: number;\n  longitude: number;\n  zoom: number;\n  address: string;\n  private geoCoder;\n  \n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  isSubmited = false;\n  addRegionForm: FormGroup;\n  uploadButtonValue = 'upload';\n  coverUploadButtonValue = 'upload';\n  imageName = 'select-image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  imageUploaded = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n  private googleMapToken: string;\n  showSearchResult = false;\n  googleLocationsNameList: GoogleMap[];\n\n  constructor(private store: Store<RegionState>,\n              private toaster: ToastrService,\n              private regionService: RegionsService,\n              public translate: TranslateService,\n              private router: Router,\n              private render: Renderer2,\n              @Inject(DOCUMENT) private document: Document\n              // private mapsAPILoader: MapsAPILoader,\n              // private ngZone: NgZone,\n              // private router: Router,\n              // private activatedRoute: ActivatedRoute\n              ) {\n  }\n\n  ngOnInit() {\n    this.router.events.subscribe(route => {\n      if (route instanceof NavigationEnd && route.urlAfterRedirects == '/regions/add') {\n        this.checkCurrentLang();\n      }\n    });\n    // Fetch Form Data\n    this.addRegionForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n      location: new FormControl(''),\n      placeId: new FormControl('', Validators.required),\n      path: new FormControl(''),\n    });\n\n    this.checkLangChange();    \n    this.getGoogleMapToken();\n  }\n\n  // Get Google Map Token\n  getGoogleMapToken() {\n    this.regionService.getGoogleMapToken().subscribe(token => this.googleMapToken = token.Data);\n  }\n\n  // Region Search Depending On The Place Name \n  searchLocation(event) {    \n    if (this.googleMapToken) {\n      this.showSearchResult = true;\n      const value = of((event.target.value).trim());\n      this.regionService.searchLocationAutoComplete(value, this.googleMapToken).subscribe(\n        data => {\n          if (data) {\n            this.googleLocationsNameList = data.predictions;\n          }\n        });    \n      if (event.target.value == '') {\n        this.showSearchResult = false;\n      }\n    } else {\n      this.toaster.error('Error Google Map Searching, Please Try Later');\n    }\n  }\n\n  // Fill Form Inputs With Google Search Result\n  getLocationInfo(location: GoogleMap) {\n    const description = this.addRegionForm.get('description').value;\n    if (location) {\n      this.showSearchResult = false;\n      this.addRegionForm = new FormGroup({\n        name: new FormControl(location?.description),\n        description: new FormControl(description),  \n        location: new FormControl(location?.structured_formatting?.main_text_matched_substrings?.length),\n        placeId: new FormControl(location?.place_id),\n        path: new FormControl(''),  \n      });\n    }\n  }\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'Upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.imageUploaded = true;\n    this.uploadButtonValue = 'Uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.regionService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.imageUploaded = false;\n          this.submitButtonValue = 'new-region';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.imageUploaded = false;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n  checkCurrentLang() {\n    let timer = 0;\n    const runTwoTime = setInterval(() => {\n      timer++;\n      if (this.translate.currentLang == 'ar') {\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      } else {\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      }\n      if (timer == 2) { clearInterval(runTwoTime); }\n    }, 200);\n    \n  }\n\n  checkLangChange() {    \n    this.translate.onLangChange.subscribe(lang => {\n      if (lang?.lang == 'ar') {\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      } else {\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      }\n    });\n  }\n\n  onSubmit() {\n    if (!this.addRegionForm.valid) {\n      this.toaster.error('Error : Form Not Valid');\n      this.isSubmited = false;\n      return false;\n    }\n    // Fetch All Form Data On Json Type\n    const formObject = this.addRegionForm.getRawValue();  \n    formObject.path = this.imageUrl;\n    console.log(formObject);\n    this.store.dispatch(addRegion({region: formObject}));    \n  }\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\">\n    <div class=\"content-header\">\n        <h1 class=\"text-center my-5\">{{'create-region-page' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header bg-sidebar-item-button text-white\">\n            <h3 class=\"card-title mb-0\">{{'new-region' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"addRegionForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('name').errors &&\n                           (addRegionForm.get('name').touched || addRegionForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           formControlName=\"name\"\n                           id=\"inputNameSuccess\"\n                           (keydown)=\"searchLocation($event)\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\" autocomplete=\"off\">\n                    <div class=\"location-search-result px-3 py-2\" *ngIf=\"showSearchResult\">\n                        <ul class=\"list-unstyled mb-0\" *ngIf=\"googleLocationsNameList\">\n                            <li class=\"pb-1\" *ngFor=\"let location of googleLocationsNameList\" (click)=\"getLocationInfo(location)\">{{location?.description}}</li>\n                        </ul>\n                        <div *ngIf=\"!googleLocationsNameList\" class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>                        \n                    </div>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('name').errors?.required\">{{'name-field-required' | translate}}</span>                      \n                </div>\n                <!-- <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">{{'location' | translate}}</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('location').errors &&\n                           (addRegionForm.get('location').touched || addRegionForm.get('location').dirty)}\"\n                           name=\"location\"\n                           formControlName=\"location\" \n                           id=\"exampleInputlocation1\"\n                           class=\"form-control\"\n                           placeholder=\"{{'location-type-placeholder' | translate}}\">                \n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('location').errors?.required\">location Field Is Required</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('location').errors?.location\">Please enter a vaild location address</span>\n                </div> -->\n                \n                <!-- <div class=\"form-group\">\n                    <label for=\"exampleInputplaceId1\">PlaceId</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('placeId').errors &&\n                           (addRegionForm.get('placeId').touched || addRegionForm.get('placeId').dirty)}\"\n                           name=\"placeId\"\n                           formControlName=\"placeId\"\n                           id=\"exampleInputplaceId1\"\n                           class=\"form-control\"\n                           placeholder=\"Type The Location Id\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('placeId').errors?.required\">Location Id Field Is Required</span>\n                </div> -->\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('description').errors &&\n                           (addRegionForm.get('description').touched || addRegionForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\" \n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('description').errors?.required\">{{'descriptioon-field-required' | translate}}</span>\n                </div>            \n                <div class=\"form-group\">\n                    <label for=\"exampleInputupload\">{{'upload' | translate}}</label>\n                    <div class=\"input-group input-group-custom\">\n                        <div class=\"custom-file\">\n                            <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                                (change)=\"updateName(imageInput)\">\n                            <label class=\"custom-file-label\" for=\"file-input\">{{imageName | translate}}</label>\n                        </div>\n                        <div class=\"input-group-append\">\n                            <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                            {{uploadButtonValue | translate}}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"addRegionForm.invalid || imageUploaded\">{{'create' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, Subscription } from 'rxjs';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { Region } from '../../model/region.model';\nimport * as regionsAction from '../../store/region.actions';\nimport { RegionState } from '../../store/region.reducer';\nimport { getAllRegionsSelector } from '../../store/region.selector';\nimport { HttpClient } from '@angular/common/http';\nimport { RegionsService } from '../../services/regions.service';\n\n@Component({\n  selector: 'app-all-regions',\n  templateUrl: './all-regions.component.html',\n  styleUrls: ['./all-regions.component.scss']\n})\nexport class AllRegionsComponent implements OnInit, OnDestroy {\n  regions: Region[];\n  regionsList: Region[] = [];\n  name: any;\n  config: any;\n  isDeleted: boolean;\n  regionsSubscription: Subscription;\n  googleMapToken: string;\n  // googleLocation\n\n  constructor(private store: Store<RegionState>) { }\n\n  ngOnInit(): void {    \n    this.store.dispatch(regionsAction.loadRegions());\n    this.getAllRegions();\n  }\n\n  getAllRegions() {\n    this.regionsSubscription = this.store.select(getAllRegionsSelector).subscribe(\n      data => {\n        console.log(data);\n        this.regions = data;\n        this.regionsList = data;\n      }\n    );\n    this.config = {\n      itemsPerPage: 5,\n      currentPage: 1,\n      totalItems: this.regionsList.length\n    };\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  delete(regionId: number) {\n    if (confirm('Are You Sure You Want To Delete This Region')) {\n      this.isDeleted = true;\n      this.store.dispatch(regionsAction.deleteRegion({id: regionId}));\n      // this.toaster.success('Region Successfully Deleted');\n      setTimeout(() => { this.isDeleted = false; }, 1000);\n    } else {\n      return false;\n    }\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.regionsList = [...this.regions];\n    } else {\n      this.regionsList = [];\n      this.regionsList = this.regions.filter(res => {\n        if (res.name) {\n          const name = res.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (name) {\n            // display the Name Column\n            return name;\n          }\n        }\n      });\n    }\n  }\n\n\n  ngOnDestroy() {\n    this.regionsSubscription.unsubscribe();\n  }\n\n\n}\n","<div *ngIf=\"regions.length != 0\">\n    <!-- <div *ngIf=\"regionsList.length !== 0\"> -->\n      <!-- <div class=\"container-fluid\"> -->\n        <h1 class=\"text-center details-title my-4\">{{'manage-regions-page' | translate}}</h1>\n          <div class=\"row\">\n              <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n                  <div class=\"form-group mb-4\">\n                      <input\n                        id=\"exampleFormControlInput2\"\n                        [(ngModel)]=\"name\"\n                        (keyup)=\"applyFilter()\"\n                        type=\"text\"\n                        placeholder=\"{{'region-search-input' | translate}}\"\n                        title=\"{{'region-search-input' | translate}}\"\n                        class=\"form-control form-control-underlined border-primary search-input\">\n                  </div>\n              </div>\n              <!-- <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n                <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/regions/add\">\n                  <i class=\"fa fa-plus\"></i>\n                  {{'new-region' | translate}}\n                </a>\n              </div> -->\n          </div>\n        <div class=\"table-responsive text-center\">\n            <table class=\"table table-bordered main-table\">\n                <tr class=\"bg-dark text-white\">\n                    <td>{{'image' | translate}}</td>\n                    <td>{{'name' | translate}}</td>\n                    <td>{{'description' | translate}}</td>\n                    <!-- <td>{{'location' | translate}}</td> -->\n                    <td>{{'comment-number' | translate}}</td>\n                    <td>{{'rating-average' | translate}}</td>\n                    <td>{{'control' | translate}}</td>\n                </tr>\n                <tr *ngFor=\"let region of regionsList | paginate: config\">\n                  <td><img src=\"{{region?.path[0]?.path}}\" alt=\"{{region.name}} Image\" class=\"img-thumbnail img-custom\"></td>\n                  <td>{{region.name ? region.name : '-'}}</td>\n                  <td class=\"td-custom\">{{region.description ? region.description : '-'}}</td>\n                  <!-- <td>{{region.location ? region.location : '-'}}</td> -->\n                  <td>{{region.commentNumber ? region.commentNumber : '-'}}</td>\n                  <td>{{region.ratingAverage ? region.ratingAverage : '-'}}</td>\n                  <!-- <td>\n                    <a (click)=\"suggest(car.id, (car.suggest ? false : true))\"\n                       class=\"text-primary mr-1 mb-1\"\n                       title=\"Change To {{car.suggest ? 'Not Recommended' : 'Recommended' }}\"\n\n                       style=\"cursor: pointer; {{ suggestProgress ? 'pointer-events: none;' : '' }}\">\n                      {{ car.suggest ? 'Recommended' : 'Not Recommended' }}\n                    </a>\n                  </td> -->\n                  <td>\n                      <a routerLink=\"/regions/{{region?.id}}\" class=\"btn btn-success btn-sm mr-1 mb-1\">\n                        {{'update' | translate}}\n                    </a>\n                    <a (click)=\"delete(region?.id)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1 {{isDeleted ? 'disabled' : ''}}\">\n                        {{'delete' | translate}}\n                      </a>\n                  </td>\n                </tr>\n            </table>\n            <pagination-controls class=\"my-pagination\"\n                                 (pageChange)=\"pageChanged($event)\"\n                                 autoHide=\"true\"\n                                 maxSize=\"5\"\n                                 responsive=\"true\"\n                                 previousLabel=\"{{'prev' | translate}}\"\n                                 nextLabel=\"{{'next' | translate}}\"\n                                 screenReaderPaginationLabel=\"Pagination\"\n                                 screenReaderPageLabel=\"page\"\n                                 screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n            </pagination-controls>\n        </div>\n      <!-- </div> -->\n    <!-- </div> -->\n    <!-- <div *ngIf=\"regionsList.length === 0\">\n        <div class=\"container\">\n            <div class=\"alert alert-primary text-center mt-5\">{{'region-not-found' | translate}}</div>\n            <a routerLink=\"/cars/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n                <i class=\"fa fa-plus\"></i>\n                {{'add-new-car' | translate}}\n            </a>\n        </div>\n    </div> -->\n</div>\n<div *ngIf=\"regions.length == 0\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, OnInit, Renderer2 } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { GoogleMap } from '../../model/google-map';\nimport { Region } from '../../model/region.model';\nimport { RegionsService } from '../../services/regions.service';\nimport { loadRegion, updateRegion } from '../../store/region.actions';\nimport { RegionState } from '../../store/region.reducer';\nimport { getRegionSelector } from '../../store/region.selector';\n\n@Component({\n  selector: 'app-edit-region',\n  templateUrl: './edit-region.component.html',\n  styleUrls: ['./edit-region.component.scss']\n})\nexport class EditRegionComponent implements OnInit {\n\n  isSubmited = false;\n  editRegionForm: FormGroup;\n  regionData: Region;\n  uploadButtonValue = 'upload';\n  coverUploadButtonValue = 'upload';\n  imageName = 'select-image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  imageUploaded = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n  showSearchResult = false;\n  googleMapToken: string;\n  googleLocationsNameList: GoogleMap[];\n\n  constructor(private store: Store<RegionState>,\n              private regionService: RegionsService,\n              private toaster: ToastrService,\n              public translate: TranslateService,\n              private render: Renderer2,\n              @Inject(DOCUMENT) private document: Document,\n              private activatedRoute: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(params => {\n      const regionId = params.get('id');      \n      this.store.dispatch(loadRegion({id: +regionId}));\n    })\n    // Init Form Inputs\n    this.editRegionForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n      location: new FormControl(''),\n      path: new FormControl(''),\n      placeId: new FormControl('', Validators.required),\n    });\n    this.checkLangChange();     // Check CHange Languages\n    this.getRegion();           // Region Details\n    this.getGoogleMapToken();   // Google Map Token\n  }\n\n  // Get Google Map Token\n  getGoogleMapToken() {\n    this.regionService.getGoogleMapToken().subscribe(token => this.googleMapToken = token.Data);\n  }\n\n  // Get Region Details\n  getRegion() {\n    this.store.select(getRegionSelector).subscribe(\n      data => {\n        if (data) {\n          this.regionData = data;\n          console.log('data detail: ', data);\n          this.fillForms(data);\n        }\n      }\n    );\n  }\n\n  // Fill Form Inputs With Region Data\n  fillForms(data: Region) {\n    this.editRegionForm = new FormGroup({\n      id: new FormControl(data.id),\n      name: new FormControl(data.name),\n      description: new FormControl(data.description),\n      location: new FormControl(data.location),\n      path: new FormControl(data.path),\n      placeId: new FormControl(data.placeId),\n    });\n  } \n\n  // Search Google Map Location\n  searchLocation(event) {\n    this.showSearchResult = true;\n    const value = of((event.target.value).trim());\n    this.regionService.searchLocationAutoComplete(value, this.googleMapToken).subscribe(\n      data => {\n        if (data) {\n          this.googleLocationsNameList = data.predictions;\n          console.log('search data : ', this.googleLocationsNameList);\n          // this.showSearchResult = false;\n        }\n      });    \n  }\n\n  // Fill Form Inputs With New Google Map Locations\n  getLocationInfo(location: GoogleMap) {\n    const id = this.regionData.id;\n    const description = this.editRegionForm.get('description').value;\n    if (location) {\n      this.showSearchResult = false;\n      this.editRegionForm = new FormGroup({\n        id: new FormControl(id),\n        name: new FormControl(location?.description),\n        description: new FormControl(description),  \n        location: new FormControl(location?.structured_formatting?.main_text_matched_substrings.length),\n        placeId: new FormControl(location?.place_id),\n        path: new FormControl(''),  \n      });\n     \n    }\n  }\n\n  // Check Change Language To Style Upload Image Input With RTL And LTR\n  checkLangChange() {\n    this.translate.onLangChange.subscribe(lang => {\n      console.log('lang change to : ', lang);\n      if (lang.lang == 'ar') {\n        console.log('lang : ', lang.lang);\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      } else {\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      }\n    });\n  }\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'Upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'Uploading...';\n    this.imageUploaded = true;\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.regionService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.imageUploaded = false;\n          this.submitButtonValue = 'update';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.imageUploaded = false;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n\n\n  onSubmit() {\n    if (!this.editRegionForm.valid) {\n      this.toaster.error('Error : Form Not Valid');\n      this.isSubmited = false;\n      return false;\n    }\n    // Fetch All Form Data On Json Type\n    const formObject = this.editRegionForm.getRawValue();  \n    formObject.path = this.imageUrl;\n    if (this.imageUrl) {\n      formObject.path = this.imageUrl;\n    } else {\n      formObject.path = this.regionData.regionImage[0].pathURL;\n    }\n    console.log(formObject);\n    this.store.dispatch(updateRegion({region: formObject}));    \n  }\n\n\n  // This sample uses the Place Autocomplete widget to allow the user to search\n// for and select a place. The sample then displays an info window containing\n// the place ID and other information about the place that the user has\n// selected.\n\n// This example requires the Places library. Include the libraries=places\n// parameter when you first load the API. For example:\n// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n/*\n  initMap(): void {\n    const map = new google.maps.Map(\n      document.getElementById(\"map\") as HTMLElement,\n      {\n        center: { lat: -33.8688, lng: 151.2195 },\n        zoom: 13,\n      }\n    );\n\n    const input = document.getElementById(\"pac-input\") as HTMLInputElement;\n\n    const autocomplete = new google.maps.places.Autocomplete(input);\n    autocomplete.bindTo(\"bounds\", map);\n\n    // Specify just the place data fields that you need.\n    autocomplete.setFields([\"place_id\", \"geometry\", \"name\"]);\n\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n\n    const infowindow = new google.maps.InfoWindow();\n    const infowindowContent = document.getElementById(\n      \"infowindow-content\"\n    ) as HTMLElement;\n    infowindow.setContent(infowindowContent);\n\n    const marker = new google.maps.Marker({ map: map });\n\n    marker.addListener(\"click\", () => {\n      infowindow.open(map, marker);\n    });\n\n    autocomplete.addListener(\"place_changed\", () => {\n      infowindow.close();\n\n      const place = autocomplete.getPlace();\n\n      if (!place.geometry || !place.geometry.location) {\n        return;\n      }\n\n      if (place.geometry.viewport) {\n        map.fitBounds(place.geometry.viewport);\n      } else {\n        map.setCenter(place.geometry.location);\n        map.setZoom(17);\n      }\n\n      // Set the position of the marker using the place ID and location.\n      // @ts-ignore This should be in @typings/googlemaps.\n      marker.setPlace({\n        placeId: place.place_id,\n        location: place.geometry.location,\n      });\n\n      marker.setVisible(true);\n\n      (infowindowContent.children.namedItem(\n        \"place-name\"\n      ) as HTMLElement).textContent = place.name as string;\n      (infowindowContent.children.namedItem(\n        \"place-id\"\n      ) as HTMLElement).textContent = place.place_id as string;\n      (infowindowContent.children.namedItem(\n        \"place-address\"\n      ) as HTMLElement).textContent = place.formatted_address as string;\n      infowindow.open(map, marker);\n    });\n  }*/\n\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\">\n    <div class=\"content-header\">\n        <h1 class=\"text-center my-5\">{{'update-region-page' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header bg-sidebar-item-button text-white\">\n            <h3 class=\"card-title mb-0\">{{'update-region' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"editRegionForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('name').errors &&\n                           (editRegionForm.get('name').touched || editRegionForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           (keydown)=\"searchLocation($event)\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <div class=\"location-search-result px-3 py-2\" *ngIf=\"showSearchResult\">\n                        <ul class=\"list-unstyled mb-0\" *ngIf=\"googleLocationsNameList\">\n                            <li class=\"pb-1\" *ngFor=\"let location of googleLocationsNameList\" (click)=\"getLocationInfo(location)\">{{location?.description}}</li>\n                        </ul>\n                        <div *ngIf=\"!googleLocationsNameList\" class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>                        \n                    </div>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('name').errors?.required\">{{'name-field-required' | translate}}</span>\n                </div>\n                <!-- <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">{{'location' | translate}}</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('location').errors &&\n                           (editRegionForm.get('location').touched || editRegionForm.get('location').dirty)}\"\n                           name=\"location\"\n                           formControlName=\"location\"\n                           id=\"exampleInputlocation1\"\n                           class=\"form-control\"\n                           placeholder=\"Type The location\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('location').errors?.required\">location Field Is Required</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('location').errors?.location\">Please enter a vaild location address</span>\n                </div> -->\n                <!-- <div class=\"form-group\">\n                    <label for=\"exampleInputplaceId1\">PlaceId</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('placeId').errors &&\n                           (editRegionForm.get('placeId').touched || editRegionForm.get('placeId').dirty)}\"\n                           name=\"placeId\"\n                           formControlName=\"placeId\"\n                           id=\"exampleInputplaceId1\"\n                           class=\"form-control\"\n                           placeholder=\"Type The Location Id\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('placeId').errors?.required\">Location Id Field Is Required</span>\n                </div> -->\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('description').errors &&\n                           (editRegionForm.get('description').touched || editRegionForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('description').errors?.required\">{{'descriptioon-field-required' | translate}}</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('description').errors?.minlength\">description Must Be Greater Than 3</span>\n                </div>            \n                <div class=\"form-group\">\n                    <label for=\"exampleInputupload\">{{'upload' | translate}}</label>\n                    <div class=\"input-group input-group-custom\">\n                        <div class=\"custom-file\">\n                            <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                                (change)=\"updateName(imageInput)\">\n                            <label class=\"custom-file-label\" for=\"file-input\">{{imageName | translate}}</label>\n                        </div>\n                        <div class=\"input-group-append\">\n                            <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                            {{uploadButtonValue | translate}}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"editRegionForm.invalid || imageUploaded\">{{'update' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>\n\n<!-- <div style=\"display: none\">\n  <input\n    id=\"pac-input\"\n    class=\"controls\"\n    type=\"text\"\n    placeholder=\"Enter a location\"\n  />\n</div>\n<div id=\"map\"></div>\n<div id=\"infowindow-content\">\n  <span id=\"place-name\" class=\"title\"></span><br />\n  <strong>Place ID:</strong> <span id=\"place-id\"></span><br />\n  <span id=\"place-address\"></span>\n</div> -->\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddRegionComponent } from './components/add-region/add-region.component';\nimport { AllRegionsComponent } from './components/all-regions/all-regions.component';\nimport { EditRegionComponent } from './components/edit-region/edit-region.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AllRegionsComponent },\n  { path: 'add', component: AddRegionComponent },\n  { path: ':id', component: EditRegionComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegionsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegionsRoutingModule } from './regions-routing.module';\nimport { AllRegionsComponent } from './components/all-regions/all-regions.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromRegion from './store/region.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { RegionEffects } from './store/region.effects';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\nimport { AddRegionComponent } from './components/add-region/add-region.component';\nimport { EditRegionComponent } from './components/edit-region/edit-region.component';\n\n\n@NgModule({\n  declarations: [\n    AllRegionsComponent,\n    AddRegionComponent,\n    EditRegionComponent\n  ],\n  imports: [\n    ThemeModule,\n    RegionsRoutingModule,\n    StoreModule.forFeature(fromRegion.regionsFeatureKey, fromRegion.reducer),\n    EffectsModule.forFeature([RegionEffects]),   \n  ]\n})\nexport class RegionsModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\nimport { AdminConfig } from '../../AdminConfig';\nimport { GoogleMapResponse } from '../model/google-map-response';\nimport { RegionDetailsResponse } from '../model/region-details.response';\nimport { RegionsResponse } from '../model/region-response.model';\nimport { Region } from '../model/region.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegionsService {\n\n  constructor(private httpClient: HttpClient,\n              private tokenService: TokenService) { }\n\n  // All Regions\n  getAllRegions(): Observable<RegionsResponse> {\n    return this.httpClient.get<RegionsResponse>(AdminConfig.regionsAPI);\n  }\n\n  // Get Region Details\n  getRegion(regionId: number): Observable<RegionDetailsResponse> {\n    return this.httpClient.get<RegionDetailsResponse>(`${AdminConfig.regionAPI}/${regionId}`);\n  }\n\n  // Create New Regions\n  createRegion(data): Observable<Region> {\n    return this.httpClient.post<Region>(\n      AdminConfig.regionAPI,\n      JSON.stringify(data)\n    );\n  }\n\n  // Update Exists Region\n  updateRegion(region: Region): Observable<Region> {\n    return this.httpClient.put<Region>(\n      AdminConfig.updateRegionAPI,\n      JSON.stringify(region)\n    );\n  }\n\n  // Delete Region\n  deleteRegion(regionId: number): Observable<any> {\n    return this.httpClient.delete<any>(\n      `${AdminConfig.regionAPI}/${regionId}`\n    );\n  }\n\n  getGoogleMapToken(): Observable<{Data: string}> {\n    return this.httpClient.get<{Data: string}>(AdminConfig.googleMapTokenAPI);\n  }\n\n  getPlaceDetailsByPlaceID(placeID: string, token: string) {\n    const placeDetailsURL = AdminConfig.googleMapPlaceDetailsAPI + `json?place_id=${placeID}&key=${token}`;\n    return this.httpClient.get(placeDetailsURL);\n  }\n\n  search(value: string, token: string): Observable<GoogleMapResponse> {\n    const searchQuery = AdminConfig.googleMapSearchAPI + `json?input=${value}&types=geocode&key=${token}`;\n    return this.httpClient.get<GoogleMapResponse>(searchQuery);\n  }\n\n  searchLocationAutoComplete(text$: Observable<string>, token: string): Observable<GoogleMapResponse> {\n\t\treturn text$.pipe(\n\t\t\tdebounceTime(500),\t\t\t// Wait 500 Millsecond before execute The rest\n\t\t\tdistinctUntilChanged(),\t\t// stop make search until the searching value is changing \n\t\t\tswitchMap(searchTerm => {\n\t\t\t\tif (!searchTerm) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn this.search(searchTerm, token);\n\t\t\t})\n\t\t);\n\t}\n  \n\n  // Image Section - Upload Image\n  public uploadImage(image: File): Observable<string> {\n    const formData = new FormData();\n    formData.append('image', image);\n    return this.httpClient.post<string>(AdminConfig.generalUploadAPI, formData);\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Region } from '../model/region.model';\n\nexport const loadRegions = createAction('[Region/API] Load Regions');\n\nexport const loadRegionsSuccess = createAction(\n  '[Region/API] Load Regions Success', \n  props<{ Data: Region[] }>()\n);\n\nexport const loadRegionsFailure = createAction(\n  '[Region/API] Load Regions Failure', \n  props<{ error: string }>()\n);\n\nexport const loadRegion = createAction(\n  '[Region/API] Load Region',\n  props<{ id: number }>()\n);\n\nexport const loadRegionSuccess = createAction(\n  '[Region/API] Load Region Success', \n  props<{ region: Region }>()\n);\n\nexport const loadRegionFailure = createAction(\n  '[Region/API] Load Region Failure', \n  props<{ error: string }>()\n);\n\nexport const deleteRegion = createAction(\n  '[Region/API] Delete Region',\n  props<{ id: number }>()\n);\n\nexport const deleteRegionSuccess = createAction(\n  '[Region/API] Delete Region Success'\n);\n\n\nexport const deleteRegionFailure = createAction(\n  '[Region/API] Delete Region Failure',\n  props<{ error: string }>()\n);\n\nexport const addRegion = createAction(\n  '[Region/API] Add Region',\n  props<{ region: Region }>()\n);\n\nexport const addRegionSuccess = createAction(\n  '[Region/API] Add Region Success'\n);\n\nexport const addRegionFailure = createAction(\n  '[Region/API] Add Region Failure',\n  props<{ error: string }>()\n);\n\nexport const upsertRegion = createAction(\n  '[Region/API] Upsert Region',\n  props<{ region: Region }>()\n);\n\nexport const addRegions = createAction(\n  '[Region/API] Add Regions',\n  props<{ regions: Region[] }>()\n);\n\nexport const updateRegion = createAction(\n  '[Region/API] Update Region',\n  props<{ region: Region }>()\n);\n\nexport const updateRegionSuccess = createAction(\n  '[Region/API] Update Region Success',\n  props<{ region: Update<Region> }>()\n);\n\nexport const updateRegionFailure = createAction(\n  '[Region/API] Update Region Failure',\n  props<{ error: string }>()\n);\n\nexport const updateRegions = createAction(\n  '[Region/API] Update Regions',\n  props<{ regions: Update<Region>[] }>()\n);\n\nexport const deleteRegions = createAction(\n  '[Region/API] Delete Regions',\n  props<{ ids: string[] }>()\n);\n\nexport const upsertRegions = createAction(\n  '[Region/API] Upsert Regions',\n  props<{ regions: Region[] }>()\n);\n\nexport const clearRegions = createAction(\n  '[Region/API] Clear Regions'\n);\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Update } from '@ngrx/entity';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AppState } from 'src/app/@theme/store/app-state';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { Region } from '../model/region.model';\nimport { RegionsService } from '../services/regions.service';\nimport * as regionsAction from '../store/region.actions';\n\n\n\n@Injectable()\nexport class RegionEffects {\n\n  constructor(private actions$: Actions,\n              private store: Store<AppState>,\n              private toaster: ToastrService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private regionService: RegionsService) {}\n\n  loadRegions$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.loadRegions),\n    mergeMap(() => this.regionService.getAllRegions()\n      .pipe(\n        map(response => {\n          // this.store.dispatch(setLoadSpinner({status: false}));\n          return regionsAction.loadRegionsSuccess(response)\n        }\n        ),\n        catchError(error => {\n          console.log('error effect: ', error);\n          if (error.error.error) {\n            this.toaster.error(error.error.error);\n          } else if (error.error.msg) {\n            this.toaster.error(error.error.msg);\n          }\n          return of(regionsAction.loadRegionsFailure(error));\n        })\n      ))\n  ));\n\n  loadRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.loadRegion),\n    mergeMap(action => this.regionService.getRegion(action.id)\n      .pipe(\n        map(response => regionsAction.loadRegionSuccess({region: response.Data})),\n        catchError(error => {\n          console.log('error effect', error);\n          return of(regionsAction.loadRegionFailure({error}))\n        })\n      ))\n  ));\n\n  addRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.addRegion),\n    exhaustMap(action => this.regionService.createRegion(action.region)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response?.msg);\n          return regionsAction.addRegionSuccess();\n        }),\n        catchError(error => {\n          console.log('error create effect', error);\n          return of(regionsAction.addRegionFailure({error}))\n        })\n      ))\n  ));\n\n  updateRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.updateRegion),\n    switchMap(action => this.regionService.updateRegion(action.region)\n    .pipe(\n      map((response: any) => {\n        this.toaster.success(response.msg);\n        const regionUpdate: Update<Region> = {\n          id: action.region.id,\n          changes: {\n            ...action.region\n          }\n        };\n        return regionsAction.updateRegionSuccess({region: regionUpdate});\n      }),\n      catchError(error => of(regionsAction.updateRegionFailure({error})))\n    ) )\n  ));\n\n  redirectAddUpdateRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(...[regionsAction.addRegionSuccess, regionsAction.updateRegionSuccess]),\n    map( () => {\n      this.router.navigate(['regions']);\n    })\n  ), { dispatch: false });\n\n  // redirectUpdateRegion$ = createEffect(() => this.actions$.pipe(\n  //   ofType(regionsAction.updateRegionSuccess),\n  //   map( () => {\n  //     this.router.navigate(['regions']);\n  //   })\n  // ), { dispatch: false });\n\n  deleteRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.deleteRegion),\n    exhaustMap(action => this.regionService.deleteRegion(action.id)\n      .pipe(\n        map(response => {\n          console.log(response);          \n          this.toaster.success('Region Successfully Deleted');\n          return regionsAction.deleteRegionSuccess()}),\n        catchError(error => {\n          console.log('effect delete error', error);\n          return of(regionsAction.deleteRegionFailure({error}));\n        }))\n      ))\n  );\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Region } from '../model/region.model';\nimport * as RegionActions from './region.actions';\n\nexport const regionsFeatureKey = 'regions';\n\nexport interface RegionState extends EntityState<Region> {\n  // additional entities state properties\n  Data: Region[];\n  regionDetails: Region;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Region> = createEntityAdapter<Region>();\n\nexport const initialState: RegionState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  regionDetails: undefined,\n  error: undefined,\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(RegionActions.loadRegionsSuccess,\n    (state, action) => adapter.setAll(action.Data, state)\n  ),\n  on(RegionActions.loadRegionSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        regionDetails: action.region\n      }\n    }),\n  on(RegionActions.addRegions,\n    (state, action) => adapter.addMany(action.regions, state)\n  ),\n  on(RegionActions.deleteRegion,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n  on(RegionActions.addRegion,\n    (state, action) => adapter.addOne(action.region, state)\n  ),\n  on(RegionActions.upsertRegion,\n    (state, action) => adapter.upsertOne(action.region, state)\n  ),\n  on(RegionActions.addRegions,\n    (state, action) => adapter.addMany(action.regions, state)\n  ),\n  on(RegionActions.upsertRegions,\n    (state, action) => adapter.upsertMany(action.regions, state)\n  ),\n  on(RegionActions.updateRegionSuccess,\n    (state, action) => adapter.updateOne(action.region, state)\n  ),\n  on(RegionActions.updateRegions,\n    (state, action) => adapter.updateMany(action.regions, state)\n  ),\n  on(RegionActions.deleteRegions,\n    (state, action) => adapter.removeMany(action.ids, state)\n  ),\n  on(RegionActions.clearRegions,\n    state => adapter.removeAll(state)\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { regionsFeatureKey, RegionState, selectAll } from \"./region.reducer\";\r\n\r\nconst regionsFeatureState = createFeatureSelector<RegionState>(regionsFeatureKey);\r\n\r\nexport const getAllRegionsSelector = createSelector(regionsFeatureState, selectAll);\r\n\r\nexport const getRegionSelector = createSelector(regionsFeatureState, (state: RegionState) => state.regionDetails);"]}