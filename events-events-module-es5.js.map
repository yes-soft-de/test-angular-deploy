{"version":3,"sources":["webpack:///src/app/pages/events/components/add-event/add-event.component.ts","webpack:///src/app/pages/events/components/add-event/add-event.component.html","webpack:///src/app/pages/events/components/edit-event/edit-event.component.ts","webpack:///src/app/pages/events/components/edit-event/edit-event.component.html","webpack:///src/app/pages/events/components/list-events/list-events.component.ts","webpack:///src/app/pages/events/components/list-events/list-events.component.html","webpack:///src/app/pages/events/events-routing.module.ts","webpack:///src/app/pages/events/events.module.ts","webpack:///src/app/pages/events/services/events.service.ts","webpack:///src/app/pages/events/store/event.actions.ts","webpack:///src/app/pages/events/store/event.effects.ts","webpack:///src/app/pages/events/store/event.reducer.ts","webpack:///src/app/pages/events/store/event.selector.ts"],"names":["AddEventComponent","store","toaster","isSubmited","uploadButtonValue","coverUploadButtonValue","imageName","fileSelected","fileUploaded","imagePathReady","submitButtonValue","addEventForm","name","required","description","location","status","date","type","select","subscribe","error","console","log","valid","formObject","getRawValue","dispatch","event","onSubmit","selector","templateUrl","styleUrls","EditEventComponent","activatedRoute","paramMap","params","eventId","get","id","editEventForm","subType","getEventDetails","editUnsubscription","data","eventDetails","fillingForm","unsubscribe","ListEventsComponent","eventsList","getAllEvents","eventsSubscription","events","config","itemsPerPage","currentPage","totalItems","length","filter","res","toLocaleLowerCase","match","routes","path","component","EventsRoutingModule","forChild","imports","exports","EventsModule","forFeature","declarations","EventsService","httpClient","tokenService","eventsAPI","eventAPI","post","put","providedIn","loadEvents","loadEventsSuccess","loadEventsFailure","loadEvent","loadEventSuccess","loadEventFailure","addEvent","addEventSuccess","addEventFailure","updateEvent","updateEventSuccess","updateEventFailure","EventEffects","actions$","eventService","router","LoadEvents$","pipe","getEvents","response","Data","loadEvent$","action","addEvent$","newEvent","success","msg","navigate","relativeTo","updateEvent$","eventsFeatureKey","adapter","initialState","getInitialState","undefined","reducer","state","setAll","addOne","updateOne","getSelectors","selectIds","selectEntities","selectAll","selectTotal","eventsFeatureState","getAllEventsSelector","getEventDetailsSelector","getAddEventErrorSelector"],"mappings":"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","file":"events-events-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { EventState } from '../../store/event.reducer';\nimport {addEvent} from '../../store/event.actions';\nimport {getAddEventErrorSelector} from '../../store/event.selector';\n\n@Component({\n  selector: 'app-add-event',\n  templateUrl: './add-event.component.html',\n  styleUrls: ['./add-event.component.scss']\n})\nexport class AddEventComponent implements OnInit {\n\n  isSubmited = false;\n  addEventForm: FormGroup;\n  uploadButtonValue = 'Upload';\n  coverUploadButtonValue = 'Upload';\n  imageName = 'Select Image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n\n  constructor(private store: Store<EventState>,\n              private toaster: ToastrService) {\n  }\n\n  ngOnInit() {\n    // Fetch Form Data\n    this.addEventForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      description: new FormControl('', Validators.required),\n      location: new FormControl('', Validators.required),\n      status: new FormControl('', Validators.required),\n      date: new FormControl('', Validators.required),\n      type: new FormControl('', Validators.required)\n    });\n\n    this.store.select(getAddEventErrorSelector).subscribe(error => console.log('error', error));\n\n  }\n\n\n\n\n  onSubmit() {\n    // this.isSubmited = true;\n    if (!this.addEventForm.valid) {\n      this.toaster.error('Error : Form Not Valid');\n      this.isSubmited = false;\n      return false;\n    }\n    // Fetch All Form Data On Json Type\n    const formObject = this.addEventForm.getRawValue();\n    console.log(formObject);\n    this.store.dispatch(addEvent({event: formObject}));\n  }\n\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\">\n    <div class=\"content-header\">\n        <h1 class=\"text-center my-5\">{{'create-event-page' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header bg-sidebar-item-button text-white\">\n            <h3 class=\"card-title mb-0\">{{'new-event' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"addEventForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addEventForm.get('name').errors &&\n                           (addEventForm.get('name').touched || addEventForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addEventForm.get('name').errors?.required\">{{'name-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputTypeSuccess\">{{'type' | translate}}</label>\n                    <select class=\"form-control\"\n                            name=\"type\"\n                            formControlName=\"type\">\n                        <option value=\"\">{{'select-type-placeholder' | translate}}</option>\n                        <option value=\"event\">{{'event' | translate}}</option>\n                        <option value=\"festival\">{{'festival' | translate}}</option>\n                    </select>\n                    <span class=\"invalid-feedback\" *ngIf=\"addEventForm.get('type').errors?.required\">{{'type-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputTypeSuccess\">{{'status' | translate}}</label>\n                    <select class=\"form-control\"\n                            name=\"status\"\n                            formControlName=\"status\">\n                        <option value=\"\">{{'select-status-placeholder' | translate}}</option>\n                        <option value=\"soon\">{{'soon' | translate}}</option>\n                        <option value=\"now\">{{'now' | translate}}</option>\n                        <option value=\"done\">{{'done' | translate}}</option>\n                    </select>\n                    <span class=\"invalid-feedback\" *ngIf=\"addEventForm.get('status').errors?.required\">{{'status-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputlocation1\">{{'location' | translate}}</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': addEventForm.get('location').errors &&\n                           (addEventForm.get('location').touched || addEventForm.get('location').dirty)}\"\n                           name=\"location\"\n                           formControlName=\"location\"\n                           id=\"exampleInputlocation1\"\n                           class=\"form-control\"\n                           placeholder=\"{{'location-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addEventForm.get('location').errors?.required\">{{'location-field-required' | translate}}</span>\n                </div>\n              <div class=\"form-group\">\n                <label for=\"exampleInputdate1\">{{'date' | translate}}</label>\n                <input type=\"date\"\n                       [ngClass]=\"{'is-invalid': addEventForm.get('date').errors &&\n                           (addEventForm.get('date').touched || addEventForm.get('date').dirty)}\"\n                       name=\"date\"\n                       formControlName=\"date\"\n                       id=\"exampleInputdate1\"\n                       class=\"form-control\">\n                <span class=\"invalid-feedback\" *ngIf=\"addEventForm.get('date').errors?.required\">{{'date-field-required' | translate}}</span>\n              </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addEventForm.get('description').errors &&\n                           (addEventForm.get('description').touched || addEventForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"addEventForm.get('description').errors?.required\">{{'descriptioon-field-required' | translate}}</span>\n                </div>\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" style=\"cursor: pointer\" [disabled]=\"addEventForm.invalid || isSubmited\">{{'create' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Update } from '@ngrx/entity';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, Subscription } from 'rxjs';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { Events } from '../../model/event.model';\nimport { loadEvent, updateEvent } from '../../store/event.actions';\nimport { EventState } from '../../store/event.reducer';\nimport { getEventDetailsSelector } from '../../store/event.selector';\n\n@Component({\n  selector: 'app-edit-event',\n  templateUrl: './edit-event.component.html',\n  styleUrls: ['./edit-event.component.scss']\n})\nexport class EditEventComponent implements OnInit, OnDestroy {\n  eventDetails: Events;\n  isSubmited = false;\n  editEventForm: FormGroup;\n  uploadButtonValue = 'Upload';\n  coverUploadButtonValue = 'Upload';\n  imageName = 'Select Image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n  editUnsubscription: Subscription;\n\n  constructor(private store: Store<EventState>,\n              private activatedRoute: ActivatedRoute,\n              private toaster: ToastrService) {\n  }\n\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(\n      params => {\n        const eventId = params.get('id');\n        this.store.dispatch(loadEvent({ id: +eventId}));\n      }\n    );\n    // Fetch Form Data\n    this.editEventForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n      location: new FormControl(''),\n      status: new FormControl(''),\n      type: new FormControl(''),\n      subType: new FormControl(''),\n    });\n    // run get event Details method\n    this.getEventDetails();\n  }\n\n  // Get Event Details\n  getEventDetails() {\n    this.editUnsubscription = this.store.select(getEventDetailsSelector).subscribe(\n      data => {\n        if (data) {\n          console.log('data', data);\n          this.eventDetails = data;\n          this.fillingForm(data);\n        }\n      }\n    );\n  }\n\n  // fill update form inputs\n  fillingForm(data: Events) {\n    this.editEventForm = new FormGroup({\n      name: new FormControl(data.name),\n      description: new FormControl(data.description),\n      location: new FormControl(data.location),\n      status: new FormControl(data.status),\n      type: new FormControl(data.type),\n      subType: new FormControl(data.subType),\n    });\n  }\n\n  onSubmit() {\n    // this.isSubmited = true;\n    if (!this.editEventForm.valid) {\n      this.toaster.error('Error : Form Not Valid');\n      this.isSubmited = false;\n      return false;\n    }\n    // Fetch All Form Data On Json Type\n    const formObject = this.editEventForm.getRawValue();\n    formObject.id = this.eventDetails.id;\n    console.log(formObject);\n    // const update: Update<Events> = {\n      //   id: this.eventDetails.id,\n      //   changes: this.editEventForm.getRawValue()\n    // }\n    this.store.dispatch(updateEvent({event: formObject}));\n    // this.isSubmited = false;\n  }\n\n  ngOnDestroy() {\n    this.editUnsubscription.unsubscribe();\n  }\n\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\" *ngIf=\"eventDetails != null\">\n    <div class=\"content-header\">\n        <h1 class=\"text-center my-5\">{{'update-event-page' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header bg-sidebar-item-button text-white\">\n            <h3 class=\"card-title mb-0\">{{'update-event' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"editEventForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editEventForm.get('name').errors &&\n                           (editEventForm.get('name').touched || editEventForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editEventForm.get('name').errors?.required\">{{'name-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputTypeSuccess\">{{'type' | translate}}</label>\n                    <select class=\"form-control\"\n                            name=\"type\"\n                            formControlName=\"type\">\n                        <option value=\"\">{{'select-type-placeholder' | translate}}</option>\n                        <option value=\"event\">{{'event' | translate}}</option>\n                        <option value=\"festival\">{{'festival' | translate}}</option>\n                    </select>\n                    <span class=\"invalid-feedback\" *ngIf=\"editEventForm.get('type').errors?.required\">{{'type-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputSubTypeSuccess\">{{'sub-type' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editEventForm.get('subType').errors &&\n                           (editEventForm.get('subType').touched || editEventForm.get('subType').dirty)}\"\n                           type=\"text\"\n                           id=\"inputSubTypeSuccess\"\n                           name=\"subType\"\n                           formControlName=\"subType\"\n                           placeholder=\"{{'sub-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editEventForm.get('subType').errors?.required\">{{'sub-type-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputTypeSuccess\">{{'status' | translate}}</label>\n                    <select class=\"form-control\"\n                            name=\"status\"\n                            formControlName=\"status\">\n                        <option value=\"\">{{'select-status-placeholder' | translate}}</option>\n                        <option value=\"soon\">{{'soon' | translate}}</option>\n                        <option value=\"now\">{{'now' | translate}}</option>\n                        <option value=\"done\">{{'done' | translate}}</option>\n                    </select>\n                    <span class=\"invalid-feedback\" *ngIf=\"editEventForm.get('status').errors?.required\">{{'status-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">{{'location' | translate}}</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': editEventForm.get('location').errors &&\n                           (editEventForm.get('location').touched || editEventForm.get('location').dirty)}\"\n                           name=\"location\"\n                           formControlName=\"location\"\n                           id=\"exampleInputlocation1\"\n                           class=\"form-control\"\n                           placeholder=\"{{'location-type-placeholder' | translate}}\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editEventForm.get('location').errors?.required\">{{'location-field-required' | translate}}</span>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editEventForm.get('description').errors &&\n                           (editEventForm.get('description').touched || editEventForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"editEventForm.get('description').errors?.required\">{{'descriptioon-field-required' | translate}}</span>\n                </div>\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"editEventForm.invalid || isSubmited\">{{'update' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>\n<div *ngIf=\"eventDetails == null\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Subscription } from 'rxjs';\nimport { EventState } from '../../store/event.reducer';\nimport { Events } from '../../model/event.model';\nimport * as eventAction from '../../store/event.actions';\nimport { getAllEventsSelector } from '../../store/event.selector';\n\n@Component({\n  selector: 'app-list-events',\n  templateUrl: './list-events.component.html',\n  styleUrls: ['./list-events.component.scss']\n})\nexport class ListEventsComponent implements OnInit, OnDestroy {\n  events: Events[];\n  eventsList: Events[] = [];\n  name: any;\n  config: any;\n  isDeleted: boolean;\n  eventsSubscription: Subscription;\n\n  constructor(private store: Store<EventState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(eventAction.loadEvents());\n    this.getAllEvents();\n  }\n\n  getAllEvents() {\n    this.eventsSubscription = this.store.select(getAllEventsSelector).subscribe(\n      data => {\n        console.log('components data : ', data);\n        this.events = data;\n        this.eventsList = data;\n      }\n    );\n    this.config = {\n      itemsPerPage: 5,\n      currentPage: 1,\n      totalItems: this.eventsList.length\n    };\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.eventsList = [...this.events];\n    } else {\n      this.eventsList = [];\n      this.eventsList = this.events.filter(res => {\n        if (res.name) {\n          const name = res.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (name) {\n            return name;\n          }\n        }\n        if (res.location) {\n          const location = res.location.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (location) {\n            return location;\n          }\n        }\n        if (res.status) {\n          const status = res.status.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (status) {\n            return status;\n          }\n        }\n        if (res.type) {\n          const type = res.type.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (type) {\n            return type;\n          }\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.eventsSubscription.unsubscribe();\n  }\n\n\n}\n","<div *ngIf=\"events.length != 0\">\n    <!-- <div *ngIf=\"eventsList.length !== 0\"> -->\n      <!-- <div class=\"container-fluid\"> -->\n        <h1 class=\"text-center details-title my-4\">{{'manage-events-page' | translate}}</h1>\n          <div class=\"row\">\n              <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n                  <div class=\"form-group mb-4\">\n                      <input\n                        id=\"exampleFormControlInput2\"\n                        [(ngModel)]=\"name\"\n                        (keyup)=\"applyFilter()\"\n                        type=\"text\"\n                        placeholder=\"{{'event-search-input' | translate}}\"\n                        title=\"{{'event-search-input' | translate}}\"\n                        class=\"form-control form-control-underlined border-primary search-input\">\n                  </div>\n              </div>\n              <!-- <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n                <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/events/add\">\n                  <i class=\"fa fa-plus\"></i>\n                  {{'new-event' | translate}}\n                </a>\n              </div> -->\n          </div>\n        <div class=\"table-responsive text-center\">\n            <table class=\"table table-bordered main-table\">\n                <tr class=\"bg-dark text-white\">\n                    <td>{{'name' | translate }}</td>\n                    <td>{{'comment-number' | translate }}</td>\n                    <td>{{'date' | translate }}</td>\n                    <td>{{'description' | translate }}</td>\n                    <td>{{'location' | translate }}</td>\n                    <td>{{'status' | translate }}</td>\n                    <td>{{'sub-type' | translate }}</td>\n                    <td>{{'type' | translate }}</td>\n                    <td>{{'control' | translate}}</td>\n                </tr>\n                <tr *ngFor=\"let event of eventsList | paginate: config\">\n                    <td>{{event?.name ? event?.name : '-'}}</td>\n                    <td>{{event?.commentNumber ? event?.commentNumber : '-'}}</td>\n                    <td style=\"white-space: nowrap;\">{{event?.date ? (event?.date.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\n                    <td class=\"td-custom\">{{event?.description ? event?.description : '-'}}</td>\n                    <td>{{event?.location ? event?.location : '-'}}</td>\n                    <td>{{event?.status ? event?.status : '-'}}</td>\n                    <td>{{event?.subType ? event?.subType : '-'}}</td>\n                    <td>{{event?.type ? event?.type : '-'}}</td>\n                  <!-- <td>\n                    <a (click)=\"suggest(car.id, (car.suggest ? false : true))\"\n                       class=\"text-primary mr-1 mb-1\"\n                       title=\"Change To {{car.suggest ? 'Not Recommended' : 'Recommended' }}\"\n\n                       style=\"cursor: pointer; {{ suggestProgress ? 'pointer-events: none;' : '' }}\">\n                      {{ car.suggest ? 'Recommended' : 'Not Recommended' }}\n                    </a>\n                  </td> -->\n                  <td>\n                      <a routerLink=\"edit/{{event.id}}\" class=\"btn btn-success btn-sm mr-1 mb-1\">\n                        {{'update' | translate}}\n                    </a>\n                    <!-- <a (click)=\"delete(event.id)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1 {{isDeleted ? 'disabled' : ''}}\">\n                        {{'delete' | translate}}\n                      </a> -->\n                  </td>\n                </tr>\n            </table>\n            <pagination-controls class=\"my-pagination\"\n                                 (pageChange)=\"pageChanged($event)\"\n                                 autoHide=\"true\"\n                                 maxSize=\"5\"\n                                 responsive=\"true\"\n                                 previousLabel=\"{{'prev' | translate}}\"\n                                 nextLabel=\"{{'next' | translate}}\"\n                                 screenReaderPaginationLabel=\"Pagination\"\n                                 screenReaderPageLabel=\"page\"\n                                 screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n            </pagination-controls>\n        </div>\n      <!-- </div> -->\n    <!-- </div> -->\n    <!-- <div *ngIf=\"eventsList.length === 0\">\n        <div class=\"container\">\n            <div class=\"alert alert-primary text-center mt-5\">{{'event-not-found' | translate}}</div>\n            <a routerLink=\"/cars/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n                <i class=\"fa fa-plus\"></i>\n                {{'add-new-car' | translate}}\n            </a>\n        </div>\n    </div> -->\n</div>\n<div *ngIf=\"events.length == 0\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddEventComponent } from './components/add-event/add-event.component';\nimport { EditEventComponent } from './components/edit-event/edit-event.component';\nimport { ListEventsComponent } from './components/list-events/list-events.component';\n\n\nconst routes: Routes = [\n  { path: '', component: ListEventsComponent },\n  { path: 'add', component: AddEventComponent },\n  { path: 'edit/:id', component: EditEventComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EventsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { EventsRoutingModule } from './events-routing.module';\nimport { ListEventsComponent } from './components/list-events/list-events.component';\nimport { AddEventComponent } from './components/add-event/add-event.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromEvent from './store/event.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { EventEffects } from './store/event.effects';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\nimport { EditEventComponent } from './components/edit-event/edit-event.component';\n\n\n@NgModule({\n  declarations: [ListEventsComponent, AddEventComponent, EditEventComponent],\n  imports: [\n    ThemeModule,\n    EventsRoutingModule,\n    StoreModule.forFeature(fromEvent.eventsFeatureKey, fromEvent.reducer),\n    EffectsModule.forFeature([EventEffects])\n  ]\n})\nexport class EventsModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\nimport { AdminConfig } from '../../AdminConfig';\nimport { EventDetailsResponse } from '../model/event-details-response.model';\nimport { EventsResponse } from '../model/event-response.model';\nimport {Events} from '../model/event.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventsService {\n\n  constructor(private httpClient: HttpClient,\n              private tokenService: TokenService) { }\n\n  getEvents(): Observable<EventsResponse> {\n    return this.httpClient.get<EventsResponse>(AdminConfig.eventsAPI);\n  }\n\n  getEventDetails(eventId: number): Observable<EventDetailsResponse> {\n    return this.httpClient.get<EventDetailsResponse>(`${AdminConfig.eventAPI}/${eventId}`);\n  }\n\n  newEvent(data): Observable<{ Data: Events, msg: string }> {\n    return this.httpClient.post<{ Data: Events, msg: string }>(\n      AdminConfig.eventAPI, data,\n    );\n  }\n\n  updateEvent(data): Observable<{ Data: Events, msg: string }> {\n    return this.httpClient.put<{ Data: Events, msg: string }>(\n      AdminConfig.eventAPI, data,\n    );\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Events } from '../model/event.model';\n\nexport const loadEvents = createAction(\n  '[Event/API] Load Events'\n);\n\nexport const loadEventsSuccess = createAction(\n  '[Event/API] Load Events Success',\n  props<{ events: Events[] }>()\n);\n\nexport const loadEventsFailure = createAction(\n  '[Event/API] Load Events Failure',\n  props<{ error: string }>()\n);\n\nexport const loadEvent = createAction(\n  '[Event/API] Load Event',\n  props<{ id: number }>()\n);\n\nexport const loadEventSuccess = createAction(\n  '[Event/API] Load Event Success',\n  props<{ Data: Events }>()\n);\n\nexport const loadEventFailure = createAction(\n  '[Event/API] Load Event Failure',\n  props<{ error: string }>()\n);\n\nexport const addEvent = createAction(\n  '[Event/API] Add Event',\n  props<{ event: Events }>()\n);\n\nexport const addEventSuccess = createAction(\n  '[Event/API] Add Event Success',\n  props<{ Data: Events, msg: string }>()\n);\n\nexport const addEventFailure = createAction(\n  '[Event/API] Add Event Failure',\n  props<{ error: string }>()\n);\n\nexport const updateEvent = createAction(\n  '[Event/API] Update Event',\n  props<{ event: Update<Events> }>()\n  );\n\nexport const updateEventSuccess = createAction(\n    '[Event/API] Update Event Success',\n  props<{ Data: Events, msg: string }>()\n);\n\nexport const updateEventFailure = createAction(\n  '[Event/API] Update Event Failure',\n  props<{ error: string }>()\n);\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap, tap } from 'rxjs/operators';\nimport { EventsService } from '../services/events.service';\nimport * as eventActions from './event.actions';\n\n\n@Injectable()\nexport class EventEffects {\n\n\n\n  constructor(private actions$: Actions,\n              private eventService: EventsService,\n              private toaster: ToastrService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute) {}\n\n  LoadEvents$ = createEffect(() => this.actions$.pipe(\n    ofType(eventActions.loadEvents),\n    mergeMap(() => this.eventService.getEvents()\n      .pipe(\n        map(response => {\n          return eventActions.loadEventsSuccess({events: response.Data})\n        }),\n        catchError(error => {\n          console.log('error events effect', error);\n          return of(eventActions.loadEventsFailure(error));\n        })\n      ))\n  ));\n\n  loadEvent$ = createEffect(() => this.actions$.pipe(\n    ofType(eventActions.loadEvent),\n    mergeMap(action => this.eventService.getEventDetails(action.id)\n      .pipe(\n        map(response => {\n          return eventActions.loadEventSuccess(response);\n        }),\n        catchError(error => {\n          console.log('error :', error);\n          return of(eventActions.loadEventFailure(error));\n        })\n      ))\n  ));\n\n  addEvent$ = createEffect(() => this.actions$.pipe(\n    ofType(eventActions.addEvent),\n    exhaustMap(action => this.eventService.newEvent(action.event)\n      .pipe(\n        map(response => {\n          console.log('effect response : ', response);\n          this.toaster.success(response.msg);\n          this.router.navigate(['../'], {relativeTo: this.activatedRoute});\n          return eventActions.addEventSuccess({Data: response.Data, msg: response.msg });\n        }),\n        catchError(error => of(eventActions.addEventFailure({error})))\n      ))\n  ));\n\n  updateEvent$ = createEffect(() => this.actions$.pipe(\n    ofType(eventActions.updateEvent),\n    exhaustMap(action => this.eventService.updateEvent(action.event)\n      .pipe(\n        map(response => {\n          this.toaster.success(response.msg);\n          return eventActions.updateEventSuccess({Data: response.Data, msg: response.msg});\n        }),\n        catchError(error => {\n          console.log('error update effect :', error);\n          return of(eventActions.updateEventFailure(error));\n        }),\n        tap(() => this.router.navigate(['events']))\n      ))\n  ), { dispatch: false });\n\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Events } from '../model/event.model';\nimport * as EventActions from './event.actions';\nimport { act } from '@ngrx/effects';\n\nexport const eventsFeatureKey = 'events';\n\nexport interface EventState extends EntityState<Events> {\n  // additional entities state properties\n  Data: Events[];\n  eventDetails: Events;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Events> = createEntityAdapter<Events>();\n\nexport const initialState: EventState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  eventDetails: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(EventActions.loadEventsSuccess,\n    (state, action) => adapter.setAll(action.events, state)\n  ),\n  on(EventActions.loadEventsFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(EventActions.loadEventSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        eventDetails: action.Data\n      };\n    }\n  ),\n  on(EventActions.loadEventFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(EventActions.addEventSuccess,\n    (state, action) => adapter.addOne(action.Data, state)\n  ),\n  on(EventActions.addEventFailure,\n    (state, action) => {\n        return {\n          ...state,\n          error: action.error\n        };\n    }),\n  on(EventActions.updateEvent,\n    (state, action) => adapter.updateOne(action.event, state)\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { eventsFeatureKey, EventState, selectAll } from \"./event.reducer\";\r\n\r\nconst eventsFeatureState = createFeatureSelector<EventState>(eventsFeatureKey);\r\n\r\nexport const getAllEventsSelector = createSelector(eventsFeatureState, selectAll);\r\n\r\nexport const getEventDetailsSelector = createSelector(eventsFeatureState, state => state.eventDetails);\r\n\r\nexport const getAddEventErrorSelector = createSelector(eventsFeatureState, state => state.error);\r\n"]}