{"version":3,"sources":["webpack:///src/app/pages/register/components/login/login.component.ts","webpack:///src/app/pages/register/components/login/login.component.html","webpack:///src/app/pages/register/register-routing.module.ts","webpack:///src/app/pages/register/register.component.ts","webpack:///src/app/pages/register/register.module.ts","webpack:///src/app/pages/register/service/register.service.ts","webpack:///src/app/pages/register/store/auth.effects.ts","webpack:///src/app/pages/register/store/auth.selector.ts"],"names":["LoginComponent","store","errors","error","process","loginForm","username","password","select","subscribe","dispatch","status","data","getRawValue","onSubmit","selector","templateUrl","styleUrls","routes","path","component","RegisterRoutingModule","forChild","imports","exports","RegisterComponent","template","RegisterModule","forFeature","declarations","providers","RegisterService","httpClient","httpOptions","headers","post","loginAPI","JSON","stringify","pipe","errorHandler","providedIn","AuthEffects","actions$","registerService","authService","router","activatedRouter","tokenService","startLogin$","action","login","response","handle","token","changeAuthStatus","errorMessage","message","loginRedirect$","res","navigate","relativeTo","authFeatureState","getErrorAuth","state"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC8BY;;AAAgD;;AAAgB;;;;QDZ/DA,c;AAMX,8BAAoBC,KAApB,EAA4C;AAAA;;AAAxB,aAAAA,KAAA,GAAAA,KAAA;AAJpB,aAAAC,MAAA,GAAS,EAAT;AACA,aAAAC,KAAA,GAAQ,IAAR;AACA,aAAAC,OAAA,GAAU,KAAV;AAE+C;;;;eAE/C,oBAAQ;AAAA;;AACN,eAAKC,SAAL,GAAiB,IAAI,wDAAJ,CAAc;AAC7BC,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,EAAhB,CADmB;AAE7BC,oBAAQ,EAAE,IAAI,0DAAJ,CAAgB,EAAhB;AAFmB,WAAd,CAAjB,CADM,CAKN;;AACA,eAAKN,KAAL,CAAWO,MAAX,CAAkB,iEAAlB,EAAgCC,SAAhC,CACE,UAAAN,KAAK,EAAI;AACP,iBAAI,CAACC,OAAL,GAAe,KAAf;AACA,iBAAI,CAACD,KAAL,GAAaA,KAAb;AACD,WAJH;AAMD;;;eAED,oBAAW;AACT,eAAKC,OAAL,GAAe,IAAf,CADS,CAET;;AACA,eAAKH,KAAL,CAAWS,QAAX,CAAoB,iGAAe;AAACC,kBAAM,EAAE;AAAT,WAAf,CAApB;AACA,eAAKV,KAAL,CAAWS,QAAX,CAAoB,uEAAW;AAACE,gBAAI,EAAE,KAAKP,SAAL,CAAeQ,WAAf;AAAP,WAAX,CAApB;AACD;;;;;;;uBA3BUb,c,EAAc,kH;AAAA,K;;;YAAdA,c;AAAc,gC;AAAA,e;AAAA,a;AAAA,ukC;AAAA;AAAA;AClB3B;;AACE;;AAAwC;;AAAU;;AAClD;;AACE;;AACA;;AACE;;AACE;;AACF;;AACA;;AAA8B;AAAA,mBAAY,IAAAc,QAAA,EAAZ;AAAsB,WAAtB;;AAC5B;;AACE;;AAA2F;;AAAQ;;AACnG;;AACE;;AACA;;AACE;;AACF;;AACF;;AACF;;AACA;;AACE;;AAA8F;;AAAQ;;AACtG;;AACE;;AACA;;AACE;;AACF;;AACF;;AACF;;AACA;;AACE;;AACE;;AAA4E;;AAAK;;AACjF;;AACF;;AACF;;AACF;;AACF;;AACF;;AACF;;;;AA/BgD;;AAAA;;AACxC;;AAAA;;AAEI;;AAAA;;AAK0C;;AAAA;;AACxC;;AAAA;;AAQwC;;AAAA;;AACxC;;AAAA;;AAM4C;;AAAA;;AACd;;AAAA;;;;;;;;;sEDZ/Bd,c,EAAc;cAL1B,uDAK0B;eALhB;AACTe,kBAAQ,EAAE,WADD;AAETC,qBAAW,EAAE,wBAFJ;AAGTC,mBAAS,EAAE,CAAC,wBAAD;AAHF,S;AAKgB,Q;;;;;;;;;;;;;;;;;;;;;;AElB3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAMC,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAE,EAAR;AAAYC,eAAS,EAAE;AAAvB,KADqB,CAAvB;;QAQaC,qB;;;;;YAAAA;;;;yBAAAA,qB;AAAqB,O;AAAA,gBAHvB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGuB,EAFtB,4DAEsB;;;;0HAArBG,qB,EAAqB;AAAA;AAAA,kBAFtB,4DAEsB;AAAA,O;AAFV,K;;;;;sEAEXA,qB,EAAqB;cAJjC,sDAIiC;eAJxB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIwB,Q;;;;;;;;;;;;;;;;;;ACdlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAMaC,iB;AAEX,mCAAc;AAAA;AAAG;;;;eAEjB,oBAAQ,CACP;;;;;;;uBALUA,iB;AAAiB,K;;;YAAjBA,iB;AAAiB,mC;AAAA,c;AAAA,a;AAAA;AAAA;AAFjB;;AAAe;;AAAf;;;;;;;;;sEAEAA,iB,EAAiB;cAJ7B,uDAI6B;eAJnB;AACTV,kBAAQ,EAAE,cADD;AAETW,kBAAQ;AAFC,S;AAImB,Q;;;;;;;;;;;;;;;;;;;;ACN9B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QA0BaC,c;;;;;YAAAA;;;;yBAAAA,c;AAAc,O;AAAA,iBAFd,CAAC,yEAAD,C;AAAiB,gBALnB,CACP,sEADO,EAEP,8EAFO,EAGP,4DAAcC,UAAd,CAAyB,CAAC,+DAAD,CAAzB,CAHO,CAKmB;;;;0HAEjBD,c,EAAc;AAAA,uBAVvB,gFAUuB,EATvB,qEASuB;AATN,kBAGjB,sEAHiB,EAIjB,8EAJiB,EAII,kEAJJ;AASM,O;AALF,K;;;;;sEAKZA,c,EAAc;cAZ1B,sDAY0B;eAZjB;AACRE,sBAAY,EAAE,CACZ,gFADY,EAEZ,qEAFY,CADN;AAKRN,iBAAO,EAAE,CACP,sEADO,EAEP,8EAFO,EAGP,4DAAcK,UAAd,CAAyB,CAAC,+DAAD,CAAzB,CAHO,CALD;AAURE,mBAAS,EAAE,CAAC,yEAAD;AAVH,S;AAYiB,Q;;;;;;;;;;;;;;;;;;AC1B3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaC,e;AAEX,+BAAoBC,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAA2B,O,CAE/C;;;;;eAMA,eAAMpB,IAAN,EAAU;AACR,cAAMqB,WAAW,GAAG;AAClBC,mBAAO,EAAE,IAAI,gEAAJ,CAAgB;AACvB,8BAAgB;AADO,aAAhB;AADS,WAApB;AAKA,iBAAO,KAAKF,UAAL,CAAgBG,IAAhB,CACL,yDAAYC,QADP,EAELC,IAAI,CAACC,SAAL,CAAe1B,IAAf,CAFK,EAGLqB,WAHK,EAIHM,IAJG,CAIE,kEAAWR,eAAe,CAACS,YAA3B,CAJF,CAAP;AAKD;;;eAhBO,sBAAoBrC,KAApB,EAA8C;AACpD,iBAAO,wDAAWA,KAAK,IAAI,cAApB,CAAP;AACD;;;;;;;uBAPU4B,e,EAAe,uH;AAAA,K;;;aAAfA,e;AAAe,eAAfA,eAAe,K;AAAA,kBAFd;;;;;sEAEDA,e,EAAe;cAH3B,wDAG2B;eAHhB;AACVU,oBAAU,EAAE;AADF,S;AAGgB,Q;;;;;;;;;;;;;;;;;;;;;;ACV5B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAgBaC,W,GAEX,qBAAoBC,QAApB,EACoB1C,KADpB,EAEoB2C,eAFpB,EAGoBC,WAHpB,EAIoBC,MAJpB,EAKoBC,eALpB,EAMoBC,YANpB,EAMgD;AAAA;;AAAA;;AAN5B,WAAAL,QAAA,GAAAA,QAAA;AACA,WAAA1C,KAAA,GAAAA,KAAA;AACA,WAAA2C,eAAA,GAAAA,eAAA;AACA,WAAAC,WAAA,GAAAA,WAAA;AACA,WAAAC,MAAA,GAAAA,MAAA;AACA,WAAAC,eAAA,GAAAA,eAAA;AACA,WAAAC,YAAA,GAAAA,YAAA;AAEpB,WAAAC,WAAA,GAAc,mEAAa;AAAA,eAAM,MAAI,CAACN,QAAL,CAAcJ,IAAd,CAC/B,6DAAO,wDAAP,CAD+B,EAE/B,kEAAW,UAAAW,MAAM;AAAA,iBAAI,MAAI,CAACN,eAAL,CAAqBO,KAArB,CAA2BD,MAAM,CAACtC,IAAlC,EAClB2B,IADkB,CAEjB,2DAAI,UAAAa,QAAQ,EAAI;AACd,kBAAI,CAACJ,YAAL,CAAkBK,MAAlB,CAAyBH,MAAM,CAACtC,IAAP,CAAYN,QAArC,EAA+C8C,QAAQ,CAACE,KAAxD;;AACA,kBAAI,CAACT,WAAL,CAAiBU,gBAAjB,CAAkC,IAAlC;;AACA,kBAAI,CAACtD,KAAL,CAAWS,QAAX,CAAoB,iGAAe;AAACC,oBAAM,EAAE;AAAT,aAAf,CAApB;;AACA,mBAAO,4DAAP;AACD,WALD,CAFiB,EAQjB,kEAAW,UAAAR,KAAK,EAAI;AAClB,gBAAIqD,YAAJ;;AACA,gBAAIrD,KAAK,CAACA,KAAN,CAAYA,KAAhB,EAAuB;AACrBqD,0BAAY,GAAGrD,KAAK,CAACA,KAAN,CAAYA,KAA3B;AACD,aAFD,MAEO,IAAIA,KAAK,CAACA,KAAN,CAAYsD,OAAhB,EAAyB;AAC9BD,0BAAY,GAAGrD,KAAK,CAACA,KAAN,CAAYsD,OAA3B;AACD,aAFM,MAEA,IAAItD,KAAK,CAACA,KAAN,CAAYD,MAAhB,EAAwB;AAC7BsD,0BAAY,GAAGrD,KAAK,CAACA,KAAN,CAAYD,MAA3B;AACD;;AAED,kBAAI,CAACD,KAAL,CAAWS,QAAX,CAAoB,iGAAe;AAACC,oBAAM,EAAE;AAAT,aAAf,CAApB;;AACA,mBAAO,gDAAG,2DAAwB;AAACR,mBAAK,EAAEqD;AAAR,aAAxB,CAAH,CAAP;AACD,WAZD,CARiB,CAAJ;AAAA,SAAjB,CAF+B,CAAN;AAAA,OAAb,CAAd,CAFgD,CA4BhD;;AACA,WAAAE,cAAA,GAAiB,mEAAa;AAAA,eAAM,MAAI,CAACf,QAAL,CAAcJ,IAAd,CAClC,6DAAO,0DAAP,CADkC,EAElC,2DAAI,UAAAoB,GAAG;AAAA,iBAAI,MAAI,CAACb,MAAL,CAAYc,QAAZ,CAAqB,CAAC,KAAD,CAArB,EAA8B;AAACC,sBAAU,EAAE,MAAI,CAACd;AAAlB,WAA9B,CAAJ;AAAA,SAAP,CAFkC,CAAN;AAAA,OAAb,EAGd;AAAErC,gBAAQ,EAAE;AAAZ,OAHc,CAAjB;AA7BkD,K;;;uBARvCgC,W,EAAW,6G,EAAA,yG,EAAA,iI,EAAA,iJ,EAAA,8G,EAAA,sH,EAAA,qJ;AAAA,K;;;aAAXA,W;AAAW,eAAXA,WAAW;;;;;sEAAXA,W,EAAW;cADvB;AACuB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA,QAAMoB,gBAAgB,GAAG,0EAAiC,6DAAjC,CAAzB;AAEO,QAAMC,YAAY,GAAG,mEAAeD,gBAAf,EAAiC,UAAAE,KAAK;AAAA,aAAIA,KAAK,CAAC7D,KAAV;AAAA,KAAtC,CAArB","file":"pages-register-register-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { RegisterService } from '../../service/register.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\r\nimport { AuthService } from 'src/app/@theme/admin-service/auth/auth.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from 'src/app/@theme/store/app-state';\r\nimport { startLogin } from '../../store/auth.actions';\r\nimport { getErrorAuth } from '../../store/auth.selector';\r\nimport { Observable } from 'rxjs';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  errors = [];\r\n  error = null;\r\n  process = false;\r\n\r\n  constructor(private store: Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      username: new FormControl(''),\r\n      password: new FormControl('')\r\n    });\r\n    // Get Error Messages\r\n    this.store.select(getErrorAuth).subscribe(\r\n      error => {\r\n        this.process = false;\r\n        this.error = error; \r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    this.process = true;\r\n    // Form Code\r\n    this.store.dispatch(setLoadSpinner({status: true}));\r\n    this.store.dispatch(startLogin({data: this.loginForm.getRawValue()}));    \r\n  }\r\n\r\n\r\n}\r\n","<div class=\"col-12 col-sm-11 col-md-9 col-lg-7 col-xl-7 mx-auto my-5\">\r\n  <h1 class=\"text-center text-muted mb-3\">Login Page</h1>\r\n  <div class=\"card\">\r\n    <div class=\"cord-header\"></div>\r\n    <div class=\"card-body\">\r\n      <div class=\"alert alert-danger mb-0 my-2\" [hidden]=\"!error\">\r\n        {{ error }}\r\n      </div>\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputEmail3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Username</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"text\" name=\"username\" formControlName=\"username\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"Username\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['username']\">\r\n              {{ errors['username'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputPassword3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Password</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"password\" name=\"password\" formControlName=\"password\" class=\"form-control\" id=\"inputPassword3\" placeholder=\"Password\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['password']\">\r\n              {{ errors['password'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-12\">\r\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!loginForm.valid\">Login</button>\r\n            <small class=\"text-success m-2\" *ngIf=\"process\">Procressing ....</small>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './register.component';\n\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  template: `<router-outlet><router-outlet>`\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\nimport { RegisterRoutingModule } from './register-routing.module';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './register.component';\n\nimport { RegisterService } from './service/register.service';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromAuth from './store/auth.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AuthEffects } from './store/auth.effects';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n  ],\n  imports: [\n    ThemeModule,\n    RegisterRoutingModule,\n    EffectsModule.forFeature([AuthEffects])\n  ],\n  providers: [RegisterService]\n})\nexport class RegisterModule { }\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { LoginRequest } from '../entity/login-request';\r\nimport { AdminConfig } from '../../AdminConfig';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  // Handling the error\r\n  private static errorHandler(error: HttpErrorResponse) {\r\n    return throwError(error || 'Server Error');\r\n  }\r\n\r\n\r\n  login(data): Observable<any> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n      })\r\n    };\r\n    return this.httpClient.post<any>(\r\n      AdminConfig.loginAPI, \r\n      JSON.stringify(data),\r\n      httpOptions\r\n      ).pipe(catchError(RegisterService.errorHandler));\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { AuthService } from 'src/app/@theme/admin-service/auth/auth.service';\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\nimport { AppState } from 'src/app/@theme/store/app-state';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { RegisterService } from '../service/register.service';\nimport * as authAction from './auth.actions';\n\n\n\n@Injectable()\nexport class AuthEffects {\n\n  constructor(private actions$: Actions,\n              private store: Store<AppState>,\n              private registerService: RegisterService,\n              private authService: AuthService,\n              private router: Router,\n              private activatedRouter: ActivatedRoute,\n              private tokenService: TokenService) {}\n\n  startLogin$ = createEffect(() => this.actions$.pipe(\n    ofType(authAction.startLogin),\n    exhaustMap(action => this.registerService.login(action.data)\n      .pipe(\n        map(response => {\n          this.tokenService.handle(action.data.username, response.token);        \n          this.authService.changeAuthStatus(true);\n          this.store.dispatch(setLoadSpinner({status: false}));\n          return authAction.successLogin();\n        }),\n        catchError(error => {\n          let errorMessage: string;\n          if (error.error.error) {\n            errorMessage = error.error.error;\n          } else if (error.error.message) {\n            errorMessage = error.error.message;\n          } else if (error.error.errors) {\n            errorMessage = error.error.errors;\n          }\n          \n          this.store.dispatch(setLoadSpinner({status: false}));\n          return of(authAction.failureLogin({error: errorMessage}));\n        })\n      ))\n  ));\n\n  // Redirect After Success Login\n  loginRedirect$ = createEffect(() => this.actions$.pipe(\n    ofType(authAction.successLogin),\n    tap(res => this.router.navigate(['../'], {relativeTo: this.activatedRouter}))\n  ), { dispatch: false });\n\n}\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { authsFeatureKey, AuthState } from \"./auth.reducer\";\r\n\r\nconst authFeatureState = createFeatureSelector<AuthState>(authsFeatureKey);\r\n\r\nexport const getErrorAuth = createSelector(authFeatureState, state => state.error);"]}