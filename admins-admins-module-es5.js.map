{"version":3,"sources":["webpack:///src/app/pages/admins/admins-routing.module.ts","webpack:///src/app/pages/admins/admins.module.ts","webpack:///src/app/pages/admins/components/all-admins/all-admins.component.ts","webpack:///src/app/pages/admins/components/all-admins/all-admins.component.html","webpack:///src/app/pages/admins/components/new-admin/new-admin.component.ts","webpack:///src/app/pages/admins/components/new-admin/new-admin.component.html","webpack:///src/app/pages/admins/services/admins.service.ts","webpack:///src/app/pages/admins/store/admin.actions.ts","webpack:///src/app/pages/admins/store/admin.effects.ts","webpack:///src/app/pages/admins/store/admin.reducer.ts","webpack:///src/app/pages/admins/store/admin.selector.ts"],"names":["routes","path","component","AdminsRoutingModule","forChild","imports","exports","AdminsModule","forFeature","declarations","AllAdminsComponent","store","adminsList","dispatch","getAllAdmins","select","subscribe","error","console","log","adminsSubscription","data","admins","config","itemsPerPage","currentPage","totalItems","length","event","userID","confirm","name","filter","res","toLocaleLowerCase","match","email","phoneNumber","toString","unsubscribe","selector","templateUrl","styleUrls","NewAdminComponent","adminService","translate","toaster","router","render","document","uploadButtonValue","imageName","fileSelected","imagePathReady","submitButtonValue","events","route","checkCurrentLang","addAdminForm","required","password","image","checkLangChange","passwordField","nativeElement","setAttribute","imageInput","file","files","reader","FileReader","addEventListener","selectedFile","target","result","uploadImage","imageUrl","err","readAsDataURL","valid","formObject","getRawValue","admin","currentLang","removeClass","querySelector","addClass","onLangChange","lang","onSubmit","showPassword","hidePassword","updateName","processFile","Document","AdminsService","httpClient","get","adminsAPI","post","createAdminAPI","deleteAdminAPI","formData","FormData","append","generalUploadAPI","providedIn","loadAdmins","loadAdminsSuccess","loadAdminsFailure","addAdmin","addAdminSuccess","addAdminFailure","deleteAdmin","deleteAdminSuccess","deleteAdminFailure","AdminEffects","actions$","activatedRoute","loadAdmins$","pipe","getAdmins","response","addAdmin$","action","newAdmin","success","msg","redirectAfterAdd$","navigate","deleteAdmin$","adminsFeatureKey","adapter","selectId","initialState","getInitialState","Data","undefined","reducer","state","setAll","removeOne","getSelectors","selectIds","selectEntities","selectAll","selectTotal","adminFeatureState","getAllAdminsSelector","getAdminErrorSelector"],"mappings":"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","file":"admins-admins-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AllAdminsComponent} from './components/all-admins/all-admins.component';\nimport {NewAdminComponent} from './components/new-admin/new-admin.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AllAdminsComponent },\n  { path: 'add', component: NewAdminComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AdminsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AdminsRoutingModule } from './admins-routing.module';\nimport { AllAdminsComponent } from './components/all-admins/all-admins.component';\nimport { NewAdminComponent } from './components/new-admin/new-admin.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromAdmin from './store/admin.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AdminEffects } from './store/admin.effects';\nimport {ThemeModule} from '../../@theme/theme.module';\n\n\n@NgModule({\n  declarations: [AllAdminsComponent, NewAdminComponent],\n  imports: [\n    ThemeModule,\n    AdminsRoutingModule,\n    StoreModule.forFeature(fromAdmin.adminsFeatureKey, fromAdmin.reducer),\n    EffectsModule.forFeature([AdminEffects])\n  ]\n})\nexport class AdminsModule { }\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Events} from '../../../events/model/event.model';\nimport {Subscription} from 'rxjs';\nimport {select, Store} from '@ngrx/store';\nimport {EventState} from '../../../events/store/event.reducer';\nimport * as adminActions from '../../store/admin.actions';\nimport {getAllEventsSelector} from '../../../events/store/event.selector';\nimport {Admin} from '../../model/admin.model';\nimport {getAdminErrorSelector, getAllAdminsSelector} from '../../store/admin.selector';\nimport {AdminState} from '../../store/admin.reducer';\n\n@Component({\n  selector: 'app-all-admins',\n  templateUrl: './all-admins.component.html',\n  styleUrls: ['./all-admins.component.scss']\n})\nexport class AllAdminsComponent implements OnInit, OnDestroy {\n  admins: Admin[];\n  adminsList: Admin[] = [];\n  name: any;\n  config: any;\n  isDeleted: boolean;\n  adminsSubscription: Subscription;\n\n  constructor(private store: Store<AdminState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(adminActions.loadAdmins());\n    this.getAllAdmins();\n    this.store.select(getAdminErrorSelector).subscribe(error => console.log('error : ', error));\n  }\n\n  getAllAdmins() {\n    this.adminsSubscription = this.store.select(getAllAdminsSelector).subscribe(\n      data => {\n        console.log('components data : ', data);\n        this.admins = data;\n        this.adminsList = data;\n        this.config = {\n          itemsPerPage: 5,\n          currentPage: 1,\n          totalItems: this.adminsList.length\n        };\n      }\n    );\n\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  delete(userID: string) {\n    if (confirm('Are you sure you want to delete this admin ?')) {\n      this.store.dispatch(adminActions.deleteAdmin({userID}));\n    }\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.adminsList = [...this.admins];\n    } else {\n      this.adminsList = [];\n      this.adminsList = this.admins.filter(res => {\n        if (res.name) {\n          const name = res.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (name) {\n            return name;\n          }\n        }\n        if (res.email) {\n          const email = res.email.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (email) {\n            return email;\n          }\n        }\n        if (res.phoneNumber) {\n          const phoneNumber = res.phoneNumber.toString().toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (phoneNumber) {\n            return phoneNumber;\n          }\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.adminsSubscription) {\n      this.adminsSubscription.unsubscribe();\n    }\n  }\n\n\n}\n","<div *ngIf=\"admins.length != 0\">\n  <!-- <div *ngIf=\"regionsList.length !== 0\"> -->\n  <!-- <div class=\"container-fluid\"> -->\n  <h1 class=\"text-center details-title my-4\">{{'manage-admins-page' | translate}}</h1>\n  <div class=\"row\">\n    <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n      <div class=\"form-group mb-4\">\n        <input\n          id=\"exampleFormControlInput2\"\n          [(ngModel)]=\"name\"\n          (keyup)=\"applyFilter()\"\n          type=\"text\"\n          placeholder=\"{{'admins-search-input' | translate}}\"\n          title=\"{{'admins-search-input' | translate}}\"\n          class=\"form-control form-control-underlined border-primary search-input\">\n      </div>\n    </div>\n    <!-- <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n      <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/regions/add\">\n        <i class=\"fa fa-plus\"></i>\n        {{'new-region' | translate}}\n      </a>\n    </div> -->\n  </div>\n  <div class=\"table-responsive text-center\">\n    <table class=\"table table-bordered main-table\">\n      <tr class=\"bg-dark text-white\">\n        <td>{{'image' | translate}}</td>\n        <td>{{'name' | translate}}</td>\n        <td>{{'email' | translate}}</td>\n<!--        <td>{{'phone-number' | translate}}</td>-->\n        <td>{{'create-date' | translate}}</td>\n        <td>{{'control' | translate}}</td>\n      </tr>\n      <tr *ngFor=\"let admin of adminsList | paginate: config\">\n        <td><img src=\"{{admin?.image}}\" alt=\"{{admin?.name}} Image\" class=\"img-thumbnail img-custom\"></td>\n        <td>{{admin?.name ? admin?.name : '-'}}</td>\n        <td>{{admin?.email ? admin?.email : '-'}}</td>\n<!--        <td>{{admin?.phoneNumber ? admin?.phoneNumber : '-'}}</td>-->\n        <td>{{admin?.createDate ? (admin?.createDate?.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\n        <td>\n          <a (click)=\"delete(admin?.userID)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1 {{isDeleted ? 'disabled' : ''}}\">\n            {{'delete' | translate}}\n          </a>\n        </td>\n      </tr>\n    </table>\n    <pagination-controls class=\"my-pagination\"\n                         (pageChange)=\"pageChanged($event)\"\n                         autoHide=\"true\"\n                         maxSize=\"5\"\n                         responsive=\"true\"\n                         previousLabel=\"{{'prev' | translate}}\"\n                         nextLabel=\"{{'next' | translate}}\"\n                         screenReaderPaginationLabel=\"Pagination\"\n                         screenReaderPageLabel=\"page\"\n                         screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n    </pagination-controls>\n  </div>\n  <!-- </div> -->\n  <!-- </div> -->\n  <!-- <div *ngIf=\"regionsList.length === 0\">\n      <div class=\"container\">\n          <div class=\"alert alert-primary text-center mt-5\">{{'region-not-found' | translate}}</div>\n          <a routerLink=\"/cars/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n              <i class=\"fa fa-plus\"></i>\n              {{'add-new-car' | translate}}\n          </a>\n      </div>\n  </div> -->\n</div>\n<div *ngIf=\"admins.length == 0\">\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n\n","import {Component, ElementRef, HostBinding, HostListener, Inject, OnInit, Renderer2, ViewChild} from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Store} from '@ngrx/store';\nimport {AdminState} from '../../store/admin.reducer';\nimport {ToastrService} from 'ngx-toastr';\nimport {addAdmin} from '../../store/admin.actions';\nimport {ImageSnippet} from '../../../../@theme/model/image-snippet';\nimport {AdminsService} from '../../services/admins.service';\nimport {TranslateService} from '@ngx-translate/core';\nimport {DOCUMENT} from '@angular/common';\nimport { ActivationEnd, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-new-admin',\n  templateUrl: './new-admin.component.html',\n  styleUrls: ['./new-admin.component.scss']\n})\nexport class NewAdminComponent implements OnInit {\n  @ViewChild('passwordField') passwordField: ElementRef;\n  addAdminForm: FormGroup;\n  uploadButtonValue = 'upload';\n  imageName = 'select-image';\n  fileSelected = false;\n  imageUrl: string;\n  imagePathReady = false;\n  submitButtonValue = 'waiting-uploading-image';\n  selectedFile: ImageSnippet;\n\n  constructor(private store: Store<AdminState>,\n              private adminService: AdminsService,\n              public translate: TranslateService,\n              private toaster: ToastrService,\n              private router: Router,\n              private render: Renderer2,\n              @Inject(DOCUMENT) private document: Document) { }\n\n  ngOnInit(): void {\n    this.router.events.subscribe(route => {\n      if (route instanceof ActivationEnd) {\n        this.checkCurrentLang();\n      }\n    });\n    this.addAdminForm = new FormGroup({\n      name: new FormControl('', Validators.required),\n      password: new FormControl('', Validators.required),\n      email: new FormControl('', [Validators.required, Validators.email]),\n      userID: new FormControl(''),\n      image: new FormControl('')\n    });\n    // Change eyeIcon position in rtl\n    this.checkLangChange();\n  }\n\n  showPassword() {\n    this.passwordField.nativeElement.setAttribute('type', 'text');\n  }\n\n  hidePassword() {\n    this.passwordField.nativeElement.setAttribute('type', 'password');\n  }\n\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.adminService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.submitButtonValue = 'new-admin';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n  onSubmit() {\n    if (!this.addAdminForm.valid) {\n      this.toaster.error('Form Not Valid !');\n      return;\n    }\n    const formObject = this.addAdminForm.getRawValue();\n    formObject.userID = formObject.email;\n    formObject.image = this.imageUrl;\n    console.log(formObject);\n    this.store.dispatch(addAdmin({admin: formObject}));\n  }\n\n\n  checkCurrentLang() {\n    if (this.translate.currentLang && this.translate.currentLang == 'ar') {\n      console.log('current lang : ', this.translate.currentLang);\n      this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group');\n      this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n    } else {\n      this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group');\n      this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n    }\n  }\n\n  checkLangChange() {\n    this.translate.onLangChange.subscribe(lang => {\n      console.log('lang change to : ', lang);\n      if (lang?.lang && lang?.lang == 'ar') {\n        console.log('lang : ', lang?.lang);\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      } else {\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      }\n    });\n  }\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\">\n  <div class=\"content-header\">\n    <h1 class=\"text-center mt-5 mb-3\">{{'new-admin-page' | translate}}</h1>\n  </div>\n  <div class=\"card card-info mb-5\">\n    <div class=\"card-header bg-light-blue text-white p-3\">\n      <!-- <h3 class=\"card-title mb-0\">{{'new-event' | translate}}</h3> -->\n    </div>\n    <!-- /.card-header -->\n    <!-- form start -->\n    <form [formGroup]=\"addAdminForm\" (ngSubmit)=\"onSubmit()\">\n      <div class=\"card-body\">\n        <div class=\"form-group\">\n          <label for=\"exampleInputname1\">{{'name' | translate}}</label>\n          <input type=\"text\"\n                 [ngClass]=\"{'is-invalid': addAdminForm.get('name').errors &&\n                           (addAdminForm.get('name').touched || addAdminForm.get('name').dirty)}\"\n                 name=\"name\"\n                 formControlName=\"name\"\n                 id=\"exampleInputname1\"\n                 class=\"form-control\"\n                 placeholder=\"{{'name-type-placeholder' | translate}}\">\n          <span class=\"invalid-feedback\" *ngIf=\"addAdminForm.get('name').errors?.required\">{{'name-field-is-required' | translate}}</span>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"exampleInputpassword\">{{'password' | translate}}</label>\n          <div class=\"position-relative\">\n          <input #passwordField type=\"password\"\n                 [ngClass]=\"{'is-invalid': addAdminForm.get('password').errors &&\n                           (addAdminForm.get('password').touched || addAdminForm.get('password').dirty)}\"\n                 name=\"password\"\n                 formControlName=\"password\"\n                 id=\"exampleInputpassword\"\n                 class=\"form-control\"\n                 placeholder=\"{{'password-type-placeholder' | translate}}\">\n            <i (mouseenter)=\"showPassword()\" (mouseleave)=\"hidePassword()\" class=\"fa fa-eye fa-custom\"></i>\n          </div>\n          <span class=\"invalid-feedback\" *ngIf=\"addAdminForm.get('password').errors?.required\">{{'password-field-is-required' | translate}}</span>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"exampleInputEmail\">{{'email' | translate}}</label>\n          <input type=\"email\"\n                 [ngClass]=\"{'is-invalid': addAdminForm.get('email').errors &&\n                           (addAdminForm.get('email').touched || addAdminForm.get('email').dirty)}\"\n                 name=\"email\"\n                 formControlName=\"email\"\n                 id=\"exampleInputEmail\"\n                 class=\"form-control\"\n                 placeholder=\"{{'email-type-placeholder' | translate}}\">\n          <span class=\"invalid-feedback\" *ngIf=\"addAdminForm.get('email').errors?.required\">{{'email-field-is-required' | translate}}</span>\n          <span class=\"invalid-feedback\" *ngIf=\"addAdminForm.get('email').errors?.email\">{{'email-field-valid' | translate}}</span>\n        </div>\n        <div class=\"form-group\">\n          <label for=\"exampleInputupload\">{{'upload' | translate}}</label>\n          <div class=\"input-group input-group-custom\">\n            <div class=\"custom-file\">\n              <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                     (change)=\"updateName(imageInput)\">\n              <label class=\"custom-file-label\" for=\"file-input\">{{imageName | translate}}</label>\n            </div>\n            <div class=\"input-group-append\">\n              <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                {{uploadButtonValue | translate}}\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <!-- /.card-body -->\n\n      <div class=\"card-footer\">\n        <button type=\"submit\" class=\"btn bg-light-blue text-white\" [disabled]=\"addAdminForm.invalid\">{{'create' | translate}}</button>\n      </div>\n    </form>\n  </div>\n  <!-- /.card -->\n</div>\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {AdminConfig} from '../../AdminConfig';\nimport {Admin} from '../model/admin.model';\nimport {AdminsResponse} from '../model/admins-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminsService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getAdmins(): Observable<AdminsResponse> {\n    return this.httpClient.get<AdminsResponse>(AdminConfig.adminsAPI);\n  }\n\n  newAdmin(data): Observable<any> {\n    return this.httpClient.post(AdminConfig.createAdminAPI, data);\n  }\n\n  deleteAdmin(userID: string): Observable<any> {\n    return this.httpClient.delete(`${AdminConfig.deleteAdminAPI}/${userID}`);\n  }\n\n  // Admin Section - Upload Image\n  public uploadImage(image: File): Observable<string> {\n    const formData = new FormData();\n    formData.append('image', image);\n    return this.httpClient.post<string>(AdminConfig.generalUploadAPI, formData);\n  }\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Admin } from '../model/admin.model';\n\nexport const loadAdmins = createAction(\n  '[Admin/API] Load Admins',\n);\n\nexport const loadAdminsSuccess = createAction(\n  '[Admin/API] Load Admins Success',\n  props<{ Data: Admin[] }>()\n);\n\nexport const loadAdminsFailure = createAction(\n  '[Admin/API] Load Admins Failure',\n  props<{ error: string }>()\n);\n\nexport const addAdmin = createAction(\n  '[Admin/API] Add Admin',\n  props<{ admin: {name: string, password: string, userID: string, image: string} }>()\n);\n\nexport const addAdminSuccess = createAction(\n  '[Admin/API] Add Admin Success'\n);\n\nexport const addAdminFailure = createAction(\n  '[Admin/API] Add Admin Failure',\n  props<{ error: string }>()\n);\n\nexport const deleteAdmin = createAction(\n  '[Admin/API] Delete Admin',\n  props<{ userID: string }>()\n);\n\nexport const deleteAdminSuccess = createAction(\n  '[Admin/API] Delete Admin Success',\n  props<{ userID: string }>()\n);\n\nexport const deleteAdminFailure = createAction(\n  '[Admin/API] Delete Admin Failure',\n  props<{ error: string }>()\n);\n","import { Injectable } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {ToastrService} from 'ngx-toastr';\nimport * as adminActions from './admin.actions';\nimport {catchError, exhaustMap, map, mergeMap, switchMap, tap} from 'rxjs/operators';\nimport {AdminsService} from '../services/admins.service';\nimport {of} from 'rxjs';\nimport {createAction} from '@ngrx/store';\n\n\n@Injectable()\nexport class AdminEffects {\n\n\n\n  constructor(private actions$: Actions,\n              private adminService: AdminsService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private toaster: ToastrService) {}\n\n  loadAdmins$ = createEffect(() => this.actions$.pipe(\n    ofType(adminActions.loadAdmins),\n    mergeMap(() => this.adminService.getAdmins()\n      .pipe(\n        map(response => {\n          return adminActions.loadAdminsSuccess(response);\n        }),\n        catchError(error => of(adminActions.loadAdminsFailure({error})))\n      ))\n  ));\n\n  addAdmin$ = createEffect(() => this.actions$.pipe(\n    ofType(adminActions.addAdmin),\n    exhaustMap(action => this.adminService.newAdmin(action.admin)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response.msg);\n          return adminActions.addAdminSuccess();\n        }),\n        catchError(error => of(adminActions.addAdminFailure({error})))\n      ))\n  ));\n\n  redirectAfterAdd$ = createEffect(() => this.actions$.pipe(\n    ofType(adminActions.addAdminSuccess),\n    tap(() => this.router.navigate(['admins']))\n  ), { dispatch: false });\n\n  deleteAdmin$ = createEffect(() => this.actions$.pipe(\n    ofType(adminActions.deleteAdmin),\n    mergeMap(action => this.adminService.deleteAdmin(action.userID)\n      .pipe(\n        map((response: any) => {\n          console.log('effect res : ', response);\n          this.toaster.success(response.msg);\n          return adminActions.deleteAdminSuccess({userID: action.userID});\n        }),\n        catchError(error => of(adminActions.deleteAdminFailure({error})))\n      ))\n  ));\n\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Admin } from '../model/admin.model';\nimport * as AdminActions from './admin.actions';\n\nexport const adminsFeatureKey = 'admins';\n\nexport interface AdminState extends EntityState<Admin> {\n  // additional entities state properties\n  Data: Admin[];\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Admin> = createEntityAdapter<Admin>({\n  selectId: (admin: Admin) => admin.userID\n});\n\nexport const initialState: AdminState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(AdminActions.loadAdminsSuccess,\n    (state, action) => adapter.setAll(action.Data, state)\n  ),\n  on(AdminActions.loadAdminsFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(AdminActions.addAdminFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n  on(AdminActions.deleteAdminSuccess,\n    (state, action) => adapter.removeOne(action.userID, state)\n  ),\n  on(AdminActions.deleteAdminFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {adminsFeatureKey, AdminState, selectAll} from './admin.reducer';\r\n\r\nconst adminFeatureState = createFeatureSelector(adminsFeatureKey);\r\n\r\nexport const getAllAdminsSelector = createSelector(adminFeatureState, selectAll);\r\n\r\nexport const getAdminErrorSelector = createSelector(adminFeatureState, (state: AdminState) => state.error);\r\n"]}