{"version":3,"sources":["./src/app/pages/register/components/login/login.component.ts","./src/app/pages/register/components/login/login.component.html","./src/app/pages/register/register-routing.module.ts","./src/app/pages/register/register.component.ts","./src/app/pages/register/register.module.ts","./src/app/pages/register/service/register.service.ts","./src/app/pages/register/store/auth.effects.ts","./src/app/pages/register/store/auth.selector.ts"],"names":[],"mappings":"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","file":"pages-register-register-module-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { RegisterService } from '../../service/register.service';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\r\nimport { AuthService } from 'src/app/@theme/admin-service/auth/auth.service';\r\nimport { Store } from '@ngrx/store';\r\nimport { AppState } from 'src/app/@theme/store/app-state';\r\nimport { startLogin } from '../../store/auth.actions';\r\nimport { getErrorAuth } from '../../store/auth.selector';\r\nimport { Observable } from 'rxjs';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: FormGroup;\r\n  errors = [];\r\n  error = null;\r\n  process = false;\r\n\r\n  constructor(private store: Store<AppState>) { }\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = new FormGroup({\r\n      username: new FormControl(''),\r\n      password: new FormControl('')\r\n    });\r\n    // Get Error Messages\r\n    this.store.select(getErrorAuth).subscribe(\r\n      error => {\r\n        this.process = false;\r\n        this.error = error; \r\n      }\r\n    );\r\n  }\r\n\r\n  onSubmit() {\r\n    this.process = true;\r\n    // Form Code\r\n    this.store.dispatch(setLoadSpinner({status: true}));\r\n    this.store.dispatch(startLogin({data: this.loginForm.getRawValue()}));    \r\n  }\r\n\r\n\r\n}\r\n","<div class=\"col-12 col-sm-11 col-md-9 col-lg-7 col-xl-7 mx-auto my-5\">\r\n  <h1 class=\"text-center text-muted mb-3\">Login Page</h1>\r\n  <div class=\"card\">\r\n    <div class=\"cord-header\"></div>\r\n    <div class=\"card-body\">\r\n      <div class=\"alert alert-danger mb-0 my-2\" [hidden]=\"!error\">\r\n        {{ error }}\r\n      </div>\r\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputEmail3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Username</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"text\" name=\"username\" formControlName=\"username\" class=\"form-control\" id=\"inputEmail3\" placeholder=\"Username\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['username']\">\r\n              {{ errors['username'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <label for=\"inputPassword3\" class=\"col-12 col-sm-2 col-md-3 col-lg-2 col-xl-2 col-form-label\">Password</label>\r\n          <div class=\"col-12 col-sm-10 col-md-9 col-lg-10 col-xl-10\">\r\n            <input type=\"password\" name=\"password\" formControlName=\"password\" class=\"form-control\" id=\"inputPassword3\" placeholder=\"Password\" required>\r\n            <div class=\"alert alert-danger mb-0 mt-2\" [hidden]=\"!errors['password']\">\r\n              {{ errors['password'] }}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"form-group row\">\r\n          <div class=\"col-12\">\r\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"!loginForm.valid\">Login</button>\r\n            <small class=\"text-success m-2\" *ngIf=\"process\">Procressing ....</small>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './register.component';\n\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  template: `<router-outlet><router-outlet>`\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\nimport { RegisterRoutingModule } from './register-routing.module';\n\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './register.component';\n\nimport { RegisterService } from './service/register.service';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromAuth from './store/auth.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AuthEffects } from './store/auth.effects';\n\n\n@NgModule({\n  declarations: [\n    LoginComponent,\n    RegisterComponent,\n  ],\n  imports: [\n    ThemeModule,\n    RegisterRoutingModule,\n    EffectsModule.forFeature([AuthEffects])\n  ],\n  providers: [RegisterService]\n})\nexport class RegisterModule { }\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\r\nimport { LoginRequest } from '../entity/login-request';\r\nimport { AdminConfig } from '../../AdminConfig';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegisterService {\r\n\r\n  constructor(private httpClient: HttpClient) { }\r\n\r\n  // Handling the error\r\n  private static errorHandler(error: HttpErrorResponse) {\r\n    return throwError(error || 'Server Error');\r\n  }\r\n\r\n\r\n  login(data): Observable<any> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': 'application/json',\r\n      })\r\n    };\r\n    return this.httpClient.post<any>(\r\n      AdminConfig.loginAPI, \r\n      JSON.stringify(data),\r\n      httpOptions\r\n      ).pipe(catchError(RegisterService.errorHandler));\r\n  }\r\n\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, tap } from 'rxjs/operators';\nimport { AuthService } from 'src/app/@theme/admin-service/auth/auth.service';\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\nimport { AppState } from 'src/app/@theme/store/app-state';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { RegisterService } from '../service/register.service';\nimport * as authAction from './auth.actions';\n\n\n\n@Injectable()\nexport class AuthEffects {\n\n  constructor(private actions$: Actions,\n              private store: Store<AppState>,\n              private registerService: RegisterService,\n              private authService: AuthService,\n              private router: Router,\n              private activatedRouter: ActivatedRoute,\n              private tokenService: TokenService) {}\n\n  startLogin$ = createEffect(() => this.actions$.pipe(\n    ofType(authAction.startLogin),\n    exhaustMap(action => this.registerService.login(action.data)\n      .pipe(\n        map(response => {\n          this.tokenService.handle(action.data.username, response.token);        \n          this.authService.changeAuthStatus(true);\n          this.store.dispatch(setLoadSpinner({status: false}));\n          return authAction.successLogin();\n        }),\n        catchError(error => {\n          let errorMessage: string;\n          if (error.error.error) {\n            errorMessage = error.error.error;\n          } else if (error.error.message) {\n            errorMessage = error.error.message;\n          } else if (error.error.errors) {\n            errorMessage = error.error.errors;\n          }\n          \n          this.store.dispatch(setLoadSpinner({status: false}));\n          return of(authAction.failureLogin({error: errorMessage}));\n        })\n      ))\n  ));\n\n  // Redirect After Success Login\n  loginRedirect$ = createEffect(() => this.actions$.pipe(\n    ofType(authAction.successLogin),\n    tap(res => this.router.navigate(['../'], {relativeTo: this.activatedRouter}))\n  ), { dispatch: false });\n\n}\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { authsFeatureKey, AuthState } from \"./auth.reducer\";\r\n\r\nconst authFeatureState = createFeatureSelector<AuthState>(authsFeatureKey);\r\n\r\nexport const getErrorAuth = createSelector(authFeatureState, state => state.error);"],"sourceRoot":"webpack:///"}