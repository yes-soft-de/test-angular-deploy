{"version":3,"sources":["./src/app/pages/regions/components/add-region/add-region.component.ts","./src/app/pages/regions/components/add-region/add-region.component.html","./src/app/pages/regions/components/all-regions/all-regions.component.ts","./src/app/pages/regions/components/all-regions/all-regions.component.html","./src/app/pages/regions/components/edit-region/edit-region.component.ts","./src/app/pages/regions/components/edit-region/edit-region.component.html","./src/app/pages/regions/regions-routing.module.ts","./src/app/pages/regions/regions.module.ts","./src/app/pages/regions/services/regions.service.ts","./src/app/pages/regions/store/region.actions.ts","./src/app/pages/regions/store/region.effects.ts","./src/app/pages/regions/store/region.reducer.ts","./src/app/pages/regions/store/region.selector.ts"],"names":[],"mappings":"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","file":"regions-regions-module-es2015.js","sourcesContent":["import { MapsAPILoader } from '@agm/core';\nimport { DOCUMENT } from '@angular/common';\nimport { Component, ElementRef, Inject, NgZone, OnInit, Renderer2, ViewChild } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, ActivationEnd, NavigationEnd, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { GoogleMap } from '../../model/google-map';\nimport { RegionsService } from '../../services/regions.service';\nimport { addRegion, deleteRegion } from '../../store/region.actions';\nimport { RegionState } from '../../store/region.reducer';\n\n@Component({\n  selector: 'app-add-region',\n  templateUrl: './add-region.component.html',\n  styleUrls: ['./add-region.component.scss']\n})\nexport class AddRegionComponent implements OnInit {\n  title: string = 'AGM project';\n  latitude: number;\n  longitude: number;\n  zoom: number;\n  address: string;\n  private geoCoder;\n  \n  @ViewChild('search')\n  public searchElementRef: ElementRef;\n\n  isSubmited = false;\n  addRegionForm: FormGroup;\n  uploadButtonValue = 'upload';\n  coverUploadButtonValue = 'upload';\n  imageName = 'select-image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  imageUploaded = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n  private googleMapToken: string;\n  showSearchResult = false;\n  googleLocationsNameList: GoogleMap[];\n\n  constructor(private store: Store<RegionState>,\n              private toaster: ToastrService,\n              private regionService: RegionsService,\n              public translate: TranslateService,\n              private router: Router,\n              private render: Renderer2,\n              @Inject(DOCUMENT) private document: Document\n              // private mapsAPILoader: MapsAPILoader,\n              // private ngZone: NgZone,\n              // private router: Router,\n              // private activatedRoute: ActivatedRoute\n              ) {\n  }\n\n  ngOnInit() {\n    this.router.events.subscribe(route => {\n      if (route instanceof NavigationEnd && route.urlAfterRedirects == '/regions/add') {\n        this.checkCurrentLang();\n      }\n    });\n    // Fetch Form Data\n    this.addRegionForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n      location: new FormControl(''),\n      placeId: new FormControl('', Validators.required),\n      path: new FormControl(''),\n    });\n\n    this.checkLangChange();    \n    this.getGoogleMapToken();\n  }\n\n  // Get Google Map Token\n  getGoogleMapToken() {\n    this.regionService.getGoogleMapToken().subscribe(token => this.googleMapToken = token.Data);\n  }\n\n  // Region Search Depending On The Place Name \n  searchLocation(event) {    \n    if (this.googleMapToken) {\n      this.showSearchResult = true;\n      const value = of((event.target.value).trim());\n      this.regionService.searchLocationAutoComplete(value, this.googleMapToken).subscribe(\n        data => {\n          if (data) {\n            this.googleLocationsNameList = data.predictions;\n          }\n        });    \n      if (event.target.value == '') {\n        this.showSearchResult = false;\n      }\n    } else {\n      this.toaster.error('Error Google Map Searching, Please Try Later');\n    }\n  }\n\n  // Fill Form Inputs With Google Search Result\n  getLocationInfo(location: GoogleMap) {\n    const description = this.addRegionForm.get('description').value;\n    if (location) {\n      this.showSearchResult = false;\n      this.addRegionForm = new FormGroup({\n        name: new FormControl(location?.description),\n        description: new FormControl(description),  \n        location: new FormControl(location?.structured_formatting?.main_text_matched_substrings?.length),\n        placeId: new FormControl(location?.place_id),\n        path: new FormControl(''),  \n      });\n    }\n  }\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'Upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.imageUploaded = true;\n    this.uploadButtonValue = 'Uploading...';\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.regionService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.imageUploaded = false;\n          this.submitButtonValue = 'new-region';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.imageUploaded = false;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n  checkCurrentLang() {\n    let timer = 0;\n    const runTwoTime = setInterval(() => {\n      timer++;\n      if (this.translate.currentLang == 'ar') {\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      } else {\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      }\n      if (timer == 2) { clearInterval(runTwoTime); }\n    }, 200);\n    \n  }\n\n  checkLangChange() {    \n    this.translate.onLangChange.subscribe(lang => {\n      if (lang?.lang == 'ar') {\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      } else {\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      }\n    });\n  }\n\n  onSubmit() {\n    if (!this.addRegionForm.valid) {\n      this.toaster.error('Error : Form Not Valid');\n      this.isSubmited = false;\n      return false;\n    }\n    // Fetch All Form Data On Json Type\n    const formObject = this.addRegionForm.getRawValue();  \n    formObject.path = this.imageUrl;\n    console.log(formObject);\n    this.store.dispatch(addRegion({region: formObject}));    \n  }\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\">\n    <div class=\"content-header\">\n        <h1 class=\"text-center my-5\">{{'create-region-page' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header bg-sidebar-item-button text-white\">\n            <h3 class=\"card-title mb-0\">{{'new-region' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"addRegionForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('name').errors &&\n                           (addRegionForm.get('name').touched || addRegionForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           formControlName=\"name\"\n                           id=\"inputNameSuccess\"\n                           (keydown)=\"searchLocation($event)\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\" autocomplete=\"off\">\n                    <div class=\"location-search-result px-3 py-2\" *ngIf=\"showSearchResult\">\n                        <ul class=\"list-unstyled mb-0\" *ngIf=\"googleLocationsNameList\">\n                            <li class=\"pb-1\" *ngFor=\"let location of googleLocationsNameList\" (click)=\"getLocationInfo(location)\">{{location?.description}}</li>\n                        </ul>\n                        <div *ngIf=\"!googleLocationsNameList\" class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>                        \n                    </div>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('name').errors?.required\">{{'name-field-required' | translate}}</span>                      \n                </div>\n                <!-- <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">{{'location' | translate}}</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('location').errors &&\n                           (addRegionForm.get('location').touched || addRegionForm.get('location').dirty)}\"\n                           name=\"location\"\n                           formControlName=\"location\" \n                           id=\"exampleInputlocation1\"\n                           class=\"form-control\"\n                           placeholder=\"{{'location-type-placeholder' | translate}}\">                \n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('location').errors?.required\">location Field Is Required</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('location').errors?.location\">Please enter a vaild location address</span>\n                </div> -->\n                \n                <!-- <div class=\"form-group\">\n                    <label for=\"exampleInputplaceId1\">PlaceId</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('placeId').errors &&\n                           (addRegionForm.get('placeId').touched || addRegionForm.get('placeId').dirty)}\"\n                           name=\"placeId\"\n                           formControlName=\"placeId\"\n                           id=\"exampleInputplaceId1\"\n                           class=\"form-control\"\n                           placeholder=\"Type The Location Id\">\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('placeId').errors?.required\">Location Id Field Is Required</span>\n                </div> -->\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': addRegionForm.get('description').errors &&\n                           (addRegionForm.get('description').touched || addRegionForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\" \n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"addRegionForm.get('description').errors?.required\">{{'descriptioon-field-required' | translate}}</span>\n                </div>            \n                <div class=\"form-group\">\n                    <label for=\"exampleInputupload\">{{'upload' | translate}}</label>\n                    <div class=\"input-group input-group-custom\">\n                        <div class=\"custom-file\">\n                            <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                                (change)=\"updateName(imageInput)\">\n                            <label class=\"custom-file-label\" for=\"file-input\">{{imageName | translate}}</label>\n                        </div>\n                        <div class=\"input-group-append\">\n                            <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                            {{uploadButtonValue | translate}}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"addRegionForm.invalid || imageUploaded\">{{'create' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { Observable, Subscription } from 'rxjs';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { Region } from '../../model/region.model';\nimport * as regionsAction from '../../store/region.actions';\nimport { RegionState } from '../../store/region.reducer';\nimport { getAllRegionsSelector } from '../../store/region.selector';\nimport { HttpClient } from '@angular/common/http';\nimport { RegionsService } from '../../services/regions.service';\n\n@Component({\n  selector: 'app-all-regions',\n  templateUrl: './all-regions.component.html',\n  styleUrls: ['./all-regions.component.scss']\n})\nexport class AllRegionsComponent implements OnInit, OnDestroy {\n  regions: Region[];\n  regionsList: Region[] = [];\n  name: any;\n  config: any;\n  isDeleted: boolean;\n  regionsSubscription: Subscription;\n  googleMapToken: string;\n  // googleLocation\n\n  constructor(private store: Store<RegionState>) { }\n\n  ngOnInit(): void {    \n    this.store.dispatch(regionsAction.loadRegions());\n    this.getAllRegions();\n  }\n\n  getAllRegions() {\n    this.regionsSubscription = this.store.select(getAllRegionsSelector).subscribe(\n      data => {\n        console.log(data);\n        this.regions = data;\n        this.regionsList = data;\n      }\n    );\n    this.config = {\n      itemsPerPage: 5,\n      currentPage: 1,\n      totalItems: this.regionsList.length\n    };\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  delete(regionId: number) {\n    if (confirm('Are You Sure You Want To Delete This Region')) {\n      this.isDeleted = true;\n      this.store.dispatch(regionsAction.deleteRegion({id: regionId}));\n      // this.toaster.success('Region Successfully Deleted');\n      setTimeout(() => { this.isDeleted = false; }, 1000);\n    } else {\n      return false;\n    }\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.regionsList = [...this.regions];\n    } else {\n      this.regionsList = [];\n      this.regionsList = this.regions.filter(res => {\n        if (res.name) {\n          const name = res.name.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (name) {\n            // display the Name Column\n            return name;\n          }\n        }\n      });\n    }\n  }\n\n\n  ngOnDestroy() {\n    this.regionsSubscription.unsubscribe();\n  }\n\n\n}\n","<div *ngIf=\"regions.length != 0\">\n    <!-- <div *ngIf=\"regionsList.length !== 0\"> -->\n      <!-- <div class=\"container-fluid\"> -->\n        <h1 class=\"text-center details-title my-4\">{{'manage-regions-page' | translate}}</h1>\n          <div class=\"row\">\n              <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n                  <div class=\"form-group mb-4\">\n                      <input\n                        id=\"exampleFormControlInput2\"\n                        [(ngModel)]=\"name\"\n                        (keyup)=\"applyFilter()\"\n                        type=\"text\"\n                        placeholder=\"{{'region-search-input' | translate}}\"\n                        title=\"{{'region-search-input' | translate}}\"\n                        class=\"form-control form-control-underlined border-primary search-input\">\n                  </div>\n              </div>\n              <!-- <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n                <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/regions/add\">\n                  <i class=\"fa fa-plus\"></i>\n                  {{'new-region' | translate}}\n                </a>\n              </div> -->\n          </div>\n        <div class=\"table-responsive text-center\">\n            <table class=\"table table-bordered main-table\">\n                <tr class=\"bg-dark text-white\">\n                    <td>{{'image' | translate}}</td>\n                    <td>{{'name' | translate}}</td>\n                    <td>{{'description' | translate}}</td>\n                    <!-- <td>{{'location' | translate}}</td> -->\n                    <td>{{'comment-number' | translate}}</td>\n                    <td>{{'rating-average' | translate}}</td>\n                    <td>{{'control' | translate}}</td>\n                </tr>\n                <tr *ngFor=\"let region of regionsList | paginate: config\">\n                  <td><img src=\"{{region?.path[0]?.path}}\" alt=\"{{region.name}} Image\" class=\"img-thumbnail img-custom\"></td>\n                  <td>{{region.name ? region.name : '-'}}</td>\n                  <td class=\"td-custom\">{{region.description ? region.description : '-'}}</td>\n                  <!-- <td>{{region.location ? region.location : '-'}}</td> -->\n                  <td>{{region.commentNumber ? region.commentNumber : '-'}}</td>\n                  <td>{{region.ratingAverage ? region.ratingAverage : '-'}}</td>\n                  <!-- <td>\n                    <a (click)=\"suggest(car.id, (car.suggest ? false : true))\"\n                       class=\"text-primary mr-1 mb-1\"\n                       title=\"Change To {{car.suggest ? 'Not Recommended' : 'Recommended' }}\"\n\n                       style=\"cursor: pointer; {{ suggestProgress ? 'pointer-events: none;' : '' }}\">\n                      {{ car.suggest ? 'Recommended' : 'Not Recommended' }}\n                    </a>\n                  </td> -->\n                  <td>\n                      <a routerLink=\"/regions/{{region?.id}}\" class=\"btn btn-success btn-sm mr-1 mb-1\">\n                        {{'update' | translate}}\n                    </a>\n                    <a (click)=\"delete(region?.id)\" class=\"btn btn-danger confirm btn-sm mr-1 mb-1 {{isDeleted ? 'disabled' : ''}}\">\n                        {{'delete' | translate}}\n                      </a>\n                  </td>\n                </tr>\n            </table>\n            <pagination-controls class=\"my-pagination\"\n                                 (pageChange)=\"pageChanged($event)\"\n                                 autoHide=\"true\"\n                                 maxSize=\"5\"\n                                 responsive=\"true\"\n                                 previousLabel=\"{{'prev' | translate}}\"\n                                 nextLabel=\"{{'next' | translate}}\"\n                                 screenReaderPaginationLabel=\"Pagination\"\n                                 screenReaderPageLabel=\"page\"\n                                 screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n            </pagination-controls>\n        </div>\n      <!-- </div> -->\n    <!-- </div> -->\n    <!-- <div *ngIf=\"regionsList.length === 0\">\n        <div class=\"container\">\n            <div class=\"alert alert-primary text-center mt-5\">{{'region-not-found' | translate}}</div>\n            <a routerLink=\"/cars/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n                <i class=\"fa fa-plus\"></i>\n                {{'add-new-car' | translate}}\n            </a>\n        </div>\n    </div> -->\n</div>\n<div *ngIf=\"regions.length == 0\">\n    <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n\n","import { DOCUMENT } from '@angular/common';\nimport { Component, Inject, OnInit, Renderer2 } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { TranslateService } from '@ngx-translate/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { ImageSnippet } from 'src/app/@theme/model/image-snippet';\nimport { GoogleMap } from '../../model/google-map';\nimport { Region } from '../../model/region.model';\nimport { RegionsService } from '../../services/regions.service';\nimport { loadRegion, updateRegion } from '../../store/region.actions';\nimport { RegionState } from '../../store/region.reducer';\nimport { getRegionSelector } from '../../store/region.selector';\n\n@Component({\n  selector: 'app-edit-region',\n  templateUrl: './edit-region.component.html',\n  styleUrls: ['./edit-region.component.scss']\n})\nexport class EditRegionComponent implements OnInit {\n\n  isSubmited = false;\n  editRegionForm: FormGroup;\n  regionData: Region;\n  uploadButtonValue = 'upload';\n  coverUploadButtonValue = 'upload';\n  imageName = 'select-image';\n  fileSelected = false;\n  fileUploaded = false;\n  imageUrl: string;\n  imagePathReady = false;\n  imageUploaded = false;\n  submitButtonValue = 'Waiting Uploading Image';\n  selectedFile: ImageSnippet;\n  showSearchResult = false;\n  googleMapToken: string;\n  googleLocationsNameList: GoogleMap[];\n\n  constructor(private store: Store<RegionState>,\n              private regionService: RegionsService,\n              private toaster: ToastrService,\n              public translate: TranslateService,\n              private render: Renderer2,\n              @Inject(DOCUMENT) private document: Document,\n              private activatedRoute: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(params => {\n      const regionId = params.get('id');      \n      this.store.dispatch(loadRegion({id: +regionId}));\n    })\n    // Init Form Inputs\n    this.editRegionForm = new FormGroup({\n      name: new FormControl(''),\n      description: new FormControl(''),\n      location: new FormControl(''),\n      path: new FormControl(''),\n      placeId: new FormControl('', Validators.required),\n    });\n    this.checkLangChange();     // Check CHange Languages\n    this.getRegion();           // Region Details\n    this.getGoogleMapToken();   // Google Map Token\n  }\n\n  // Get Google Map Token\n  getGoogleMapToken() {\n    this.regionService.getGoogleMapToken().subscribe(token => this.googleMapToken = token.Data);\n  }\n\n  // Get Region Details\n  getRegion() {\n    this.store.select(getRegionSelector).subscribe(\n      data => {\n        if (data) {\n          this.regionData = data;\n          console.log('data detail: ', data);\n          this.fillForms(data);\n        }\n      }\n    );\n  }\n\n  // Fill Form Inputs With Region Data\n  fillForms(data: Region) {\n    this.editRegionForm = new FormGroup({\n      id: new FormControl(data.id),\n      name: new FormControl(data.name),\n      description: new FormControl(data.description),\n      location: new FormControl(data.location),\n      path: new FormControl(data.path),\n      placeId: new FormControl(data.placeId),\n    });\n  } \n\n  // Search Google Map Location\n  searchLocation(event) {\n    this.showSearchResult = true;\n    const value = of((event.target.value).trim());\n    this.regionService.searchLocationAutoComplete(value, this.googleMapToken).subscribe(\n      data => {\n        if (data) {\n          this.googleLocationsNameList = data.predictions;\n          console.log('search data : ', this.googleLocationsNameList);\n          // this.showSearchResult = false;\n        }\n      });    \n  }\n\n  // Fill Form Inputs With New Google Map Locations\n  getLocationInfo(location: GoogleMap) {\n    const id = this.regionData.id;\n    const description = this.editRegionForm.get('description').value;\n    if (location) {\n      this.showSearchResult = false;\n      this.editRegionForm = new FormGroup({\n        id: new FormControl(id),\n        name: new FormControl(location?.description),\n        description: new FormControl(description),  \n        location: new FormControl(location?.structured_formatting?.main_text_matched_substrings.length),\n        placeId: new FormControl(location?.place_id),\n        path: new FormControl(''),  \n      });\n     \n    }\n  }\n\n  // Check Change Language To Style Upload Image Input With RTL And LTR\n  checkLangChange() {\n    this.translate.onLangChange.subscribe(lang => {\n      console.log('lang change to : ', lang);\n      if (lang.lang == 'ar') {\n        console.log('lang : ', lang.lang);\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      } else {\n        this.render.addClass(this.document.querySelector('.input-group-custom'), 'input-group');\n        this.render.removeClass(this.document.querySelector('.input-group-custom'), 'input-group-ar');\n      }\n    });\n  }\n\n  updateName(imageInput: any) {\n    const file: File = imageInput.files[0];\n    this.uploadButtonValue = 'Upload';\n    this.imageName = file.name;\n    this.fileSelected = true;\n  }\n\n  processFile(imageInput: any) {\n    this.fileSelected = false;\n    this.uploadButtonValue = 'Uploading...';\n    this.imageUploaded = true;\n    console.log('Processing File');\n    const file: File = imageInput.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (event: any) => {\n      this.selectedFile = new ImageSnippet(event.target.result, file);\n      this.regionService.uploadImage(this.selectedFile.file).subscribe(\n        (res) => {\n          console.log(res);\n          this.imageUrl = res;\n          this.uploadButtonValue = 'uploaded';\n          this.imagePathReady = true;\n          this.imageUploaded = false;\n          this.submitButtonValue = 'update';\n        },\n        (err) => {\n          this.uploadButtonValue = 'upload';\n          this.fileSelected = true;\n          this.imageUploaded = false;\n          this.toaster.error('Network Error, Please Try After a Few Seconds');\n          console.log(err);\n        });\n    });\n    reader.readAsDataURL(file);\n  }\n\n\n\n  onSubmit() {\n    if (!this.editRegionForm.valid) {\n      this.toaster.error('Error : Form Not Valid');\n      this.isSubmited = false;\n      return false;\n    }\n    // Fetch All Form Data On Json Type\n    const formObject = this.editRegionForm.getRawValue();  \n    formObject.path = this.imageUrl;\n    if (this.imageUrl) {\n      formObject.path = this.imageUrl;\n    } else {\n      formObject.path = this.regionData.regionImage[0].pathURL;\n    }\n    console.log(formObject);\n    this.store.dispatch(updateRegion({region: formObject}));    \n  }\n\n\n  // This sample uses the Place Autocomplete widget to allow the user to search\n// for and select a place. The sample then displays an info window containing\n// the place ID and other information about the place that the user has\n// selected.\n\n// This example requires the Places library. Include the libraries=places\n// parameter when you first load the API. For example:\n// <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\n/*\n  initMap(): void {\n    const map = new google.maps.Map(\n      document.getElementById(\"map\") as HTMLElement,\n      {\n        center: { lat: -33.8688, lng: 151.2195 },\n        zoom: 13,\n      }\n    );\n\n    const input = document.getElementById(\"pac-input\") as HTMLInputElement;\n\n    const autocomplete = new google.maps.places.Autocomplete(input);\n    autocomplete.bindTo(\"bounds\", map);\n\n    // Specify just the place data fields that you need.\n    autocomplete.setFields([\"place_id\", \"geometry\", \"name\"]);\n\n    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\n\n    const infowindow = new google.maps.InfoWindow();\n    const infowindowContent = document.getElementById(\n      \"infowindow-content\"\n    ) as HTMLElement;\n    infowindow.setContent(infowindowContent);\n\n    const marker = new google.maps.Marker({ map: map });\n\n    marker.addListener(\"click\", () => {\n      infowindow.open(map, marker);\n    });\n\n    autocomplete.addListener(\"place_changed\", () => {\n      infowindow.close();\n\n      const place = autocomplete.getPlace();\n\n      if (!place.geometry || !place.geometry.location) {\n        return;\n      }\n\n      if (place.geometry.viewport) {\n        map.fitBounds(place.geometry.viewport);\n      } else {\n        map.setCenter(place.geometry.location);\n        map.setZoom(17);\n      }\n\n      // Set the position of the marker using the place ID and location.\n      // @ts-ignore This should be in @typings/googlemaps.\n      marker.setPlace({\n        placeId: place.place_id,\n        location: place.geometry.location,\n      });\n\n      marker.setVisible(true);\n\n      (infowindowContent.children.namedItem(\n        \"place-name\"\n      ) as HTMLElement).textContent = place.name as string;\n      (infowindowContent.children.namedItem(\n        \"place-id\"\n      ) as HTMLElement).textContent = place.place_id as string;\n      (infowindowContent.children.namedItem(\n        \"place-address\"\n      ) as HTMLElement).textContent = place.formatted_address as string;\n      infowindow.open(map, marker);\n    });\n  }*/\n\n\n}\n","<!-- general form elements -->\n<div class=\"container-fluid\">\n    <div class=\"content-header\">\n        <h1 class=\"text-center my-5\">{{'update-region-page' | translate}}</h1>\n    </div>\n    <div class=\"card card-info\">\n        <div class=\"card-header bg-sidebar-item-button text-white\">\n            <h3 class=\"card-title mb-0\">{{'update-region' | translate}}</h3>\n        </div>\n        <!-- /.card-header -->\n        <!-- form start -->\n        <form [formGroup]=\"editRegionForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"card-body\">\n                <div class=\"form-group\">\n                    <label class=\"col-form-label\" for=\"inputNameSuccess\">{{'name' | translate}}</label>\n                    <input class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('name').errors &&\n                           (editRegionForm.get('name').touched || editRegionForm.get('name').dirty)}\"\n                           type=\"text\"\n                           name=\"name\"\n                           id=\"inputNameSuccess\"\n                           formControlName=\"name\"\n                           (keydown)=\"searchLocation($event)\"\n                           placeholder=\"{{'name-type-placeholder' | translate}}\">\n                    <div class=\"location-search-result px-3 py-2\" *ngIf=\"showSearchResult\">\n                        <ul class=\"list-unstyled mb-0\" *ngIf=\"googleLocationsNameList\">\n                            <li class=\"pb-1\" *ngFor=\"let location of googleLocationsNameList\" (click)=\"getLocationInfo(location)\">{{location?.description}}</li>\n                        </ul>\n                        <div *ngIf=\"!googleLocationsNameList\" class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>                        \n                    </div>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('name').errors?.required\">{{'name-field-required' | translate}}</span>\n                </div>\n                <!-- <div class=\"form-group\">\n                    <label for=\"exampleInputEmail1\">{{'location' | translate}}</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('location').errors &&\n                           (editRegionForm.get('location').touched || editRegionForm.get('location').dirty)}\"\n                           name=\"location\"\n                           formControlName=\"location\"\n                           id=\"exampleInputlocation1\"\n                           class=\"form-control\"\n                           placeholder=\"Type The location\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('location').errors?.required\">location Field Is Required</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('location').errors?.location\">Please enter a vaild location address</span>\n                </div> -->\n                <!-- <div class=\"form-group\">\n                    <label for=\"exampleInputplaceId1\">PlaceId</label>\n                    <input type=\"text\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('placeId').errors &&\n                           (editRegionForm.get('placeId').touched || editRegionForm.get('placeId').dirty)}\"\n                           name=\"placeId\"\n                           formControlName=\"placeId\"\n                           id=\"exampleInputplaceId1\"\n                           class=\"form-control\"\n                           placeholder=\"Type The Location Id\">\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('placeId').errors?.required\">Location Id Field Is Required</span>\n                </div> -->\n                <div class=\"form-group\">\n                    <label for=\"exampleInputdescription1\">{{'description' | translate}}</label>\n                    <textarea class=\"form-control\"\n                           [ngClass]=\"{'is-invalid': editRegionForm.get('description').errors &&\n                           (editRegionForm.get('description').touched || editRegionForm.get('description').dirty)}\"\n                           name=\"description\"\n                           formControlName=\"description\"\n                           id=\"exampleInputdescription1\"\n                           placeholder=\"{{'description-type-placeholder' | translate}}\">\n                    </textarea>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('description').errors?.required\">{{'descriptioon-field-required' | translate}}</span>\n                    <span class=\"invalid-feedback\" *ngIf=\"editRegionForm.get('description').errors?.minlength\">description Must Be Greater Than 3</span>\n                </div>            \n                <div class=\"form-group\">\n                    <label for=\"exampleInputupload\">{{'upload' | translate}}</label>\n                    <div class=\"input-group input-group-custom\">\n                        <div class=\"custom-file\">\n                            <input #imageInput type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"file-input\"\n                                (change)=\"updateName(imageInput)\">\n                            <label class=\"custom-file-label\" for=\"file-input\">{{imageName | translate}}</label>\n                        </div>\n                        <div class=\"input-group-append\">\n                            <button class=\"btn btn-success\" type=\"button\" (click)=\"processFile(imageInput)\" [disabled]=!fileSelected>\n                            {{uploadButtonValue | translate}}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <!-- /.card-body -->\n\n            <div class=\"card-footer\">\n                <button type=\"submit\" class=\"btn bg-sidebar-item-button text-white\" [disabled]=\"editRegionForm.invalid || imageUploaded\">{{'update' | translate}}</button>\n            </div>\n        </form>\n    </div>\n    <!-- /.card -->\n</div>\n\n<!-- <div style=\"display: none\">\n  <input\n    id=\"pac-input\"\n    class=\"controls\"\n    type=\"text\"\n    placeholder=\"Enter a location\"\n  />\n</div>\n<div id=\"map\"></div>\n<div id=\"infowindow-content\">\n  <span id=\"place-name\" class=\"title\"></span><br />\n  <strong>Place ID:</strong> <span id=\"place-id\"></span><br />\n  <span id=\"place-address\"></span>\n</div> -->\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AddRegionComponent } from './components/add-region/add-region.component';\nimport { AllRegionsComponent } from './components/all-regions/all-regions.component';\nimport { EditRegionComponent } from './components/edit-region/edit-region.component';\n\n\nconst routes: Routes = [\n  { path: '', component: AllRegionsComponent },\n  { path: 'add', component: AddRegionComponent },\n  { path: ':id', component: EditRegionComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegionsRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegionsRoutingModule } from './regions-routing.module';\nimport { AllRegionsComponent } from './components/all-regions/all-regions.component';\nimport { StoreModule } from '@ngrx/store';\nimport * as fromRegion from './store/region.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { RegionEffects } from './store/region.effects';\nimport { ThemeModule } from 'src/app/@theme/theme.module';\nimport { AddRegionComponent } from './components/add-region/add-region.component';\nimport { EditRegionComponent } from './components/edit-region/edit-region.component';\n\n\n@NgModule({\n  declarations: [\n    AllRegionsComponent,\n    AddRegionComponent,\n    EditRegionComponent\n  ],\n  imports: [\n    ThemeModule,\n    RegionsRoutingModule,\n    StoreModule.forFeature(fromRegion.regionsFeatureKey, fromRegion.reducer),\n    EffectsModule.forFeature([RegionEffects]),   \n  ]\n})\nexport class RegionsModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, switchMap } from 'rxjs/operators';\nimport { TokenService } from 'src/app/@theme/admin-service/token/token.service';\nimport { AdminConfig } from '../../AdminConfig';\nimport { GoogleMapResponse } from '../model/google-map-response';\nimport { RegionDetailsResponse } from '../model/region-details.response';\nimport { RegionsResponse } from '../model/region-response.model';\nimport { Region } from '../model/region.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegionsService {\n\n  constructor(private httpClient: HttpClient,\n              private tokenService: TokenService) { }\n\n  // All Regions\n  getAllRegions(): Observable<RegionsResponse> {\n    return this.httpClient.get<RegionsResponse>(AdminConfig.regionsAPI);\n  }\n\n  // Get Region Details\n  getRegion(regionId: number): Observable<RegionDetailsResponse> {\n    return this.httpClient.get<RegionDetailsResponse>(`${AdminConfig.regionAPI}/${regionId}`);\n  }\n\n  // Create New Regions\n  createRegion(data): Observable<Region> {\n    return this.httpClient.post<Region>(\n      AdminConfig.regionAPI,\n      JSON.stringify(data)\n    );\n  }\n\n  // Update Exists Region\n  updateRegion(region: Region): Observable<Region> {\n    return this.httpClient.put<Region>(\n      AdminConfig.updateRegionAPI,\n      JSON.stringify(region)\n    );\n  }\n\n  // Delete Region\n  deleteRegion(regionId: number): Observable<any> {\n    return this.httpClient.delete<any>(\n      `${AdminConfig.regionAPI}/${regionId}`\n    );\n  }\n\n  getGoogleMapToken(): Observable<{Data: string}> {\n    return this.httpClient.get<{Data: string}>(AdminConfig.googleMapTokenAPI);\n  }\n\n  getPlaceDetailsByPlaceID(placeID: string, token: string) {\n    const placeDetailsURL = AdminConfig.googleMapPlaceDetailsAPI + `json?place_id=${placeID}&key=${token}`;\n    return this.httpClient.get(placeDetailsURL);\n  }\n\n  search(value: string, token: string): Observable<GoogleMapResponse> {\n    const searchQuery = AdminConfig.googleMapSearchAPI + `json?input=${value}&types=geocode&key=${token}`;\n    return this.httpClient.get<GoogleMapResponse>(searchQuery);\n  }\n\n  searchLocationAutoComplete(text$: Observable<string>, token: string): Observable<GoogleMapResponse> {\n\t\treturn text$.pipe(\n\t\t\tdebounceTime(500),\t\t\t// Wait 500 Millsecond before execute The rest\n\t\t\tdistinctUntilChanged(),\t\t// stop make search until the searching value is changing \n\t\t\tswitchMap(searchTerm => {\n\t\t\t\tif (!searchTerm) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\treturn this.search(searchTerm, token);\n\t\t\t})\n\t\t);\n\t}\n  \n\n  // Image Section - Upload Image\n  public uploadImage(image: File): Observable<string> {\n    const formData = new FormData();\n    formData.append('image', image);\n    return this.httpClient.post<string>(AdminConfig.generalUploadAPI, formData);\n  }\n\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Update } from '@ngrx/entity';\n\nimport { Region } from '../model/region.model';\n\nexport const loadRegions = createAction('[Region/API] Load Regions');\n\nexport const loadRegionsSuccess = createAction(\n  '[Region/API] Load Regions Success', \n  props<{ Data: Region[] }>()\n);\n\nexport const loadRegionsFailure = createAction(\n  '[Region/API] Load Regions Failure', \n  props<{ error: string }>()\n);\n\nexport const loadRegion = createAction(\n  '[Region/API] Load Region',\n  props<{ id: number }>()\n);\n\nexport const loadRegionSuccess = createAction(\n  '[Region/API] Load Region Success', \n  props<{ region: Region }>()\n);\n\nexport const loadRegionFailure = createAction(\n  '[Region/API] Load Region Failure', \n  props<{ error: string }>()\n);\n\nexport const deleteRegion = createAction(\n  '[Region/API] Delete Region',\n  props<{ id: number }>()\n);\n\nexport const deleteRegionSuccess = createAction(\n  '[Region/API] Delete Region Success'\n);\n\n\nexport const deleteRegionFailure = createAction(\n  '[Region/API] Delete Region Failure',\n  props<{ error: string }>()\n);\n\nexport const addRegion = createAction(\n  '[Region/API] Add Region',\n  props<{ region: Region }>()\n);\n\nexport const addRegionSuccess = createAction(\n  '[Region/API] Add Region Success'\n);\n\nexport const addRegionFailure = createAction(\n  '[Region/API] Add Region Failure',\n  props<{ error: string }>()\n);\n\nexport const upsertRegion = createAction(\n  '[Region/API] Upsert Region',\n  props<{ region: Region }>()\n);\n\nexport const addRegions = createAction(\n  '[Region/API] Add Regions',\n  props<{ regions: Region[] }>()\n);\n\nexport const updateRegion = createAction(\n  '[Region/API] Update Region',\n  props<{ region: Region }>()\n);\n\nexport const updateRegionSuccess = createAction(\n  '[Region/API] Update Region Success',\n  props<{ region: Update<Region> }>()\n);\n\nexport const updateRegionFailure = createAction(\n  '[Region/API] Update Region Failure',\n  props<{ error: string }>()\n);\n\nexport const updateRegions = createAction(\n  '[Region/API] Update Regions',\n  props<{ regions: Update<Region>[] }>()\n);\n\nexport const deleteRegions = createAction(\n  '[Region/API] Delete Regions',\n  props<{ ids: string[] }>()\n);\n\nexport const upsertRegions = createAction(\n  '[Region/API] Upsert Regions',\n  props<{ regions: Region[] }>()\n);\n\nexport const clearRegions = createAction(\n  '[Region/API] Clear Regions'\n);\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Update } from '@ngrx/entity';\nimport { Store } from '@ngrx/store';\nimport { ToastrService } from 'ngx-toastr';\nimport { of } from 'rxjs';\nimport { catchError, exhaustMap, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { AppState } from 'src/app/@theme/store/app-state';\nimport { setLoadSpinner } from 'src/app/@theme/store/shared/shared.actions';\nimport { Region } from '../model/region.model';\nimport { RegionsService } from '../services/regions.service';\nimport * as regionsAction from '../store/region.actions';\n\n\n\n@Injectable()\nexport class RegionEffects {\n\n  constructor(private actions$: Actions,\n              private store: Store<AppState>,\n              private toaster: ToastrService,\n              private router: Router,\n              private activatedRoute: ActivatedRoute,\n              private regionService: RegionsService) {}\n\n  loadRegions$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.loadRegions),\n    mergeMap(() => this.regionService.getAllRegions()\n      .pipe(\n        map(response => {\n          // this.store.dispatch(setLoadSpinner({status: false}));\n          return regionsAction.loadRegionsSuccess(response)\n        }\n        ),\n        catchError(error => {\n          console.log('error effect: ', error);\n          if (error.error.error) {\n            this.toaster.error(error.error.error);\n          } else if (error.error.msg) {\n            this.toaster.error(error.error.msg);\n          }\n          return of(regionsAction.loadRegionsFailure(error));\n        })\n      ))\n  ));\n\n  loadRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.loadRegion),\n    mergeMap(action => this.regionService.getRegion(action.id)\n      .pipe(\n        map(response => regionsAction.loadRegionSuccess({region: response.Data})),\n        catchError(error => {\n          console.log('error effect', error);\n          return of(regionsAction.loadRegionFailure({error}))\n        })\n      ))\n  ));\n\n  addRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.addRegion),\n    exhaustMap(action => this.regionService.createRegion(action.region)\n      .pipe(\n        map((response: any) => {\n          this.toaster.success(response?.msg);\n          return regionsAction.addRegionSuccess();\n        }),\n        catchError(error => {\n          console.log('error create effect', error);\n          return of(regionsAction.addRegionFailure({error}))\n        })\n      ))\n  ));\n\n  updateRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.updateRegion),\n    switchMap(action => this.regionService.updateRegion(action.region)\n    .pipe(\n      map((response: any) => {\n        this.toaster.success(response.msg);\n        const regionUpdate: Update<Region> = {\n          id: action.region.id,\n          changes: {\n            ...action.region\n          }\n        };\n        return regionsAction.updateRegionSuccess({region: regionUpdate});\n      }),\n      catchError(error => of(regionsAction.updateRegionFailure({error})))\n    ) )\n  ));\n\n  redirectAddUpdateRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(...[regionsAction.addRegionSuccess, regionsAction.updateRegionSuccess]),\n    map( () => {\n      this.router.navigate(['regions']);\n    })\n  ), { dispatch: false });\n\n  // redirectUpdateRegion$ = createEffect(() => this.actions$.pipe(\n  //   ofType(regionsAction.updateRegionSuccess),\n  //   map( () => {\n  //     this.router.navigate(['regions']);\n  //   })\n  // ), { dispatch: false });\n\n  deleteRegion$ = createEffect(() => this.actions$.pipe(\n    ofType(regionsAction.deleteRegion),\n    exhaustMap(action => this.regionService.deleteRegion(action.id)\n      .pipe(\n        map(response => {\n          console.log(response);          \n          this.toaster.success('Region Successfully Deleted');\n          return regionsAction.deleteRegionSuccess()}),\n        catchError(error => {\n          console.log('effect delete error', error);\n          return of(regionsAction.deleteRegionFailure({error}));\n        }))\n      ))\n  );\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Region } from '../model/region.model';\nimport * as RegionActions from './region.actions';\n\nexport const regionsFeatureKey = 'regions';\n\nexport interface RegionState extends EntityState<Region> {\n  // additional entities state properties\n  Data: Region[];\n  regionDetails: Region;\n  error: string;\n}\n\nexport const adapter: EntityAdapter<Region> = createEntityAdapter<Region>();\n\nexport const initialState: RegionState = adapter.getInitialState({\n  // additional entity state properties\n  Data: undefined,\n  regionDetails: undefined,\n  error: undefined,\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(RegionActions.loadRegionsSuccess,\n    (state, action) => adapter.setAll(action.Data, state)\n  ),\n  on(RegionActions.loadRegionSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        regionDetails: action.region\n      }\n    }),\n  on(RegionActions.addRegions,\n    (state, action) => adapter.addMany(action.regions, state)\n  ),\n  on(RegionActions.deleteRegion,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n  on(RegionActions.addRegion,\n    (state, action) => adapter.addOne(action.region, state)\n  ),\n  on(RegionActions.upsertRegion,\n    (state, action) => adapter.upsertOne(action.region, state)\n  ),\n  on(RegionActions.addRegions,\n    (state, action) => adapter.addMany(action.regions, state)\n  ),\n  on(RegionActions.upsertRegions,\n    (state, action) => adapter.upsertMany(action.regions, state)\n  ),\n  on(RegionActions.updateRegionSuccess,\n    (state, action) => adapter.updateOne(action.region, state)\n  ),\n  on(RegionActions.updateRegions,\n    (state, action) => adapter.updateMany(action.regions, state)\n  ),\n  on(RegionActions.deleteRegions,\n    (state, action) => adapter.removeMany(action.ids, state)\n  ),\n  on(RegionActions.clearRegions,\n    state => adapter.removeAll(state)\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n","import { createFeatureSelector, createSelector } from \"@ngrx/store\";\r\nimport { regionsFeatureKey, RegionState, selectAll } from \"./region.reducer\";\r\n\r\nconst regionsFeatureState = createFeatureSelector<RegionState>(regionsFeatureKey);\r\n\r\nexport const getAllRegionsSelector = createSelector(regionsFeatureState, selectAll);\r\n\r\nexport const getRegionSelector = createSelector(regionsFeatureState, (state: RegionState) => state.regionDetails);"],"sourceRoot":"webpack:///"}