{"version":3,"sources":["webpack:///src/app/pages/accept-orders/accept-orders-routing.module.ts","webpack:///src/app/pages/accept-orders/accept-orders.module.ts","webpack:///src/app/pages/accept-orders/components/all-accept-orders/all-accept-orders.component.ts","webpack:///src/app/pages/accept-orders/components/all-accept-orders/all-accept-orders.component.html","webpack:///src/app/pages/accept-orders/components/all-unaccept-orders/all-unaccept-orders.component.ts","webpack:///src/app/pages/accept-orders/components/all-unaccept-orders/all-unaccept-orders.component.html","webpack:///src/app/pages/accept-orders/services/accept-orders.service.ts","webpack:///src/app/pages/accept-orders/store/accept-order-selector.ts","webpack:///src/app/pages/accept-orders/store/accept-order.actions.ts","webpack:///src/app/pages/accept-orders/store/accept-order.effects.ts","webpack:///src/app/pages/accept-orders/store/accept-order.reducer.ts"],"names":["routes","path","component","AcceptOrdersRoutingModule","forChild","imports","exports","AcceptOrdersModule","forFeature","declarations","AllAcceptOrdersComponent","store","acceptOrdersList","dispatch","getAcceptedOrders","acceptOrdersSubscription","select","subscribe","data","console","log","acceptOrders","config","itemsPerPage","currentPage","totalItems","length","event","name","filter","res","guideName","toLocaleLowerCase","match","touristName","order","city","status","unsubscribe","selector","templateUrl","styleUrls","AllUnAcceptOrdersComponent","orderSer","unAcceptOrdersList","getUnAcceptedOrders","unAcceptOrdersSubscription","unAcceptOrders","AcceptOrdersService","httpClient","get","allUnacceptedOrdersAPI","allAcceptedOrdersAPI","providedIn","acceptOrdersFeatureState","getAcceptOrdersSelector","state","getUnAcceptOrdersSelector","loadUnAcceptOrders","loadUnAcceptOrdersSuccess","loadUnAcceptOrdersFailure","loadAcceptOrders","loadAcceptOrdersSuccess","loadAcceptOrdersFailure","AcceptOrderEffects","actions$","acceptOrdersService","loadAcceptOrders$","pipe","getAllAcceptedOrders","response","Data","error","loadUnAcceptOrders$","getAllUnAcceptedOrders","unAcceptOrder","acceptOrdersFeatureKey","adapter","initialState","getInitialState","undefined","reducer","action","getSelectors","selectIds","selectEntities","selectAll","selectTotal"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMA,QAAMA,MAAM,GAAW,CACrB;AAAEC,UAAI,EAAE,UAAR;AAAoBC,eAAS,EAAE;AAA/B,KADqB,EAErB;AAAED,UAAI,EAAE,YAAR;AAAsBC,eAAS,EAAE;AAAjC,KAFqB,CAAvB;;QASaC,yB;;;;;YAAAA;;;;yBAAAA,yB;AAAyB,O;AAAA,gBAH3B,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAG2B,EAF1B,4DAE0B;;;;0HAAzBG,yB,EAAyB;AAAA;AAAA,kBAF1B,4DAE0B;AAAA,O;AAFd,K;;;;;sEAEXA,yB,EAAyB;cAJrC,sDAIqC;eAJ5B;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAI4B,Q;;;;;;;;;;;;;;;;;;ACftC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAsBaC,kB;;;;;YAAAA;;;;yBAAAA,kB;AAAkB,O;AAAA,gBAPpB,CACP,+DADO,EAEP,uFAFO,EAGP,wDAAYC,UAAZ,CAAuB,kFAAvB,EAAgE,mEAAhE,CAHO,EAIP,4DAAcA,UAAd,CAAyB,CAAC,8EAAD,CAAzB,CAJO,CAOoB;;;;0HAAlBD,kB,EAAkB;AAAA,uBARd,kHAQc,EARY,wHAQZ;AARsC,kBAEjE,+DAFiE,EAGjE,uFAHiE,EAGxC,8DAHwC,EAGxC,kEAHwC;AAQtC,O;AALF,K;;;;;sEAKhBA,kB,EAAkB;cAT9B,sDAS8B;eATrB;AACRE,sBAAY,EAAE,CAAC,kHAAD,EAA2B,wHAA3B,CADN;AAERJ,iBAAO,EAAE,CACP,+DADO,EAEP,uFAFO,EAGP,wDAAYG,UAAZ,CAAuB,kFAAvB,EAAgE,mEAAhE,CAHO,EAIP,4DAAcA,UAAd,CAAyB,CAAC,8EAAD,CAAzB,CAJO;AAFD,S;AASqB,Q;;;;;;;;;;;;;;;;;;ACtB/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;AC0CU;;AAAoG;;AAAW;;;;;;AAAX;;AAAA;;;;;;AALxG;;AACE;;AAAI;;AAA6C;;AACjD;;AAAI;;AAAiD;;AACrD;;AACE;;AACA;;AACF;;AACA;;AAAI;;AAA2C;;AAC/C;;AAAI;;;;AAA0F;;AAC9F;;AAAI;;;;AAAyF;;AAE7F;;AAAI;;AAAmC;;AACvC;;AAAiC;;;;AAA2E;;AAC9G;;;;;;AAZM;;AAAA;;AACA;;AAAA;;AAEF;;AAAA;;AACqD;;AAAA;;AAEnD;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAEA;;AAAA;;AAC6B;;AAAA;;;;;;;;AAjDvC;;AAGA;;AAA2C;;;;AAA2C;;AACtF;;AACE;;AACE;;AACE;;AAEE;AAAA;;AAAA;;AAAA;AAAA,WAAkB,OAAlB,EAAkB;AAAA;;AAAA;;AAAA;AAAA,SAAlB;;;;;;AAFF;;AAQF;;AACF;;AAOF;;AACA;;AACE;;AACE;;AACE;;AAAI;;;;AAA6B;;AACjC;;AAAI;;;;AAA+B;;AACnC;;AAAI;;;;AAA2B;;AAC/B;;AAAI;;;;AAAuB;;AAC3B;;AAAI;;;;AAA8B;;AAClC;;AAAI;;;;AAA6B;;AAEjC;;AAAI;;;;AAAuB;;AAC3B;;AAAI;;;;AAAuB;;AAC7B;;AACA;;;;AAcF;;AACA;;AACqB;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;AASrB;;AACF;;AAYF;;;;;;AAxE6C;;AAAA;;AASnC;;AAAA;;AACA;;AAJA;;AAkBE;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAEA;;AAAA;;AACA;;AAAA;;AAEF;;AAAA;;AAoBe;;AAAA;;AACA;;AAGA;;;;;;AAezB;;AACE;;AAAsB;;AAAW;;AAAW;;AAAW;;AAAW;;AACpE;;;;QDjEaE,wB;AASX,wCAAoBC,KAApB,EAA+C;AAAA;;AAA3B,aAAAA,KAAA,GAAAA,KAAA;AAPpB,aAAAC,gBAAA,GAAkC,EAAlC;AAOkD;;;;eAElD,oBAAQ;AACN,eAAKD,KAAL,CAAWE,QAAX,CAAoB,sFAApB;AACA,eAAKC,iBAAL;AACD;;;eAED,6BAAoB;AAAA;;AAClB,eAAKC,wBAAL,GAAgC,KAAKJ,KAAL,CAAWK,MAAX,CAAkB,oFAAlB,EAA2CC,SAA3C,CAC9B,UAAAC,IAAI,EAAI;AACN,gBAAIA,IAAJ,EAAU;AACRC,qBAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACA,mBAAI,CAACG,YAAL,GAAoBH,IAApB;AACA,mBAAI,CAACN,gBAAL,GAAwBM,IAAxB;AACA,mBAAI,CAACI,MAAL,GAAc;AACZC,4BAAY,EAAE,CADF;AAEZC,2BAAW,EAAE,CAFD;AAGZC,0BAAU,EAAE,KAAI,CAACb,gBAAL,CAAsBc;AAHtB,eAAd;AAKD;AACF,WAZ6B,CAAhC;AAcD,S,CAED;;;;eACA,qBAAYC,KAAZ,EAAmB;AACjB,eAAKL,MAAL,CAAYE,WAAZ,GAA0BG,KAA1B;AACD;;;eAED,uBAAc;AAAA;;AACZ;AACA,cAAI,CAAC,KAAKC,IAAV,EAAgB;AACd,iBAAKhB,gBAAL,sBAA4B,KAAKS,YAAjC;AACD,WAFD,MAEO;AACL,iBAAKT,gBAAL,GAAwB,EAAxB;AACA,iBAAKA,gBAAL,GAAwB,KAAKS,YAAL,CAAkBQ,MAAlB,CAAyB,UAAAC,GAAG,EAAI;AACtD,kBAAIA,GAAG,CAACC,SAAR,EAAmB;AACjB,oBAAMA,SAAS,GAAGD,GAAG,CAACC,SAAJ,CAAcC,iBAAd,GAAkCC,KAAlC,CAAwC,MAAI,CAACL,IAAL,CAAUI,iBAAV,EAAxC,CAAlB;;AACA,oBAAID,SAAJ,EAAe;AACb,yBAAOA,SAAP;AACD;AACF;;AACD,kBAAID,GAAG,CAACI,WAAR,EAAqB;AACnB,oBAAMA,WAAW,GAAGJ,GAAG,CAACI,WAAJ,CAAgBF,iBAAhB,GAAoCC,KAApC,CAA0C,MAAI,CAACL,IAAL,CAAUI,iBAAV,EAA1C,CAApB;;AACA,oBAAIE,WAAJ,EAAiB;AACf,yBAAOA,WAAP;AACD;AACF;;AACD,kBAAIJ,GAAG,CAACK,KAAJ,CAAUC,IAAd,EAAoB;AAClB,oBAAMA,IAAI,GAAGN,GAAG,CAACK,KAAJ,CAAUC,IAAV,CAAeJ,iBAAf,GAAmCC,KAAnC,CAAyC,MAAI,CAACL,IAAL,CAAUI,iBAAV,EAAzC,CAAb;;AACA,oBAAII,IAAJ,EAAU;AACR,yBAAOA,IAAP;AACD;AACF;;AACD,kBAAIN,GAAG,CAACK,KAAJ,CAAUE,MAAd,EAAsB;AACpB,oBAAMA,MAAM,GAAGP,GAAG,CAACK,KAAJ,CAAUE,MAAV,CAAiBL,iBAAjB,GAAqCC,KAArC,CAA2C,MAAI,CAACL,IAAL,CAAUI,iBAAV,EAA3C,CAAf;;AACA,oBAAIK,MAAJ,EAAY;AACV,yBAAOA,MAAP;AACD;AACF;AACF,aAzBuB,CAAxB;AA0BD;AACF;;;eAED,uBAAc;AACZ,eAAKtB,wBAAL,CAA8BuB,WAA9B;AACD;;;;;;;uBA3EU5B,wB,EAAwB,kH;AAAA,K;;;YAAxBA,wB;AAAwB,4C;AAAA,c;AAAA,a;AAAA,k5B;AAAA;AAAA;ACbnC;;AA4EF;;;;AA5EO;;AA4EF;;AAAA;;;;;;;;;;sED/DQA,wB,EAAwB;cALpC,uDAKoC;eAL1B;AACT6B,kBAAQ,EAAE,uBADD;AAETC,qBAAW,EAAE,oCAFJ;AAGTC,mBAAS,EAAE,CAAC,oCAAD;AAHF,S;AAK0B,Q;;;;;;;;;;;;;;;;;;;;;;AEbrC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACyCU;;AAA6F;;AAAW;;;;;;AAAX;;AAAA;;;;;;AALjG;;AACE;;AAAI;;AAA6C;;AACjD;;AAAI;;AAAiD;;AACrD;;AACE;;AACA;;AACF;;AACA;;AAAI;;AAAmC;;AACvC;;AAAI;;;;AAAwF;;AAC5F;;AAAI;;;;AAAsF;;AAC1F;;AAAI;;;;AAAgD;;AACpD;;AAAiC;;;;AAA2E;;AAC9G;;;;;;AAXM;;AAAA;;AACA;;AAAA;;AAEF;;AAAA;;AACqD;;AAAA;;AAEnD;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAC6B;;AAAA;;;;;;;;AA/CvC;;AAGA;;AAA2C;;;;AAA6C;;AACxF;;AACE;;AACE;;AACE;;AAEE;AAAA;;AAAA;;AAAA;AAAA,WAAkB,OAAlB,EAAkB;AAAA;;AAAA;;AAAA;AAAA,SAAlB;;;;;;AAFF;;AAQF;;AACF;;AAOF;;AACA;;AACE;;AACE;;AACE;;AAAI;;;;AAA6B;;AACjC;;AAAI;;;;AAA+B;;AACnC;;AAAI;;;;AAA2B;;AAC/B;;AAAI;;;;AAAuB;;AAC3B;;AAAI;;;;AAA8B;;AAClC;;AAAI;;;;AAA6B;;AACjC;;AAAI;;;;AAAuB;;AAC3B;;AAAI;;;;AAAuB;;AAC7B;;AACA;;;;AAaF;;AACA;;AACqB;AAAA;;AAAA;;AAAA;AAAA;;;;;;;;AASrB;;AACF;;AAYF;;;;;;AAtE6C;;AAAA;;AASnC;;AAAA;;AACA;;AAJA;;AAkBE;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AACA;;AAAA;;AAEF;;AAAA;;AAmBe;;AAAA;;AACA;;AAGA;;;;;;AAezB;;AACE;;AAAsB;;AAAW;;AAAW;;AAAW;;AAAW;;AACpE;;;;QD7DaC,0B;AASX,0CAAoB/B,KAApB,EAAuDgC,QAAvD,EAAsF;AAAA;;AAAlE,aAAAhC,KAAA,GAAAA,KAAA;AAAmC,aAAAgC,QAAA,GAAAA,QAAA;AAPvD,aAAAC,kBAAA,GAAsC,EAAtC;AAOyF;;;;eAEzF,oBAAQ;AACN,eAAKjC,KAAL,CAAWE,QAAX,CAAoB,wFAApB;AACA,eAAKgC,mBAAL;AACD;;;eAED,+BAAsB;AAAA;;AACpB,eAAKC,0BAAL,GAAkC,KAAKnC,KAAL,CAAWK,MAAX,CAAkB,sFAAlB,EAA6CC,SAA7C,CAChC,UAAAC,IAAI,EAAI;AACN,gBAAIA,IAAJ,EAAU;AACRC,qBAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,IAAnC;AACA,oBAAI,CAAC6B,cAAL,GAAsB7B,IAAtB;AACA,oBAAI,CAAC0B,kBAAL,GAA0B1B,IAA1B;AACA,oBAAI,CAACI,MAAL,GAAc;AACZC,4BAAY,EAAE,CADF;AAEZC,2BAAW,EAAE,CAFD;AAGZC,0BAAU,EAAE,MAAI,CAACmB,kBAAL,CAAwBlB;AAHxB,eAAd;AAKD;AACF,WAZ+B,CAAlC;AAcD,S,CAED;;;;eACA,qBAAYC,KAAZ,EAAmB;AACjB,eAAKL,MAAL,CAAYE,WAAZ,GAA0BG,KAA1B;AACD;;;eAED,uBAAc;AAAA;;AACZ;AACA,cAAI,CAAC,KAAKC,IAAV,EAAgB;AACd,iBAAKgB,kBAAL,sBAA8B,KAAKG,cAAnC;AACD,WAFD,MAEO;AACL,iBAAKH,kBAAL,GAA0B,EAA1B;AACA,iBAAKA,kBAAL,GAA0B,KAAKG,cAAL,CAAoBlB,MAApB,CAA2B,UAAAC,GAAG,EAAI;AAC1D,kBAAIA,GAAG,CAACC,SAAR,EAAmB;AACjB,oBAAMA,SAAS,GAAGD,GAAG,CAACC,SAAJ,CAAcC,iBAAd,GAAkCC,KAAlC,CAAwC,MAAI,CAACL,IAAL,CAAUI,iBAAV,EAAxC,CAAlB;;AACA,oBAAID,SAAJ,EAAe;AACb,yBAAOA,SAAP;AACD;AACF;;AACD,kBAAID,GAAG,CAACI,WAAR,EAAqB;AACnB,oBAAMA,WAAW,GAAGJ,GAAG,CAACI,WAAJ,CAAgBF,iBAAhB,GAAoCC,KAApC,CAA0C,MAAI,CAACL,IAAL,CAAUI,iBAAV,EAA1C,CAApB;;AACA,oBAAIE,WAAJ,EAAiB;AACf,yBAAOA,WAAP;AACD;AACF;;AACD,kBAAIJ,GAAG,CAACM,IAAR,EAAc;AACZ,oBAAMA,IAAI,GAAGN,GAAG,CAACM,IAAJ,CAASJ,iBAAT,GAA6BC,KAA7B,CAAmC,MAAI,CAACL,IAAL,CAAUI,iBAAV,EAAnC,CAAb;;AACA,oBAAII,IAAJ,EAAU;AACR,yBAAOA,IAAP;AACD;AACF;AACF,aAnByB,CAA1B;AAoBD;AACF;;;eAED,uBAAc;AACZ,eAAKU,0BAAL,CAAgCR,WAAhC;AACD;;;;;;;uBArEUI,0B,EAA0B,kH,EAAA,oJ;AAAA,K;;;YAA1BA,0B;AAA0B,8C;AAAA,c;AAAA,a;AAAA,k5B;AAAA;AAAA;ACfrC;;AA0EF;;;;AA1EO;;AA0EF;;AAAA;;;;;;;;;;sED3DQA,0B,EAA0B;cALtC,uDAKsC;eAL5B;AACTH,kBAAQ,EAAE,yBADD;AAETC,qBAAW,EAAE,sCAFJ;AAGTC,mBAAS,EAAE,CAAC,sCAAD;AAHF,S;AAK4B,Q;;;;;;;;;;;;;;;;;;;;;;;;AEfvC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAUaO,mB;AAEX,mCAAoBC,UAApB,EAA4C;AAAA;;AAAxB,aAAAA,UAAA,GAAAA,UAAA;AAA2B;;;;eAG/C,kCAAsB;AACpB,iBAAO,KAAKA,UAAL,CAAgBC,GAAhB,CAA2C,yDAAYC,sBAAvD,CAAP;AACD;;;eAED,gCAAoC;AAAA,cAAfd,MAAe,uEAAN,MAAM;AAClC,iBAAO,KAAKY,UAAL,CAAgBC,GAAhB,WAA6C,yDAAYE,oBAAzD,cAAiFf,MAAjF,EAAP;AACD;;;;;;;uBAXUW,mB,EAAmB,uH;AAAA,K;;;aAAnBA,mB;AAAmB,eAAnBA,mBAAmB,K;AAAA,kBAFlB;;;;;sEAEDA,mB,EAAmB;cAH/B,wDAG+B;eAHpB;AACVK,oBAAU,EAAE;AADF,S;AAGoB,Q;;;;;;;;;;;;;;;;;;;;;;ACVhC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGA,QAAMC,wBAAwB,GAAG,0EAAsB,4EAAtB,CAAjC;AAEO,QAAMC,uBAAuB,GAAG,mEAAeD,wBAAf,EAAyC,UAACE,KAAD;AAAA,aAAwBA,KAAK,CAACnC,YAA9B;AAAA,KAAzC,CAAhC;AAEA,QAAMoC,yBAAyB,GAAG,mEAAeH,wBAAf,EAAyC,UAACE,KAAD;AAAA,aAAwBA,KAAK,CAACT,cAA9B;AAAA,KAAzC,CAAlC;;;;;;;;;;;;;;;;ACPP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKO,QAAMW,kBAAkB,GAAG,iEAChC,wCADgC,CAA3B;AAIA,QAAMC,yBAAyB,GAAG,iEACvC,gDADuC,EAEvC,2DAFuC,CAAlC;AAKA,QAAMC,yBAAyB,GAAG,iEACvC,gDADuC,EAEvC,2DAFuC,CAAlC;AAKA,QAAMC,gBAAgB,GAAG,iEAC9B,sCAD8B,CAAzB;AAIA,QAAMC,uBAAuB,GAAG,iEACrC,8CADqC,EAErC,2DAFqC,CAAhC;AAKA,QAAMC,uBAAuB,GAAG,iEACrC,8CADqC,EAErC,2DAFqC,CAAhC;;;;;;;;;;;;;;;;AC5BP;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QASaC,kB,GAIX,4BAAoBC,QAApB,EACoBC,mBADpB,EAC8D;AAAA;;AAAA;;AAD1C,WAAAD,QAAA,GAAAA,QAAA;AACA,WAAAC,mBAAA,GAAAA,mBAAA;AAEpB,WAAAC,iBAAA,GAAoB,mEAAa;AAAA,eAAM,MAAI,CAACF,QAAL,CAAcG,IAAd,CACrC,6DAAO,sEAAP,CADqC,EAErC,iEAAU;AAAA,iBAAM,MAAI,CAACF,mBAAL,CAAyBG,oBAAzB,GACbD,IADa,CAEZ,2DAAI,UAAAE,QAAQ;AAAA,mBAAI,8EAA2C;AAACjD,0BAAY,EAAEiD,QAAQ,CAACC;AAAxB,aAA3C,CAAJ;AAAA,WAAZ,CAFY,EAGZ,kEAAW,UAAAC,KAAK;AAAA,mBAAI,gDAAG,8EAA2C;AAACA,mBAAK,EAALA;AAAD,aAA3C,CAAH,CAAJ;AAAA,WAAhB,CAHY,CAAN;AAAA,SAAV,CAFqC,CAAN;AAAA,OAAb,CAApB;AAUA,WAAAC,mBAAA,GAAsB,mEAAa;AAAA,eAAM,MAAI,CAACR,QAAL,CAAcG,IAAd,CACvC,6DAAO,wEAAP,CADuC,EAEvC,iEAAU;AAAA,iBAAM,MAAI,CAACF,mBAAL,CAAyBQ,sBAAzB,GACbN,IADa,CAEZ,2DAAI,UAAAE,QAAQ;AAAA,mBAAI,gFAA6C;AAACK,2BAAa,EAAEL,QAAQ,CAACC;AAAzB,aAA7C,CAAJ;AAAA,WAAZ,CAFY,EAGZ,kEAAW,UAAAC,KAAK;AAAA,mBAAI,gDAAG,gFAA6C;AAACA,mBAAK,EAALA;AAAD,aAA7C,CAAH,CAAJ;AAAA,WAAhB,CAHY,CAAN;AAAA,SAAV,CAFuC,CAAN;AAAA,OAAb,CAAtB;AAZgE,K;;;uBALrDR,kB,EAAkB,6G,EAAA,2I;AAAA,K;;;aAAlBA,kB;AAAkB,eAAlBA,kBAAkB;;;;;sEAAlBA,kB,EAAkB;cAD9B;AAC8B,Q;;;;;;;;;;;;;;;;;;;;;;;;ACT/B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAMO,QAAMY,sBAAsB,GAAG,QAA/B;AASA,QAAMC,OAAO,GAA+B,0EAA5C;AAEA,QAAMC,YAAY,GAAgBD,OAAO,CAACE,eAAR,CAAwB;AAC/D;AACA1D,kBAAY,EAAE2D,SAFiD;AAG/DjC,oBAAc,EAAEiC,SAH+C;AAI/DR,WAAK,EAAEQ;AAJwD,KAAxB,CAAlC;AAQA,QAAMC,OAAO,GAAG,kEACrBH,YADqB,EAErB,uDAAG,6EAAH,EACE,UAACtB,KAAD,EAAQ0B,MAAR,EAAmB;AACjB,aAAO,MAAP,OAAO,CAAP,kBACK1B,KADL,CAAO,EACG;AACRnC,oBAAY,EAAE6D,MAAM,CAAC7D;AADb,OADH,CAAP;AAID,KANH,CAFqB,EAUrB,uDAAG,+EAAH,EACE,UAACmC,KAAD,EAAQ0B,MAAR,EAAmB;AACjB,aAAO,MAAP,OAAO,CAAP,kBACK1B,KADL,CAAO,EACG;AACRT,sBAAc,EAAEmC,MAAM,CAACP;AADf,OADH,CAAP;AAID,KANH,CAVqB,CAAhB;;gCA0BHE,OAAO,CAACM,YAAR,E;QAJFC,S,yBAAAA,S;QACAC,c,yBAAAA,c;QACAC,S,yBAAAA,S;QACAC,W,yBAAAA,W","file":"accept-orders-accept-orders-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport {AllAcceptOrdersComponent} from './components/all-accept-orders/all-accept-orders.component';\nimport {AllUnAcceptOrdersComponent} from './components/all-unaccept-orders/all-unaccept-orders.component';\n\n\nconst routes: Routes = [\n  { path: 'accepted', component: AllAcceptOrdersComponent },\n  { path: 'unaccepted', component: AllUnAcceptOrdersComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AcceptOrdersRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AcceptOrdersRoutingModule } from './accept-orders-routing.module';\nimport { AllAcceptOrdersComponent } from './components/all-accept-orders/all-accept-orders.component';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AcceptOrderEffects } from './store/accept-order.effects';\nimport {StoreModule} from '@ngrx/store';\nimport * as fromAcceptOrders from './store/accept-order.reducer';\nimport {ThemeModule} from '../../@theme/theme.module';\nimport {AllUnAcceptOrdersComponent} from './components/all-unaccept-orders/all-unaccept-orders.component';\n\n\n@NgModule({\n  declarations: [AllAcceptOrdersComponent, AllUnAcceptOrdersComponent],\n  imports: [\n    ThemeModule,\n    AcceptOrdersRoutingModule,\n    StoreModule.forFeature(fromAcceptOrders.acceptOrdersFeatureKey, fromAcceptOrders.reducer),\n    EffectsModule.forFeature([AcceptOrderEffects])\n  ]\n})\nexport class AcceptOrdersModule { }\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {OrdersState} from '../../store/accept-order.reducer';\nimport {loadAcceptOrders} from '../../store/accept-order.actions';\nimport {getAcceptOrdersSelector} from '../../store/accept-order-selector';\nimport {Subscription} from 'rxjs';\nimport {AcceptOrder} from '../../model/accept-order.model';\n\n@Component({\n  selector: 'app-all-accept-orders',\n  templateUrl: './all-accept-orders.component.html',\n  styleUrls: ['./all-accept-orders.component.scss']\n})\nexport class AllAcceptOrdersComponent implements OnInit, OnDestroy {\n  acceptOrders: AcceptOrder[];\n  acceptOrdersList: AcceptOrder[] = [];\n  name: any;\n  config: any;\n  isDeleted: boolean;\n  acceptOrdersSubscription: Subscription;\n\n\n  constructor(private store: Store<OrdersState>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(loadAcceptOrders());\n    this.getAcceptedOrders();\n  }\n\n  getAcceptedOrders() {\n    this.acceptOrdersSubscription = this.store.select(getAcceptOrdersSelector).subscribe(\n      data => {\n        if (data) {\n          console.log('data', data);\n          this.acceptOrders = data;\n          this.acceptOrdersList = data;\n          this.config = {\n            itemsPerPage: 5,\n            currentPage: 1,\n            totalItems: this.acceptOrdersList.length\n          };\n        }\n      });\n\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.acceptOrdersList = [...this.acceptOrders];\n    } else {\n      this.acceptOrdersList = [];\n      this.acceptOrdersList = this.acceptOrders.filter(res => {\n        if (res.guideName) {\n          const guideName = res.guideName.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (guideName) {\n            return guideName;\n          }\n        }\n        if (res.touristName) {\n          const touristName = res.touristName.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (touristName) {\n            return touristName;\n          }\n        }\n        if (res.order.city) {\n          const city = res.order.city.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (city) {\n            return city;\n          }\n        }\n        if (res.order.status) {\n          const status = res.order.status.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (status) {\n            return status;\n          }\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.acceptOrdersSubscription.unsubscribe();\n  }\n\n\n}\n","  <div *ngIf=\"acceptOrders\">\n  <!-- <div *ngIf=\"eventsList.length !== 0\"> -->\n  <!-- <div class=\"container-fluid\"> -->\n  <h1 class=\"text-center details-title my-4\">{{'manage-accept-orders-page' | translate}}</h1>\n  <div class=\"row\">\n    <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n      <div class=\"form-group mb-4\">\n        <input\n          id=\"exampleFormControlInput2\"\n          [(ngModel)]=\"name\"\n          (keyup)=\"applyFilter()\"\n          type=\"text\"\n          placeholder=\"{{'accept-order-search-input' | translate}}\"\n          title=\"{{'accept-order-search-input' | translate}}\"\n          class=\"form-control form-control-underlined border-primary search-input\">\n      </div>\n    </div>\n    <!-- <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n      <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/events/add\">\n        <i class=\"fa fa-plus\"></i>\n        {{'new-event' | translate}}\n      </a>\n    </div> -->\n  </div>\n  <div class=\"table-responsive text-center\">\n    <table class=\"table table-bordered main-table\">\n      <tr class=\"bg-dark text-white\">\n        <td>{{'guide-name' | translate }}</td>\n        <td>{{'tourist-name' | translate }}</td>\n        <td>{{'services' | translate }}</td>\n        <td>{{'city' | translate }}</td>\n        <td>{{'arrive-date' | translate }}</td>\n        <td>{{'leave-date' | translate }}</td>\n        <!-- <td>{{'status' | translate }}</td> -->\n        <td>{{'cost' | translate }}</td>\n        <td>{{'date' | translate }}</td>\n      </tr>\n      <tr *ngFor=\"let order of acceptOrdersList | paginate: config\">\n        <td>{{order?.guideName ? order?.guideName : '-'}}</td>\n        <td>{{order?.touristName ? order?.touristName : '-'}}</td>\n        <td>\n          {{order?.order?.services.length == 0 ? '-' : null}}\n          <span class=\"m-1 px-1 rounded border border-primary\" *ngFor=\"let service of order?.order?.services\">{{service}}</span>\n        </td>\n        <td>{{order?.order ? order?.order?.city : '-'}}</td>\n        <td>{{order?.order ? (order?.order?.arriveDate?.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\n        <td>{{order?.order ? (order?.order?.leaveDate?.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\n        <!-- <td>{{order?.order ? order?.order?.status : '-'}}</td> -->\n        <td>{{order?.cost ? order?.cost : '-'}}</td>\n        <td style=\"white-space: nowrap;\">{{order?.date ? (order?.date.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\n      </tr>\n    </table>\n    <pagination-controls class=\"my-pagination\"\n                         (pageChange)=\"pageChanged($event)\"\n                         autoHide=\"true\"\n                         maxSize=\"5\"\n                         responsive=\"true\"\n                         previousLabel=\"{{'prev' | translate}}\"\n                         nextLabel=\"{{'next' | translate}}\"\n                         screenReaderPaginationLabel=\"Pagination\"\n                         screenReaderPageLabel=\"page\"\n                         screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n    </pagination-controls>\n  </div>\n  <!-- </div> -->\n  <!-- </div> -->\n  <!-- <div *ngIf=\"eventsList.length === 0\">\n      <div class=\"container\">\n          <div class=\"alert alert-primary text-center mt-5\">{{'event-not-found' | translate}}</div>\n          <a routerLink=\"/cars/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n              <i class=\"fa fa-plus\"></i>\n              {{'add-new-car' | translate}}\n          </a>\n      </div>\n  </div> -->\n</div>\n<div *ngIf=\"!acceptOrders\">\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n","import {Component, OnDestroy, OnInit} from '@angular/core';\nimport {Store} from '@ngrx/store';\nimport {OrdersState} from '../../store/accept-order.reducer';\nimport {loadAcceptOrders, loadUnAcceptOrders} from '../../store/accept-order.actions';\nimport {getAcceptOrdersSelector, getUnAcceptOrdersSelector} from '../../store/accept-order-selector';\nimport {Subscription} from 'rxjs';\nimport {AcceptOrder} from '../../model/accept-order.model';\nimport {AcceptOrdersService} from '../../services/accept-orders.service';\nimport {UnAcceptOrder} from '../../model/unaccept-order';\n\n@Component({\n  selector: 'app-all-unaccept-orders',\n  templateUrl: './all-unaccept-orders.component.html',\n  styleUrls: ['./all-unaccept-orders.component.scss']\n})\nexport class AllUnAcceptOrdersComponent implements OnInit, OnDestroy {\n  unAcceptOrders: UnAcceptOrder[];\n  unAcceptOrdersList: UnAcceptOrder[] = [];\n  name: any;\n  config: any;\n  isDeleted: boolean;\n  unAcceptOrdersSubscription: Subscription;\n\n\n  constructor(private store: Store<OrdersState>, private orderSer: AcceptOrdersService) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(loadUnAcceptOrders());\n    this.getUnAcceptedOrders();\n  }\n\n  getUnAcceptedOrders() {\n    this.unAcceptOrdersSubscription = this.store.select(getUnAcceptOrdersSelector).subscribe(\n      data => {\n        if (data) {\n          console.log('un accept orders : ', data);\n          this.unAcceptOrders = data;\n          this.unAcceptOrdersList = data;\n          this.config = {\n            itemsPerPage: 5,\n            currentPage: 1,\n            totalItems: this.unAcceptOrdersList.length\n          };\n        }\n      });\n\n  }\n\n  // Fetch The Page Number On Page Change\n  pageChanged(event) {\n    this.config.currentPage = event;\n  }\n\n  applyFilter() {\n    // if the search input value is empty\n    if (!this.name) {\n      this.unAcceptOrdersList = [...this.unAcceptOrders];\n    } else {\n      this.unAcceptOrdersList = [];\n      this.unAcceptOrdersList = this.unAcceptOrders.filter(res => {\n        if (res.guideName) {\n          const guideName = res.guideName.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (guideName) {\n            return guideName;\n          }\n        }\n        if (res.touristName) {\n          const touristName = res.touristName.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (touristName) {\n            return touristName;\n          }\n        }\n        if (res.city) {\n          const city = res.city.toLocaleLowerCase().match(this.name.toLocaleLowerCase());\n          if (city) {\n            return city;\n          }\n        }\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this.unAcceptOrdersSubscription.unsubscribe();\n  }\n\n\n}\n","  <div *ngIf=\"unAcceptOrders\">\n  <!-- <div *ngIf=\"eventsList.length !== 0\"> -->\n  <!-- <div class=\"container-fluid\"> -->\n  <h1 class=\"text-center details-title my-4\">{{'manage-unaccept-orders-page' | translate}}</h1>\n  <div class=\"row\">\n    <div class=\"col-10 col-sm-8 col-md-6 col-xl-4\">\n      <div class=\"form-group mb-4\">\n        <input\n          id=\"exampleFormControlInput2\"\n          [(ngModel)]=\"name\"\n          (keyup)=\"applyFilter()\"\n          type=\"text\"\n          placeholder=\"{{'unaccept-order-search-input' | translate}}\"\n          title=\"{{'unaccept-order-search-input' | translate}}\"\n          class=\"form-control form-control-underlined border-primary search-input\">\n      </div>\n    </div>\n    <!-- <div class=\"col-5 col-md-6 col-xl-8 align-self-center\">\n      <a class=\"btn btn-primary btn-sm mb-2 float-right\" routerLink=\"/events/add\">\n        <i class=\"fa fa-plus\"></i>\n        {{'new-event' | translate}}\n      </a>\n    </div> -->\n  </div>\n  <div class=\"table-responsive text-center\">\n    <table class=\"table table-bordered main-table\">\n      <tr class=\"bg-dark text-white\">\n        <td>{{'guide-name' | translate }}</td>\n        <td>{{'tourist-name' | translate }}</td>\n        <td>{{'services' | translate }}</td>\n        <td>{{'city' | translate }}</td>\n        <td>{{'arrive-date' | translate }}</td>\n        <td>{{'leave-date' | translate }}</td>\n        <td>{{'cost' | translate }}</td>\n        <td>{{'date' | translate }}</td>\n      </tr>\n      <tr *ngFor=\"let order of unAcceptOrdersList | paginate: config\">\n        <td>{{order?.guideName ? order?.guideName : '-'}}</td>\n        <td>{{order?.touristName ? order?.touristName : '-'}}</td>\n        <td>\n          {{order?.services.length == 0 ? '-' : null}}\n          <span class=\"m-1 px-1 rounded border border-primary\" *ngFor=\"let service of order?.services\">{{service}}</span>\n        </td>\n        <td>{{order?.city ? order?.city : '-'}}</td>\n        <td>{{order?.arriveDate ? (order?.arriveDate?.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\n        <td>{{order?.leaveDate ? (order?.leaveDate?.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\n        <td>{{order?.cost ? (order?.cost | currency) : '-'}}</td>\n        <td style=\"white-space: nowrap;\">{{order?.date ? (order?.date.timestamp * 1000 | date: 'yyyy-MM-dd') : '-'}}</td>\n      </tr>\n    </table>\n    <pagination-controls class=\"my-pagination\"\n                         (pageChange)=\"pageChanged($event)\"\n                         autoHide=\"true\"\n                         maxSize=\"5\"\n                         responsive=\"true\"\n                         previousLabel=\"{{'prev' | translate}}\"\n                         nextLabel=\"{{'next' | translate}}\"\n                         screenReaderPaginationLabel=\"Pagination\"\n                         screenReaderPageLabel=\"page\"\n                         screenReaderCurrentLabel=\"{{'you-are-on-page' | translate}}\">\n    </pagination-controls>\n  </div>\n  <!-- </div> -->\n  <!-- </div> -->\n  <!-- <div *ngIf=\"eventsList.length === 0\">\n      <div class=\"container\">\n          <div class=\"alert alert-primary text-center mt-5\">{{'event-not-found' | translate}}</div>\n          <a routerLink=\"/cars/add\" class=\"btn btn-primary btn-sm mb-2 float-right\">\n              <i class=\"fa fa-plus\"></i>\n              {{'add-new-car' | translate}}\n          </a>\n      </div>\n  </div> -->\n</div>\n<div *ngIf=\"!unAcceptOrders\">\n  <div class=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n</div>\n","import { Injectable } from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {AdminConfig} from '../../AdminConfig';\nimport {AcceptOrdersResponse} from '../model/accept-orders-response';\nimport {UnAcceptOrderResponse} from '../model/unaccept-order-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AcceptOrdersService {\n\n  constructor(private httpClient: HttpClient) { }\n\n\n  getAllUnAcceptedOrders(): Observable<UnAcceptOrderResponse> {\n    return this.httpClient.get<UnAcceptOrderResponse>(AdminConfig.allUnacceptedOrdersAPI);\n  }\n\n  getAllAcceptedOrders(status = 'done'): Observable<AcceptOrdersResponse> {\n    return this.httpClient.get<AcceptOrdersResponse>(`${AdminConfig.allAcceptedOrdersAPI}/${status}`);\n  }\n}\n","import {createFeatureSelector, createSelector} from '@ngrx/store';\r\nimport {acceptOrdersFeatureKey, OrdersState, selectAll} from './accept-order.reducer';\r\n\r\nconst acceptOrdersFeatureState = createFeatureSelector(acceptOrdersFeatureKey);\r\n\r\nexport const getAcceptOrdersSelector = createSelector(acceptOrdersFeatureState, (state: OrdersState) => state.acceptOrders);\r\n\r\nexport const getUnAcceptOrdersSelector = createSelector(acceptOrdersFeatureState, (state: OrdersState) => state.unAcceptOrders);\r\n\r\n","import { createAction, props } from '@ngrx/store';\n\nimport { AcceptOrder } from '../model/accept-order.model';\nimport { UnAcceptOrder } from '../model/unaccept-order';\n\nexport const loadUnAcceptOrders = createAction(\n  '[AcceptOrder/API] Load UnAccept Orders'\n);\n\nexport const loadUnAcceptOrdersSuccess = createAction(\n  '[AcceptOrder/API] Load UnAccept Orders Success',\n  props<{ unAcceptOrder: UnAcceptOrder[] }>()\n);\n\nexport const loadUnAcceptOrdersFailure = createAction(\n  '[AcceptOrder/API] Load UnAccept Orders Failure',\n  props<{ error: string }>()\n);\n\nexport const loadAcceptOrders = createAction(\n  '[AcceptOrder/API] Load Accept Orders'\n);\n\nexport const loadAcceptOrdersSuccess = createAction(\n  '[AcceptOrder/API] Load Accept Orders Success',\n  props<{ acceptOrders: AcceptOrder[] }>()\n);\n\nexport const loadAcceptOrdersFailure = createAction(\n  '[AcceptOrder/API] Load Accept Orders Failure',\n  props<{ error: string }>()\n);\n\n","import { Injectable } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {AcceptOrdersService} from '../services/accept-orders.service';\nimport * as acceptOrderActions from './accept-order.actions';\nimport {catchError, map, switchMap} from 'rxjs/operators';\nimport {of} from 'rxjs';\n\n\n@Injectable()\nexport class AcceptOrderEffects {\n\n\n\n  constructor(private actions$: Actions,\n              private acceptOrdersService: AcceptOrdersService) {}\n\n  loadAcceptOrders$ = createEffect(() => this.actions$.pipe(\n    ofType(acceptOrderActions.loadAcceptOrders),\n    switchMap(() => this.acceptOrdersService.getAllAcceptedOrders()\n      .pipe(\n        map(response => acceptOrderActions.loadAcceptOrdersSuccess({acceptOrders: response.Data})),\n        catchError(error => of(acceptOrderActions.loadAcceptOrdersFailure({error})))\n      ))\n  ));\n\n\n  loadUnAcceptOrders$ = createEffect(() => this.actions$.pipe(\n    ofType(acceptOrderActions.loadUnAcceptOrders),\n    switchMap(() => this.acceptOrdersService.getAllUnAcceptedOrders()\n      .pipe(\n        map(response => acceptOrderActions.loadUnAcceptOrdersSuccess({unAcceptOrder: response.Data})),\n        catchError(error => of(acceptOrderActions.loadUnAcceptOrdersFailure({error})))\n      ))\n  ));\n}\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { AcceptOrder } from '../model/accept-order.model';\nimport * as AcceptOrderActions from './accept-order.actions';\nimport {UnAcceptOrder} from '../model/unaccept-order';\n\nexport const acceptOrdersFeatureKey = 'orders';\n\nexport interface OrdersState extends EntityState<AcceptOrder> {\n  // additional entities state properties\n  acceptOrders: AcceptOrder[];\n  unAcceptOrders: UnAcceptOrder[];\n  error: string;\n}\n\nexport const adapter: EntityAdapter<AcceptOrder> = createEntityAdapter<AcceptOrder>();\n\nexport const initialState: OrdersState = adapter.getInitialState({\n  // additional entity state properties\n  acceptOrders: undefined,\n  unAcceptOrders: undefined,\n  error: undefined\n});\n\n\nexport const reducer = createReducer(\n  initialState,\n  on(AcceptOrderActions.loadAcceptOrdersSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        acceptOrders: action.acceptOrders\n      };\n    }\n  ),\n  on(AcceptOrderActions.loadUnAcceptOrdersSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        unAcceptOrders: action.unAcceptOrder\n      };\n    }\n  ),\n);\n\n\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n"]}